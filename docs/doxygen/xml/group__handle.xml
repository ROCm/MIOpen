<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__handle" kind="group">
    <compoundname>handle</compoundname>
    <title>Handle</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenStatus_t</name>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a3fc50915c64e73ec736e0f9c2cb78129" prot="public">
          <name>miopenStatusSuccess</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No errors </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6abd80b3c675e17392162640b6a5cb7375" prot="public">
          <name>miopenStatusNotInitialized</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data not initialized. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6af0d655f9d71417a7143be6452651c1bb" prot="public">
          <name>miopenStatusInvalidValue</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Incorrect variable value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6abcd087689c69bcee83d4726487c8cca8" prot="public">
          <name>miopenStatusBadParm</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Incorrect parameter detected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a9a1f9f181bb7d5649d3bb788760c489b" prot="public">
          <name>miopenStatusAllocFailed</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Memory allocation error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6acfdd2d77791aae4ddd442f819189c19c" prot="public">
          <name>miopenStatusInternalError</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MIOpen failure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6ab6a11c9af8b9e52ab982abd85673ce9e" prot="public">
          <name>miopenStatusNotImplemented</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use of unimplemented feature. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a1504690ef8823ed85612008c08277b88" prot="public">
          <name>miopenStatusUnknownError</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unknown error occurred. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a0199ef6922cf9b53fc3320d681915b73" prot="public">
          <name>miopenStatusUnsupportedOp</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsupported operator for fusion. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a0d00d1e79b4c27f3ca840c9729a8c58b" prot="public">
          <name>miopenStatusGpuOperationsSkipped</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is not an error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a51681c1688f3fdf0609c798e43afd171" prot="public">
          <name>miopenStatusVersionMismatch</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Version mismatch of the supplied binary data argment. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error codes that are returned by all MIOpen API calls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="104" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="105" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="group__handle_1ga80bfa6e46fdc8764f04f29a03689d1fc" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenF8RoundingMode_t</name>
        <enumvalue id="group__handle_1gga80bfa6e46fdc8764f04f29a03689d1fcafbe24189bfd43c73fe839aa4ea2968d7" prot="public">
          <name>miopenF8RoundingModeStandard</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga80bfa6e46fdc8764f04f29a03689d1fcafe52ff63273ab4eb21714c050f4abfb3" prot="public">
          <name>miopenF8RoundingModeStochastic</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="120" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="121" bodyend="124"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__handle_1gac2642558af91c051446ef9fab49bba31" prot="public" static="no">
        <type>void *(*</type>
        <definition>typedef void*(* miopenAllocatorFunction) (void *context, size_t sizeBytes)</definition>
        <argsstring>)(void *context, size_t sizeBytes)</argsstring>
        <name>miopenAllocatorFunction</name>
        <briefdescription>
<para>Custom allocator function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allow for user-defined custom allocator</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer a context (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to allocate (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="144" column="9" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__handle_1ga54112962a0d7bcf6cc011a5ed19a4201" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* miopenDeallocatorFunction) (void *context, void *memory)</definition>
        <argsstring>)(void *context, void *memory)</argsstring>
        <name>miopenDeallocatorFunction</name>
        <briefdescription>
<para>Custom deallocator function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allow for user-defined custom deallocation function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer context (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer allocated memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="154" column="9" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__handle_1gaaf9a62fe06372c918be22db25cf13007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenHandle)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenHandle</type>
        </param>
        <briefdescription>
<para>Creates the miopenHandle_t type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="94" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="94" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1gac6c00a7bd50c44b815976c276ae4d9b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* miopenGetErrorString</definition>
        <argsstring>(miopenStatus_t error)</argsstring>
        <name>miopenGetErrorString</name>
        <param>
          <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Get character string for an error code. </para>
        </briefdescription>
        <detaileddescription>
<para>A function which returns a NULL terminated character string of the error code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>miopenStatus_t type error status (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>errorString </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="134" column="13" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="134" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga6e4d06e38316d75e5d95cb6fde5c7c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetVersion</definition>
        <argsstring>(size_t *major, size_t *minor, size_t *patch)</argsstring>
        <name>miopenGetVersion</name>
        <param>
          <type>size_t *</type>
          <declname>major</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>minor</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>patch</declname>
        </param>
        <briefdescription>
<para>Method to return version of MIOpen. </para>
        </briefdescription>
        <detaileddescription>
<para>The output values of this call follow from the versioning format major.minor.patch</para>
<para>Pointers that are NULL will be ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>major</parametername>
</parameternamelist>
<parameterdescription>
<para>Major version number (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minor</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor version number (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch</parametername>
</parameternamelist>
<parameterdescription>
<para>Patch version number (output)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="169" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="169" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1gad7924dd946f447575547e0e1bddb2fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreate</definition>
        <argsstring>(miopenHandle_t *handle)</argsstring>
        <name>miopenCreate</name>
        <param>
          <type>miopenHandle_t *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Method to create the MIOpen handle object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a MIOpen handle. This is called at the very start to initialize the MIOpen environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a MIOpen handle type (output)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="179" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="179" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga104432242babf6a4c66b09a43e7081d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateWithStream</definition>
        <argsstring>(miopenHandle_t *handle, miopenAcceleratorQueue_t stream)</argsstring>
        <name>miopenCreateWithStream</name>
        <param>
          <type>miopenHandle_t *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenAcceleratorQueue_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Create a MIOpen handle with an accelerator stream. </para>
        </briefdescription>
        <detaileddescription>
<para>The HIP side uses a hipStream_t type for the stream, while OpenCL will use a cl_command_queue.</para>
<para>Create a handle with a previously created accelerator command queue. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a MIOpen handle type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>An accelerator queue type (input)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="192" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="192" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga20296fd22692cbaace8ad86a0a08b869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroy</definition>
        <argsstring>(miopenHandle_t handle)</argsstring>
        <name>miopenDestroy</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Destroys the MIOpen handle. </para>
        </briefdescription>
        <detaileddescription>
<para>This is called when breaking down the MIOpen environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="201" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="201" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1gadd90259644bc8edc5cb42070a66ed651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetStream</definition>
        <argsstring>(miopenHandle_t handle, miopenAcceleratorQueue_t streamID)</argsstring>
        <name>miopenSetStream</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenAcceleratorQueue_t</type>
          <declname>streamID</declname>
        </param>
        <briefdescription>
<para>Set accelerator command queue previously created. </para>
        </briefdescription>
        <detaileddescription>
<para>Set a command queue for an accelerator device <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streamID</parametername>
</parameternamelist>
<parameterdescription>
<para>An accelerator queue type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="210" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="210" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga64e9eb389d9c8e8793908052dffbf138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetStream</definition>
        <argsstring>(miopenHandle_t handle, miopenAcceleratorQueue_t *streamID)</argsstring>
        <name>miopenGetStream</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenAcceleratorQueue_t *</type>
          <declname>streamID</declname>
        </param>
        <briefdescription>
<para>Get the previously created accelerator command queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a command queue for an accelerator device <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streamID</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a accelerator queue type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="220" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="220" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga7e5ef2b84c12704b9ad9daf551d7bd31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetAllocator</definition>
        <argsstring>(miopenHandle_t handle, miopenAllocatorFunction allocator, miopenDeallocatorFunction deallocator, void *allocatorContext)</argsstring>
        <name>miopenSetAllocator</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__handle_1gac2642558af91c051446ef9fab49bba31" kindref="member">miopenAllocatorFunction</ref></type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="group__handle_1ga54112962a0d7bcf6cc011a5ed19a4201" kindref="member">miopenDeallocatorFunction</ref></type>
          <declname>deallocator</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocatorContext</declname>
        </param>
        <briefdescription>
<para>Set allocator for previously created miopenHandle. </para>
        </briefdescription>
        <detaileddescription>
<para>Set a command queue for an accelerator device <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function MIOpen will use for internal memory allocations. The provided callback function should allocate device memory with requested size and return a pointer to this memory. Passing 0 will restore the default MIOpen allocator and deallocator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deallocator</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function MIOpen will use to for internal memory deallocation. The provided callback function should free the specified memory pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocatorContext</parametername>
</parameternamelist>
<parameterdescription>
<para>User-specified pointer which is passed to <computeroutput>allocator</computeroutput> and <computeroutput>deallocator</computeroutput> This allows the callback function to access state set by the caller to this function, for example a stateful heap allocator or a c++ class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="239" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="239" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1gada439cdf3dac26d2e054f75158993fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetKernelTime</definition>
        <argsstring>(miopenHandle_t handle, float *time)</argsstring>
        <name>miopenGetKernelTime</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Get time for last kernel launched. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used only when profiling mode has been enabled. Kernel timings are based on the MIOpen handle and is not thread-safe. In order to use multi-threaded profiling, create an MIOpen handle for each concurrent thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a float type to contain kernel time in milliseconds (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="255" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="255" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga6873d2a57e63cd81a682e3c62900e813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenEnableProfiling</definition>
        <argsstring>(miopenHandle_t handle, bool enable)</argsstring>
        <name>miopenEnableProfiling</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable profiling to retrieve kernel time. </para>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable kernel profiling. This profiling is only for kernel time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to toggle profiling (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="264" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="264" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
