<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group___f_u_s_i_o_n" kind="group">
    <compoundname>FUSION</compoundname>
    <title>FUSION</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___f_u_s_i_o_n_1ga774d5d8b0c1ca371d920e78387100858" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenFusionDirection_t</name>
        <enumvalue id="group___f_u_s_i_o_n_1gga774d5d8b0c1ca371d920e78387100858a558bb4e68777056ebba6ee78ae7e0ad8" prot="public">
          <name>miopenVerticalFusion</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fuses layers vertically, current the only supported mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_u_s_i_o_n_1gga774d5d8b0c1ca371d920e78387100858a54a662450548ccf631bd635eecb1f092" prot="public">
          <name>miopenHorizontalFusion</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fuses layers horizontally, this is unimplemented </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Kernel fusion direction in the network. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3007" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3008" bodyend="3011"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga66a35ee58b7bae6400997b70c60d6579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenFusionPlanDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenFusionPlanDescriptor</type>
        </param>
        <briefdescription>
<para>MIOpen fusion interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2995" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2995" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gad6221c451528eac3d9592842f1df2f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateFusionPlan</definition>
        <argsstring>(miopenFusionPlanDescriptor_t *fusePlanDesc, const miopenFusionDirection_t fuseDirection, const miopenTensorDescriptor_t inputDesc)</argsstring>
        <name>miopenCreateFusionPlan</name>
        <param>
          <type>miopenFusionPlanDescriptor_t *</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>const <ref refid="group___f_u_s_i_o_n_1ga774d5d8b0c1ca371d920e78387100858" kindref="member">miopenFusionDirection_t</ref></type>
          <declname>fuseDirection</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>inputDesc</declname>
        </param>
        <briefdescription>
<para>Creates the kenrel fusion plan descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a fusion plan (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fuseDirection</parametername>
</parameternamelist>
<parameterdescription>
<para>Horizontal or Vertical fusion (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor to tensor for the input (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3020" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3020" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga72b408c1034c7c934c26cb86fde84e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyFusionPlan</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc)</argsstring>
        <name>miopenDestroyFusionPlan</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <briefdescription>
<para>Destroy the fusion plan descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3029" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3029" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga9cbffb2ba55ade895a5fcb005a03c9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCompileFusionPlan</definition>
        <argsstring>(miopenHandle_t handle, miopenFusionPlanDescriptor_t fusePlanDesc)</argsstring>
        <name>miopenCompileFusionPlan</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <briefdescription>
<para>Compiles the fusion plan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3037" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3037" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga6f35ee49f5a6fcd81f3b4cb82f60f830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFusionPlanGetOp</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, const int op_idx, miopenFusionOpDescriptor_t *op)</argsstring>
        <name>miopenFusionPlanGetOp</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>op_idx</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Allows access to the operators in a fusion plan. </para>
        </briefdescription>
        <detaileddescription>
<para>This api call does bounds checking on the supplied op_idx and would return miopenStatusError if the index is out of bounds</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the required operator in the fusion plan, in the order of insertion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer to the operator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3050" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3050" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga3afcf7d3325e8b251eb7b74da8bdc13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFusionPlanGetWorkSpaceSize</definition>
        <argsstring>(miopenHandle_t handle, miopenFusionPlanDescriptor_t fusePlanDesc, size_t *workSpaceSize, miopenConvFwdAlgorithm_t algo)</argsstring>
        <name>miopenFusionPlanGetWorkSpaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref></type>
          <declname>algo</declname>
        </param>
        <briefdescription>
<para>Query the workspace size required for the fusion plan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to return size in bytes (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm selected (inputs) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3062" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3062" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga305370335f4a926f2a2b1cf1c72727f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFusionPlanConvolutionGetAlgo</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, const int requestAlgoCount, int *returnedAlgoCount, miopenConvFwdAlgorithm_t *returnedAlgos)</argsstring>
        <name>miopenFusionPlanConvolutionGetAlgo</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>requestAlgoCount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnedAlgoCount</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref> *</type>
          <declname>returnedAlgos</declname>
        </param>
        <briefdescription>
<para>Returns the supported algorithms for the convolution operator in the Fusion Plan. </para>
        </briefdescription>
        <detaileddescription>
<para>A Convolution operator in a fusion plan may be implemented by different algorithms representing different tradeoffs of memory and performance. The returned list of algorithms is sorted in decreasing order of priority. Therefore, if the user does not request an algorithm to be set using the miopenFusionPlanConvolutionSetAlgo call, the first algorithm in the list would be used to execute the convolution in the fusion plan. Moreover this call must be immediately preceded by the miopenCreateOpConvForward call for the op in question.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of algorithms to return (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnedAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The actual number of returned algorithms; always be less than equal to requestAlgoCount (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnedAlgos</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list of supported algorithms </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3085" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3085" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga45b767f63622636b63f5ad453358cfc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFusionPlanConvolutionSetAlgo</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenConvFwdAlgorithm_t algo)</argsstring>
        <name>miopenFusionPlanConvolutionSetAlgo</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref></type>
          <declname>algo</declname>
        </param>
        <briefdescription>
<para>Requests the fusion runtime to choose a particular algorithm for the added convolution operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Please see the description for miopenFusionPlanConvolutionGetAlgo</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested algorithm for the convolution operator (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3099" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3099" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga5ce93b3bd99720da807a3bfb8f778821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpConvForward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *convOp, miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t wDesc)</argsstring>
        <name>miopenCreateOpConvForward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>convOp</declname>
        </param>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <briefdescription>
<para>Creates forward convolution operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for the weights tensor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3110" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3110" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga733b3205944e4707ce9b9565927be47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpActivationForward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *activFwdOp, miopenActivationMode_t mode)</argsstring>
        <name>miopenCreateOpActivationForward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>activFwdOp</declname>
        </param>
        <param>
          <type><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Creates a forward activation operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activFwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation version (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3126" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3126" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga1181e44c0d111616642fffe0c323e21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpActivationBackward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *activBwdOp, miopenActivationMode_t mode)</argsstring>
        <name>miopenCreateOpActivationBackward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>activBwdOp</declname>
        </param>
        <param>
          <type><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Creates a backward activation operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation version (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3139" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3139" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gafe82043e423cc3af83f0a86683c2faa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpBiasForward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *biasOp, const miopenTensorDescriptor_t bDesc)</argsstring>
        <name>miopenCreateOpBiasForward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>biasOp</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bDesc</declname>
        </param>
        <briefdescription>
<para>Creates a forward bias operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>bias tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3151" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3151" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga493ad077910d796d4391f40032983da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpBatchNormInference</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *bnOp, const miopenBatchNormMode_t bn_mode, const miopenTensorDescriptor_t bnScaleBiasMeanVarDesc)</argsstring>
        <name>miopenCreateOpBatchNormInference</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>bnOp</declname>
        </param>
        <param>
          <type>const <ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bnScaleBiasMeanVarDesc</declname>
        </param>
        <briefdescription>
<para>Creates a forward inference batch normalization operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization layer mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScaleBiasMeanVarDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma, beta, mean, variance tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3165" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3165" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga2c8f42b324b568ea2f9e1678cca809b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpBatchNormForward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *bnFwdOp, const miopenBatchNormMode_t bn_mode, bool runningMeanVariance)</argsstring>
        <name>miopenCreateOpBatchNormForward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>bnFwdOp</declname>
        </param>
        <param>
          <type>const <ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>runningMeanVariance</declname>
        </param>
        <briefdescription>
<para>Creates a forward training batch normalization operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnFwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization layer mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runningMeanVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Toggles whether or not to save population statistics for inference; batch statistic are required (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3180" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3180" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gab536f8a2157852540dd2a2fcff5e90c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpBatchNormBackward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *bnBwdOp, const miopenBatchNormMode_t bn_mode)</argsstring>
        <name>miopenCreateOpBatchNormBackward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>bnBwdOp</declname>
        </param>
        <param>
          <type>const <ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <briefdescription>
<para>Creates a back propagation batch normalization operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization layer mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3193" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3193" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gab7c88a2676231b3e9d1a623616ea9053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOperatorArgs</definition>
        <argsstring>(miopenOperatorArgs_t *args)</argsstring>
        <name>miopenCreateOperatorArgs</name>
        <param>
          <type>miopenOperatorArgs_t *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Creates an operator argument object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator argument type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3203" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3203" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gab395e7ca41f74ed5deda61bc173e3db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyOperatorArgs</definition>
        <argsstring>(miopenOperatorArgs_t args)</argsstring>
        <name>miopenDestroyOperatorArgs</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Destroys an operator argument object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An operator argument type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3210" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3210" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gabc13e846bf2934371aa914d05d727b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsConvForward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t convOp, const void *alpha, const void *beta, const void *w)</argsstring>
        <name>miopenSetOpArgsConvForward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>convOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for forward convolution op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Forward convolution operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to tensor memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3222" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3222" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gaaa5188cbdbf34f68ba2fc02be21ffb7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsActivForward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t activFwdOp, const void *alpha, const void *beta, double activAlpha, double activBeta, double activGamma)</argsstring>
        <name>miopenSetOpArgsActivForward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>activFwdOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activAlpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activBeta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activGamma</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for forward activation op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activFwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation backwards operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3240" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3240" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga85bc81886a81df6b3610276674fe3562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsActivBackward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t activBwdOp, const void *alpha, const void *beta, const void *y, const void *reserved, double activAlpha, double activBeta, double activGamma)</argsstring>
        <name>miopenSetOpArgsActivBackward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>activBwdOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>reserved</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activAlpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activBeta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activGamma</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for backward activation op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation backwards operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y, output of activations in the forward direction (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserved</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor reserved memory space; currently should be nullptr (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3262" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3262" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga671c3d981cd6f5f149adf4421b00fcea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsBatchNormInference</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t bnOp, const void *alpha, const void *beta, const void *bnScale, const void *bnBias, const void *estimatedMean, const void *estimatedVariance, double epsilon)</argsstring>
        <name>miopenSetOpArgsBatchNormInference</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>bnOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnScale</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnBias</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>estimatedMean</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>estimatedVariance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for inference batch normalization op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization inference operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScale</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gamma tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the beta tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>estimatedMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to population mean memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>estimatedVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to population variance memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value for numerical stability (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3287" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3287" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga6754e3fce005f9b9d352211cc1430b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsBatchNormForward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t bnOp, const void *alpha, const void *beta, const void *bnScale, const void *bnBias, void *savedMean, void *savedInvVariance, void *runningMean, void *runningVariance, double expAvgFactor, double epsilon)</argsstring>
        <name>miopenSetOpArgsBatchNormForward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>bnOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnScale</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnBias</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>savedMean</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>savedInvVariance</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>runningMean</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>runningVariance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>expAvgFactor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for forward batch normalization op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization forward operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScale</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gamma tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the beta tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to batch mean memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedInvVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to batch inverse variance memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runningMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to population mean memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runningVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to population variance memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expAvgFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value for control of population statistics (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value for numerical stability (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3313" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3313" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gaa7f311a862d10ff2e4d771072f6ad54a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsBatchNormBackward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t bnOp, const void *alpha, const void *beta, const void *x, const void *bnScale, const void *bnBias, void *resultBnScaleDiff, void *resultBnBiasDiff, const void *savedMean, const void *savedInvVariance)</argsstring>
        <name>miopenSetOpArgsBatchNormBackward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>bnOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnScale</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnBias</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultBnScaleDiff</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultBnBiasDiff</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>savedMean</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>savedInvVariance</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for backward batch normalization op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization forward operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the forward input tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScale</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gamma tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the beta tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultBnScaleDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gamma gradient tensor memory (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultBnBiasDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the beta gradient tensor memory (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to batch mean memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedInvVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to batch inverse variance memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3341" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3341" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga5cddc46abf5c9ea46bc0bbcc161f6eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsBiasForward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t biasOp, const void *alpha, const void *beta, const void *bias)</argsstring>
        <name>miopenSetOpArgsBiasForward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>biasOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bias</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for forward bias op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Forward bias operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the forward bias input tensor memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3363" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3363" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga6dae1b3552cbd88138544937b014cd5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenExecuteFusionPlan</definition>
        <argsstring>(const miopenHandle_t handle, const miopenFusionPlanDescriptor_t fusePlanDesc, const miopenTensorDescriptor_t inputDesc, const void *input, const miopenTensorDescriptor_t outputDesc, void *output, miopenOperatorArgs_t args)</argsstring>
        <name>miopenExecuteFusionPlan</name>
        <param>
          <type>const miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>inputDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>outputDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Executes the fusion plan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>fused plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Source data tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Decriptor of the output tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination data tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An argument object of the fused kernel (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3381" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3381" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gad2e1ed4cfbdd05c244e407933ed8541b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBiasActivationForward</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha1, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t wDesc, const void *w, const miopenConvolutionDescriptor_t convDesc, miopenConvFwdAlgorithm_t algo, void *workspace, size_t workspaceSizeInBytes, const void *alpha2, const miopenTensorDescriptor_t zDesc, const void *z, const miopenTensorDescriptor_t biasDesc, const void *bias, const miopenActivationDescriptor_t activationDesc, const miopenTensorDescriptor_t yDesc, void *y)</argsstring>
        <name>miopenConvolutionBiasActivationForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha1</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workspace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workspaceSizeInBytes</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha2</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>zDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>const miopenActivationDescriptor_t</type>
          <declname>activationDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Prepares and executes the Convlution+Bias+Activation Fusion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha1</parametername>
</parameternamelist>
<parameterdescription>
<para>floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm selected (inputs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workspace required (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspaceSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory in bytes pointed to by workSpace above </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha2</parametername>
</parameternamelist>
<parameterdescription>
<para>floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor z (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor z (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor bias (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activationDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation descriptor that specifies the activation mode </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Output data tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3413" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3413" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
