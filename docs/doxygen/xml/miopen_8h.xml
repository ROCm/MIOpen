<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="miopen_8h" kind="file" language="C++">
    <compoundname>miopen.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">miopen/config.h</includes>
    <includes local="no">miopen/export.h</includes>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>miopen/export.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="1">
        <label>/home/ldelaney/MIOpen/include/miopen/miopen.h</label>
        <link refid="miopen_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>miopen/config.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmiopen_conv_algo_perf__t" prot="public">miopenConvAlgoPerf_t</innerclass>
    <innerclass refid="structmiopen_conv_solution__t" prot="public">miopenConvSolution_t</innerclass>
    <innerclass refid="structmiopen_tensor_argument__t" prot="public">miopenTensorArgument_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" prot="public" static="no">
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param><defname>name</defname></param>
        <initializer>    struct name                     \
    {                               \
    };                              \
    typedef struct name* name##_t;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs type name from a struct </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="75" column="9" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___tensor_reduce_1gab4f973d3f1f731ca1f0c1ca3ae225e7c" prot="public" static="no">
        <name>MIOPEN_API_VERSION_REDUCE_TENSOR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Version of TensorReduce API. Applications may use it to ensure backward compatibility with older library versions. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>0 or undefined - Initial API. Supported operations: ADD, MIN, MIN, MAX.</para>
</listitem><listitem><para>1 - Added AMAX, AVG, NORM1, NORM2 ops. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="542" column="9" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="542" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenStatus_t</name>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a3fc50915c64e73ec736e0f9c2cb78129" prot="public">
          <name>miopenStatusSuccess</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No errors </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6abd80b3c675e17392162640b6a5cb7375" prot="public">
          <name>miopenStatusNotInitialized</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data not initialized. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6af0d655f9d71417a7143be6452651c1bb" prot="public">
          <name>miopenStatusInvalidValue</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Incorrect variable value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6abcd087689c69bcee83d4726487c8cca8" prot="public">
          <name>miopenStatusBadParm</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Incorrect parameter detected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a9a1f9f181bb7d5649d3bb788760c489b" prot="public">
          <name>miopenStatusAllocFailed</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Memory allocation error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6acfdd2d77791aae4ddd442f819189c19c" prot="public">
          <name>miopenStatusInternalError</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MIOpen failure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6ab6a11c9af8b9e52ab982abd85673ce9e" prot="public">
          <name>miopenStatusNotImplemented</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use of unimplemented feature. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a1504690ef8823ed85612008c08277b88" prot="public">
          <name>miopenStatusUnknownError</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unknown error occurred. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a0199ef6922cf9b53fc3320d681915b73" prot="public">
          <name>miopenStatusUnsupportedOp</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsupported operator for fusion. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a0d00d1e79b4c27f3ca840c9729a8c58b" prot="public">
          <name>miopenStatusGpuOperationsSkipped</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is not an error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a51681c1688f3fdf0609c798e43afd171" prot="public">
          <name>miopenStatusVersionMismatch</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Version mismatch of the supplied binary data argment. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error codes that are returned by all MIOpen API calls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="104" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="105" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="group__handle_1ga80bfa6e46fdc8764f04f29a03689d1fc" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenF8RoundingMode_t</name>
        <enumvalue id="group__handle_1gga80bfa6e46fdc8764f04f29a03689d1fcafbe24189bfd43c73fe839aa4ea2968d7" prot="public">
          <name>miopenF8RoundingModeStandard</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__handle_1gga80bfa6e46fdc8764f04f29a03689d1fcafe52ff63273ab4eb21714c050f4abfb3" prot="public">
          <name>miopenF8RoundingModeStochastic</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="120" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="enum" id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenDataType_t</name>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a6e9ac7a764797dde5f1b28d3516ba69f" prot="public">
          <name>miopenHalf</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit floating point (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a33115d427e71a2759a28dfea283d5eeb" prot="public">
          <name>miopenFloat</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit floating point (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a6aa2b89e7e323df62ba76bc62b6d8c0c" prot="public">
          <name>miopenInt32</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit integer (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a6a5fcabf2ddece1384141f68b0bd34cc" prot="public">
          <name>miopenInt8</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit integer (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a656b49db33ff9a982cbcbcfd2710bb43" prot="public">
          <name>miopenBFloat16</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit binary floating point (8-bit exponent, 7-bit fraction) (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a90310ef7026c1f362feb65cdd90a6e44" prot="public">
          <name>miopenDouble</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit floating point (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17af035994430ebff11d40c896fca7624e4" prot="public">
          <name>miopenFloat8</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a785652761965bb5a33008904660dd6bb" prot="public">
          <name>miopenBFloat8</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MIOpen floating point datatypes. Both 32-bit and 16-bit floats are supported in MIOpen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="353" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="354" bodyend="370"/>
      </memberdef>
      <memberdef kind="enum" id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8c" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenTensorLayout_t</name>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca3640618e74eb72dbdfee36f9cbb408bb" prot="public">
          <name>miopenTensorNCHW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCHW memory layout (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca1657aaece7d521bd728632a953e2f55a" prot="public">
          <name>miopenTensorNHWC</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NHWC memory layout (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca05a571279bec2ef5c20eb66c09616a3e" prot="public">
          <name>miopenTensorCHWN</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CHWN memory layout (Not supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8caff0e70e620fa03f6383f666c19977fdd" prot="public">
          <name>miopenTensorNCHWc4</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCHWc4 memory layout (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca4e90e1a30efbe32d6e3854d4bf7c9bc3" prot="public">
          <name>miopenTensorNCHWc8</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCHWc8 memory layout (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca4ca640612b360e10b1e93fa7a89c0741" prot="public">
          <name>miopenTensorCHWNc4</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CHWNc4 memory layout (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca9cf6d72886e9754658d6c511a3c29c44" prot="public">
          <name>miopenTensorCHWNc8</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CHWNc8 memory layout (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca727b31912781101a907b27391534c1c7" prot="public">
          <name>miopenTensorNCDHW</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCDHW memory layout (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca1facc75bcb03d9832c5606151a34795b" prot="public">
          <name>miopenTensorNDHWC</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCDHW memory layout (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tensor layouts supported by MIOpen. miopenTensorCHWNc4 and miopenTensorCHWNc8 layout only support weight tensor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="377" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="378" bodyend="388"/>
      </memberdef>
      <memberdef kind="enum" id="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenIndexType_t</name>
        <enumvalue id="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547ae75cb44f2c20e2fb87b3222b8b7ebc8b" prot="public">
          <name>miopenIndexUint8</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit unsigned </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547a2020981e0bbe101614506772aa324a73" prot="public">
          <name>miopenIndexUint16</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit unsigned </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547ab1fa80c8eafef2fe983e52210be8c260" prot="public">
          <name>miopenIndexUint32</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit unsigned </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547a4539c9a6e12c960e90ff1ffe388fdcdd" prot="public">
          <name>miopenIndexUint64</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit unsigned </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MIOpen index datatypes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="394" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="395" bodyend="400"/>
      </memberdef>
      <memberdef kind="enum" id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenTensorOp_t</name>
        <enumvalue id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198ad0cfac2b0c8f5668f62c2b156a7281e0" prot="public">
          <name>miopenTensorOpAdd</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Add tensors element-wise </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198ae20aa1bb8363d01002ce601f9edfdbf2" prot="public">
          <name>miopenTensorOpMul</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Multiply two tensors element-wise </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198a46cb1f291532f6b241b12b76e17ddbef" prot="public">
          <name>miopenTensorOpMin</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Minimum of tensor element pairs </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198aed2a5c869fb47aa3f0aebd9945fa56da" prot="public">
          <name>miopenTensorOpMax</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum of tensor element pairs </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element-wise tensor operation modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="406" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="407" bodyend="412"/>
      </memberdef>
      <memberdef kind="enum" id="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenConvolutionMode_t</name>
        <enumvalue id="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cdaf5c5ca99ec760a1d1016a671408766bc" prot="public">
          <name>miopenConvolution</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Cross-Correlation convolution </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cdaaa6f0f5913493a335cbb4389c66f4736" prot="public">
          <name>miopenTranspose</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Transpose convolutions <ndash/> deconvolution </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cdaa839e7fb549d7ee872485b571b8e692a" prot="public">
          <name>miopenGroupConv</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Deprecated Group convolution legacy, ToBe Removed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cda43f0c77533ba896fcd8dc6e9913e9ec5" prot="public">
          <name>miopenDepthwise</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Deprecated Depthwise convolution legacy, ToBe Removed </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convolution mode selection for convolution layer preference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="418" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="419" bodyend="424"/>
      </memberdef>
      <memberdef kind="enum" id="miopen_8h_1a4540cf2ce4c529bc029b727969368cca" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenPaddingMode_t</name>
        <enumvalue id="miopen_8h_1a4540cf2ce4c529bc029b727969368ccaa4aed4a8a65105faaf4b5642513149fc3" prot="public">
          <name>miopenPaddingDefault</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MIOPEN Default Padding </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miopen_8h_1a4540cf2ce4c529bc029b727969368ccaad39c20eb8155b9bc83691beca44ceb0b" prot="public">
          <name>miopenPaddingSame</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Tensorflow SAME Padding </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miopen_8h_1a4540cf2ce4c529bc029b727969368ccaaeef0ba477e48d5e1e4f4fd88d87aa6f2" prot="public">
          <name>miopenPaddingValid</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Tensorflow VALID Padding </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Padding mode selection for convolution/Pooling layer preference </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="430" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="431" bodyend="435"/>
      </memberdef>
      <memberdef kind="enum" id="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenPoolingMode_t</name>
        <enumvalue id="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5cad4f167bcecbd60fb7078fb97aaffd3fc" prot="public">
          <name>miopenPoolingMax</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum pooling </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5ca3964ddda768df3b127079997346bfe89" prot="public">
          <name>miopenPoolingAverage</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Average pooling </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5caa060d79a20d907b13a9ecc2a77e88c44" prot="public">
          <name>miopenPoolingAverageInclusive</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Inclusive Average pooling </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pooling layer mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="441" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="442" bodyend="446"/>
      </memberdef>
      <memberdef kind="enum" id="group__pooling_1ga8f69978be75d6d32dbc172d3a99695e7" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenPoolingWorkspaceIndexMode_t</name>
        <enumvalue id="group__pooling_1ga8f69978be75d6d32dbc172d3a99695e7aa18c786f4a9f7ca40cb70395d5d9aeaa" prot="public">
          <name>miopenPoolingWorkspaceIndexMask</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use mask indices, 2D pooling only </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__pooling_1ga8f69978be75d6d32dbc172d3a99695e7a962adb90a1876eb3980c39d5a9247a38" prot="public">
          <name>miopenPoolingWorkspaceIndexImage</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use image indices </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pooling layer workspace index mode. miopenPoolingWorkspaceIndexMask mode records indices indicating the max values&apos; positions in the filter/mask. miopenPoolingWorkspaceIndexImage mode records indices indicating the max values&apos; positions in the image. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="454" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="455" bodyend="458"/>
      </memberdef>
      <memberdef kind="enum" id="group___l_r_n_1gae8c4f5513e59a0c2870013504f9b5c4d" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenLRNMode_t</name>
        <enumvalue id="group___l_r_n_1gae8c4f5513e59a0c2870013504f9b5c4da0062534dacca2acfb07e261fd5c0b77c" prot="public">
          <name>miopenLRNWithinChannel</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel independent </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___l_r_n_1gae8c4f5513e59a0c2870013504f9b5c4da5c1611ee75b7929a3a59e414974a18a7" prot="public">
          <name>miopenLRNCrossChannel</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Cross Channel </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Local Response Normalization layer mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="464" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="enum" id="group__layernorm_1ga996bace523abc82c6847984c34b60d5b" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenNormMode_t</name>
        <enumvalue id="group__layernorm_1ga996bace523abc82c6847984c34b60d5ba6dafa3af3a93d940670d2e19448a8b4b" prot="public">
          <name>MIOPEN_ELEMENTWISE_AFFINE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>initialized to ones for weights and zeros for biases </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__layernorm_1ga996bace523abc82c6847984c34b60d5ba3eb5ec947f41699cc76f26232a6e1101" prot="public">
          <name>MIOPEN_WEIGHT_BIAS</name>
          <initializer>=
        1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>learnable weights and biases of the module of shape normalized_shape </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LayerNorm mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="474" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="475" bodyend="479"/>
      </memberdef>
      <memberdef kind="enum" id="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenBatchNormMode_t</name>
        <enumvalue id="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26a44ab9eadea90a770a3744a61b71d536f" prot="public">
          <name>miopenBNPerActivation</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Element-wise normalization for fully connected layer </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26a42ebad7a4f774e7dc3df2de80b31a3e0" prot="public">
          <name>miopenBNSpatial</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mini-batch spatial normalization for convolutional layers </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Batch Normalization layer mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="485" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="486" bodyend="489"/>
      </memberdef>
      <memberdef kind="enum" id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenActivationMode_t</name>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6a3a85417a19911daeecf6e9e5f8952d3b" prot="public">
          <name>miopenActivationPASTHRU</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No activation, pass through the data </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6a4a7e7a529bed5bc42fc4966d47ea29b4" prot="public">
          <name>miopenActivationLOGISTIC</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sigmoid function: <formula id="4">$1 / (1 + e^{-x})$</formula> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6aebc2804e6806816dc8db6554d0c670b2" prot="public">
          <name>miopenActivationTANH</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Tanh activation <formula id="5">$ \beta * tanh( \alpha * x) $</formula> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6a66fb3d3c74e40e1e1a460fb409be62c0" prot="public">
          <name>miopenActivationRELU</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Rectified Linear Unit <formula id="6">$ max(0, x) $</formula> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6ad022a217df2f21174c4d515294f0e727" prot="public">
          <name>miopenActivationSOFTRELU</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><formula id="7">$log(1 + e^x)$</formula> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6a481c9203a79996016e88e0b1baee55b5" prot="public">
          <name>miopenActivationABS</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Absolute value <formula id="8">$abs(x)$</formula> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6a7dbe18fe7783fcf9bb4e46d34b8e1d51" prot="public">
          <name>miopenActivationPOWER</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Scaled and shifted power <formula id="9">$(\alpha + \beta * x)^{gamma}$</formula> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6a5ac41058b9593346704ed86235228f4b" prot="public">
          <name>miopenActivationCLIPPEDRELU</name>
          <initializer>=
        7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clipped Rectified Linear Unit <formula id="10">$ min(\alpha, max(0,x)) $</formula> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6a03c0f145db198f95b49b372470e64f29" prot="public">
          <name>miopenActivationLEAKYRELU</name>
          <initializer>=
        8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Leaky Rectified Linear Unit <formula id="11">$ \alpha * x | x &lt;= 0; x | x &gt; 0 $</formula> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6ac95a28635391882b82df5d1a9dcbc0a3" prot="public">
          <name>miopenActivationELU</name>
          <initializer>=
        9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Exponential Rectified Linear Unit <formula id="12">$ \alpha * (e^{x} - 1) | x &lt;= 0; x | x &gt; 0 $</formula> </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activation layer modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="495" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="496" bodyend="511"/>
      </memberdef>
      <memberdef kind="enum" id="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfe" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenSoftmaxAlgorithm_t</name>
        <enumvalue id="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfea7d462f643547b89ea8460c3b1d58b8d8" prot="public">
          <name>MIOPEN_SOFTMAX_FAST</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>straightforward softmax </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfeacd866d881145ad1a323c4a589986cf5e" prot="public">
          <name>MIOPEN_SOFTMAX_ACCURATE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>scaled softmax by maximum value in input domain </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfead27f321be1aa13300ebb2d175a3666c5" prot="public">
          <name>MIOPEN_SOFTMAX_LOG</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>log softmax </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Softmax implementation algorithms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="517" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="518" bodyend="522"/>
      </memberdef>
      <memberdef kind="enum" id="group__softmax_1gaea670eae33cee9aee53d48624cf28d7d" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenSoftmaxMode_t</name>
        <enumvalue id="group__softmax_1gaea670eae33cee9aee53d48624cf28d7dabab93ef42b0ec7744b4fb8ab83d700a3" prot="public">
          <name>MIOPEN_SOFTMAX_MODE_INSTANCE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>compute per image (N) across C, H, W </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__softmax_1gaea670eae33cee9aee53d48624cf28d7daf5c13b390d4b6132b51976a92f0f3029" prot="public">
          <name>MIOPEN_SOFTMAX_MODE_CHANNEL</name>
          <initializer>=
        1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>compute per spatial location (H, W) per image (N) across C </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Softmax modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="528" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="529" bodyend="533"/>
      </memberdef>
      <memberdef kind="enum" id="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddd" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenReduceTensorOp_t</name>
        <enumvalue id="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521dddae88d3f61f4d036c581d47d2242011edb" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_ADD</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the operation is adding the values of the reduced elements </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddda509f2659e4d54a99d17844ee8de19130" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_MUL</name>
          <initializer>=
        1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the operation is multiplying the values of the reduced elements </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521dddae1af9483b548971223d29c8f12862820" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_MIN</name>
          <initializer>=
        2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the operation is getting the minimum value of the reduced elements </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddda6c82f5dec443a93777291a68de6709fe" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_MAX</name>
          <initializer>=
        3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the operation is getting the maximum value of the reduced elements </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521dddac956caf0ac6e9ffbf647eca0bb3c13ab" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_AMAX</name>
          <initializer>=
        4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the operation is getting the maximum absolute value of the reduced elements </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddda7088afde0cec574d45add46d4f1d5534" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_AVG</name>
          <initializer>=
        5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the operation is getting the averaged value of the reduced elements </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddda9df43ac0efb3c7061e2a131c337050b8" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_NORM1</name>
          <initializer>=
        6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the operation is adding the absolute values of the reduced elements </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521dddae8a5d817789938ae4cf77d0496b7122f" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_NORM2</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the operation is getting the square root of the sum of squares of the reduced elements </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tensor Reduction operation types</para>
<para>Nan numbers propagation modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="548" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="549" bodyend="567"/>
      </memberdef>
      <memberdef kind="enum" id="miopen_8h_1adfa716b919ff5919780b47334bbb1d89" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenNanPropagation_t</name>
        <enumvalue id="miopen_8h_1adfa716b919ff5919780b47334bbb1d89adb89d9f86661677eba6f1fb0078bb9b0" prot="public">
          <name>MIOPEN_NOT_PROPAGATE_NAN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>does not propagate Nan number </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miopen_8h_1adfa716b919ff5919780b47334bbb1d89a79c9620aa9ab26af969cb5c78cf8ac77" prot="public">
          <name>MIOPEN_PROPAGATE_NAN</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>propagate the Nan number by the Reduction operation </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="573" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="574" bodyend="577"/>
      </memberdef>
      <memberdef kind="enum" id="group___tensor_reduce_1ga4dd527c6b506c34ec06d641551d78b7c" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenReduceTensorIndices_t</name>
        <enumvalue id="group___tensor_reduce_1ga4dd527c6b506c34ec06d641551d78b7ca630bd9b0b0f29fdd4acd7f1428c9e112" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_NO_INDICES</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Does not compuate indices </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga4dd527c6b506c34ec06d641551d78b7ca04e405c32e661195b6af8a3c8d1fdf24" prot="public">
          <name>MIOPEN_REDUCE_TENSOR_FLATTENED_INDICES</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compute the relative, flatted indices </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reduction Indices computation modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="583" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="584" bodyend="587"/>
      </memberdef>
      <memberdef kind="enum" id="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82b" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenIndicesType_t</name>
        <enumvalue id="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82babe4c1ddd72f1a427a032ed9ccff8a8bb" prot="public">
          <name>MIOPEN_32BIT_INDICES</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit unsigned integer indices </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82bafd7b2202fcf90028f49773fde1b11435" prot="public">
          <name>MIOPEN_64BIT_INDICES</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit unsigned integer indices </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82badf88480d0cc300ddba2b326b78e68d84" prot="public">
          <name>MIOPEN_16BIT_INDICES</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit unsigned integer indices </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82babae5e385da771a86da08f2873630cf33" prot="public">
          <name>MIOPEN_8BIT_INDICES</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit unsigned integer indices </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reduction Indices types </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="593" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="594" bodyend="599"/>
      </memberdef>
      <memberdef kind="enum" id="group__convolutions_1ga784559bf30977ad39cbc491727eae485" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenConvolutionAttrib_t</name>
        <enumvalue id="group__convolutions_1ga784559bf30977ad39cbc491727eae485ae736f64b13f2adec7f2a6f1202abb5b2" prot="public">
          <name>MIOPEN_CONVOLUTION_ATTRIB_FP16_ALT_IMPL</name>
          <initializer>=
        0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use alternative fp16 implementation. Only supported for gfx90a; has no effect for other targets. 0 - disabled, 1 - enabled, -1 or unset - default (F0B1W1) &gt; </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1ga784559bf30977ad39cbc491727eae485a1fe1be172f9231f2a251d048b4cbbe40" prot="public">
          <name>MIOPEN_CONVOLUTION_ATTRIB_DETERMINISTIC</name>
          <initializer>=
        1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Restrict MIOpen convolutions to kernels which produce numerically deterministic results. 0 - disabled (default), 1 - enabled &gt; </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1ga784559bf30977ad39cbc491727eae485a33f92e9eb6d42b8da1c774fcbad24625" prot="public">
          <name>MIOPEN_CONVOLUTION_ATTRIB_FP8_ROUNDING_MODE</name>
          <initializer>=
        2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Specifies the rounding mode for the 8-bit floating data types. Currently, two rounding modes are supported miopenF8RoundingModeStandard and miopenF8RoundingModeStochastic. These are listed as part of the miopenF8RoundingMode_t enum.&gt; </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attribute for convolution descriptor, used for alternating the convolution behavior </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="605" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="606" bodyend="623"/>
      </memberdef>
      <memberdef kind="enum" id="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenConvFwdAlgorithm_t</name>
        <enumvalue id="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a61b89a58eb19fea2207a17531e8205f7" prot="public">
          <name>miopenConvolutionFwdAlgoGEMM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GEMM variant </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3ade2d29687c9fb8bf450d3c8b946e25b5" prot="public">
          <name>miopenConvolutionFwdAlgoDirect</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a154a04348f01564eff432c6432242f34" prot="public">
          <name>miopenConvolutionFwdAlgoFFT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Fast Fourier Transform indirect convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a9e831d6f4b3ab127f370c3a3e55b2abf" prot="public">
          <name>miopenConvolutionFwdAlgoWinograd</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Winograd indirect convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a5595e274c4012d54d83a9582e35ab2a1" prot="public">
          <name>miopenConvolutionFwdAlgoImplicitGEMM</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Implicit GEMM convolutions </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convolutional algorithm mode for forward propagation. MIOpen use cross-correlation for its convolution implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1143" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="1144" bodyend="1150"/>
      </memberdef>
      <memberdef kind="enum" id="group__convolutions_1gaba316771c206839e54419b135027cbee" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenConvBwdWeightsAlgorithm_t</name>
        <enumvalue id="group__convolutions_1ggaba316771c206839e54419b135027cbeea4302eada3444370b4f5a516c9352c19e" prot="public">
          <name>miopenConvolutionBwdWeightsAlgoGEMM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GEMM variant </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1ggaba316771c206839e54419b135027cbeeacd485d0cbd7838b89bcbaa86add7fd44" prot="public">
          <name>miopenConvolutionBwdWeightsAlgoDirect</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct convolution algorithm </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1ggaba316771c206839e54419b135027cbeea7eda3bac3601384c44f6390d66ded524" prot="public">
          <name>miopenConvolutionBwdWeightsAlgoWinograd</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Winograd convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1ggaba316771c206839e54419b135027cbeeaef65e6751c5dcd90eba6d7d198627698" prot="public">
          <name>miopenConvolutionBwdWeightsAlgoImplicitGEMM</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Implicit GEMM convolutions </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convolutional algorithm mode for back propagation on weights. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1155" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="1156" bodyend="1161"/>
      </memberdef>
      <memberdef kind="enum" id="group__convolutions_1ga774e44db42d175d73c0d87272f6cdc05" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenConvBwdDataAlgorithm_t</name>
        <enumvalue id="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a1ea94b2548956ecbb6d6aaead535a38a" prot="public">
          <name>miopenConvolutionBwdDataAlgoGEMM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GEMM variant </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a123132561c7ebe6a6d022016bc395658" prot="public">
          <name>miopenConvolutionBwdDataAlgoDirect</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a3c26d3cccb4763cc3370b72f71f11f72" prot="public">
          <name>miopenConvolutionBwdDataAlgoFFT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Fast Fourier Transform indirect convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05ae4f98a414a6b1be0e14a9912b0459f54" prot="public">
          <name>miopenConvolutionBwdDataAlgoWinograd</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Winograd indirect convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a0259649d7b2d71a88231257add330ea1" prot="public">
          <name>miopenTransposeBwdDataAlgoGEMM</name>
          <initializer>=
        4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Deprecated Transpose GEMM variant legacy, ToBe Removed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05af68c8086106d6dd9c70be60e519e4a0e" prot="public">
          <name>miopenConvolutionBwdDataAlgoImplicitGEMM</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Implicit GEMM convolutions </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convolutional algorithm mode for back propagation on data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1166" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="1167" bodyend="1175"/>
      </memberdef>
      <memberdef kind="enum" id="group__convolutions_1ga3ba938002b32a963925c7cfce51ce15a" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenConvAlgorithm_t</name>
        <enumvalue id="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aafbc6bee0271b18b1c38a47b6bfc71490" prot="public">
          <name>miopenConvolutionAlgoGEMM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GEMM variant </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aa4ed1617fee46c3c345707f4111b42155" prot="public">
          <name>miopenConvolutionAlgoDirect</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aa9e67d70ca65f50b5b2f10c9b60399f68" prot="public">
          <name>miopenConvolutionAlgoFFT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Fast Fourier Transform indirect convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aa9b50ef38f49608a9f07658920923308c" prot="public">
          <name>miopenConvolutionAlgoWinograd</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Winograd indirect convolutions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aaf3f2d5dd07e440e069264469c04c2168" prot="public">
          <name>miopenConvolutionAlgoImplicitGEMM</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Implicit GEMM convolutions </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Top-level convolutional algorithm mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1180" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="1181" bodyend="1187"/>
      </memberdef>
      <memberdef kind="enum" id="group___f_u_s_i_o_n_1ga774d5d8b0c1ca371d920e78387100858" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenFusionDirection_t</name>
        <enumvalue id="group___f_u_s_i_o_n_1gga774d5d8b0c1ca371d920e78387100858a558bb4e68777056ebba6ee78ae7e0ad8" prot="public">
          <name>miopenVerticalFusion</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fuses layers vertically, current the only supported mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_u_s_i_o_n_1gga774d5d8b0c1ca371d920e78387100858a54a662450548ccf631bd635eecb1f092" prot="public">
          <name>miopenHorizontalFusion</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fuses layers horizontally, this is unimplemented </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Kernel fusion direction in the network. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3007" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3008" bodyend="3011"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga016f266507f199def908fe39c43d7877" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNMode_t</name>
        <enumvalue id="group___r_n_n_1gga016f266507f199def908fe39c43d7877af714eb36c96ca365b643e7e8417c10cc" prot="public">
          <name>miopenRNNRELU</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RNN with ReLU activation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga016f266507f199def908fe39c43d7877a1d43e2e3151aa1266cc10e8623c0a32b" prot="public">
          <name>miopenRNNTANH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RNN with tanh activation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga016f266507f199def908fe39c43d7877a97804b8e078f16b327e50e5554df970c" prot="public">
          <name>miopenLSTM</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LSTM </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga016f266507f199def908fe39c43d7877aa13bc340d91e98e610e92b75e5928a66" prot="public">
          <name>miopenGRU</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRU </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RNN mode selection for rnn layer preference </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3442" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3443" bodyend="3448"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNInputMode_t</name>
        <enumvalue id="group___r_n_n_1gga11808e1b616d9b9d7e6c701986783af7a168f261ee3dc35ea3fe636c644610c2f" prot="public">
          <name>miopenRNNlinear</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Matrix multiplication at the input of the first layer </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga11808e1b616d9b9d7e6c701986783af7a99c1caff2a69fb37d964fb3692c989da" prot="public">
          <name>miopenRNNskip</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No operation is performed at the input of the first layer. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network layer initial input mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3453" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3454" bodyend="3457"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNAlgo_t</name>
        <enumvalue id="group___r_n_n_1gga6bca6bf2c239cb387d99a07cb6b331c4aee4782e7cebfb009314cdd6c695a5b90" prot="public">
          <name>miopenRNNdefault</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use dedicated gate-operation kernel for LSTM and fundamental algorithm for vanilla RNN &amp; GRU </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga6bca6bf2c239cb387d99a07cb6b331c4a2dfd71a22376cd8b11bd1a1b4fe46996" prot="public">
          <name>miopenRNNfundamental</name>
          <initializer>=
        1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Function by basic tesnsor operations, supported for vanilla RNN, LSTM, GRU </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network algorithm mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3462" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3463" bodyend="3468"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNDirectionMode_t</name>
        <enumvalue id="group___r_n_n_1gga3c7adae8941033d266f1d5e029504c38a78752802fd2c7248fd4fdddbf613264b" prot="public">
          <name>miopenRNNunidirection</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Forward in time only. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga3c7adae8941033d266f1d5e029504c38a2f0f99690655d0df5ca16bd5011908ea" prot="public">
          <name>miopenRNNbidirection</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Forward and backwards in time. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network bi-directional behavior </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3473" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3474" bodyend="3477"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNBiasMode_t</name>
        <enumvalue id="group___r_n_n_1gga47b037e570937a567de38e8898a99f37a2eb8172730ba33866564865fe4e2d7ea" prot="public">
          <name>miopenRNNNoBias</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No Biases will be applied to GEMM operations </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga47b037e570937a567de38e8898a99f37a14fd5be6ddb03ef2d81d27ff8a868d10" prot="public">
          <name>miopenRNNwithBias</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Biases will be applied to GEMM operations </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network add on bias </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3482" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3483" bodyend="3486"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1gac7f800028b5634cb08aa191fa6ee0d2a" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNGEMMalgoMode_t</name>
        <enumvalue id="group___r_n_n_1ggac7f800028b5634cb08aa191fa6ee0d2aa5803419df2c12a2ea02b7560a54ebee7" prot="public">
          <name>miopenRNNAlgoGEMM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network add on bias </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3491" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3492" bodyend="3494"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNPaddingMode_t</name>
        <enumvalue id="group___r_n_n_1ggaeb0b6dbeefb776e9b663c66a247a7121a280a03179097c1c96d3b26f4f25543e2" prot="public">
          <name>miopenRNNIONotPadded</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Not padded data at RNN input/output </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1ggaeb0b6dbeefb776e9b663c66a247a7121a0d1f9de9cb101771b9bb572ddfa2f2ef" prot="public">
          <name>miopenRNNIOWithPadding</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Padded data at RNN input/output </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network input/output data padding mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3499" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3500" bodyend="3503"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNFWDMode_t</name>
        <enumvalue id="group___r_n_n_1gga9e0d9408f321de068cc30ad5a7de778ba2a424459293f8f7a74ab45b70a902f4e" prot="public">
          <name>miopenRNNTraining</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FWD, BWD, WRW </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga9e0d9408f321de068cc30ad5a7de778ba2e5ed4c109920976110cdc7c7fd4cefc" prot="public">
          <name>miopenRNNInference</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Only FWD-inference no back-propagation </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network Training/Inference mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3508" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3509" bodyend="3512"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNBaseLayout_t</name>
        <enumvalue id="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fae9bb9aaef77070d408758f4d2dbef44d" prot="public">
          <name>miopenRNNDataUnknownLayout</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fa956d8d35f87c4aa06a4f9d5561aef5f1" prot="public">
          <name>miopenRNNDataSeqMajorNotPadded</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fa04fbe3dee060a5d78eb007028468134f" prot="public">
          <name>miopenRNNDataSeqMajorPadded</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fad5db52f1c42231b13de635892872c931" prot="public">
          <name>miopenRNNDataBatchMajorPadded</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data layouts for RNN operations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3517" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3518" bodyend="3523"/>
      </memberdef>
      <memberdef kind="enum" id="group___loss_function_1ga3a791761ce6a39c117116a1f0075b2c6" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenCTCLossAlgo_t</name>
        <enumvalue id="group___loss_function_1gga3a791761ce6a39c117116a1f0075b2c6ad74fca207ff5f01cc77f0d50efc155a1" prot="public">
          <name>MIOPEN_CTC_LOSS_ALGO_DETERMINISTIC</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Results are guaranteed to be reproducible </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Algorithms available to execute the CTC loss operation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4835" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="4836" bodyend="4838"/>
      </memberdef>
      <memberdef kind="enum" id="group__dropout_1ga283a437b36e9ed35ce7b80490de4d15d" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNGType_t</name>
        <enumvalue id="group__dropout_1gga283a437b36e9ed35ce7b80490de4d15daeda0fbe383a397b303a6ab43efa5967e" prot="public">
          <name>MIOPEN_RNG_PSEUDO_XORWOW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>XORWOW pseudorandom generator </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>random number generator type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4955" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="4956" bodyend="4958"/>
      </memberdef>
      <memberdef kind="enum" id="group__find2_1gab7565f4a33ed5b4f7fa1793a7dad6337" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenProblemDirection_t</name>
        <enumvalue id="group__find2_1ggab7565f4a33ed5b4f7fa1793a7dad6337abc2dbfdc4ef1b83119c3777e7e80de44" prot="public">
          <name>miopenProblemDirectionForward</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1ggab7565f4a33ed5b4f7fa1793a7dad6337af99443bbae30b51588521c921a858f99" prot="public">
          <name>miopenProblemDirectionBackward</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1ggab7565f4a33ed5b4f7fa1793a7dad6337a7c23676cb2177e581995e740475afd79" prot="public">
          <name>miopenProblemDirectionBackwardWeights</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Directions of miopen operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5292" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="5293" bodyend="5297"/>
      </memberdef>
      <memberdef kind="enum" id="group__find2_1ga9aadaf9e83bdc5303cfb58955514502c" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenTensorArgumentId_t</name>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cac707682d5986bbade17817928e00d06f" prot="public">
          <name>miopenTensorArgumentIdInvalid</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca2fc5c7f9a98eb6976f6d38d7db896db2" prot="public">
          <name>miopenTensorConvolutionX</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cad407972fb41ab847593d4353388dce22" prot="public">
          <name>miopenTensorConvolutionW</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca9d50f1debc571d38ed1709912c9c5774" prot="public">
          <name>miopenTensorConvolutionY</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca6c6f3d3a9c2c618da7b1c43fa33f67f0" prot="public">
          <name>miopenTensorActivationX</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502caf5eab1e565bf6f3d30f425e9ca34337f" prot="public">
          <name>miopenTensorActivationY</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca60c93134ee0f45d7b77e92f214a93553" prot="public">
          <name>miopenTensorActivationDX</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca202338b34064b12cd5750268a562df7e" prot="public">
          <name>miopenTensorActivationDY</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cafa54dfab241618980f8a69d3b21b6e0b" prot="public">
          <name>miopenTensorBiasX</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cade8d8f0207aa2246f2b7f4ca2434c74f" prot="public">
          <name>miopenTensorBiasY</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga9aadaf9e83bdc5303cfb58955514502caf36be3d67213320a22999ed32c62a90a" prot="public">
          <name>miopenTensorBias</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identifiers for tensor arguments of problems and operations.</para>
<para>Different ways to sort results of the find call. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5302" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="5303" bodyend="5317"/>
      </memberdef>
      <memberdef kind="enum" id="group__find2_1ga10ba204b05e13c25e81b70abd6b3cd69" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenFindResultsOrder_t</name>
        <enumvalue id="group__find2_1gga10ba204b05e13c25e81b70abd6b3cd69aed134126adf8e75b11f27bd485869ade" prot="public">
          <name>miopenFindResultsOrderByTime</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__find2_1gga10ba204b05e13c25e81b70abd6b3cd69a165b3ee97cc1daa65fbdb22fdcb2a81f" prot="public">
          <name>miopenFindResultsOrderByWorkspaceSize</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5322" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="5323" bodyend="5326"/>
      </memberdef>
      <memberdef kind="enum" id="group__sum_1ga9bc32feb2d65228d0bd5d30f8a1e44d2" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenSumNanPropagation_t</name>
        <enumvalue id="group__sum_1ga9bc32feb2d65228d0bd5d30f8a1e44d2a035c8debf2781021fab9377bc926de23" prot="public">
          <name>MIOPEN_SUM_NOT_PROPAGATE_NAN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>does not propagate Nan number </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sum_1ga9bc32feb2d65228d0bd5d30f8a1e44d2ad8fd8eb57469847c5d3768e00fe9cc72" prot="public">
          <name>MIOPEN_SUM_PROPAGATE_NAN</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>propagate the Nan number by the Reduction operation </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Nan numbers propagation modes for sum </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5610" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="5611" bodyend="5614"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__handle_1gac2642558af91c051446ef9fab49bba31" prot="public" static="no">
        <type>void *(*</type>
        <definition>typedef void*(* miopenAllocatorFunction) (void *context, size_t sizeBytes)</definition>
        <argsstring>)(void *context, size_t sizeBytes)</argsstring>
        <name>miopenAllocatorFunction</name>
        <briefdescription>
<para>Custom allocator function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allow for user-defined custom allocator</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer a context (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to allocate (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="144" column="9" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__handle_1ga54112962a0d7bcf6cc011a5ed19a4201" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* miopenDeallocatorFunction) (void *context, void *memory)</definition>
        <argsstring>)(void *context, void *memory)</argsstring>
        <name>miopenDeallocatorFunction</name>
        <briefdescription>
<para>Custom deallocator function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allow for user-defined custom deallocation function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer context (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer allocated memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="154" column="9" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__handle_1gaaf9a62fe06372c918be22db25cf13007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenHandle)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenHandle</type>
        </param>
        <briefdescription>
<para>Creates the miopenHandle_t type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="94" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="94" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1gac6c00a7bd50c44b815976c276ae4d9b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* miopenGetErrorString</definition>
        <argsstring>(miopenStatus_t error)</argsstring>
        <name>miopenGetErrorString</name>
        <param>
          <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Get character string for an error code. </para>
        </briefdescription>
        <detaileddescription>
<para>A function which returns a NULL terminated character string of the error code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>miopenStatus_t type error status (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>errorString </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="134" column="13" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="134" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga6e4d06e38316d75e5d95cb6fde5c7c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetVersion</definition>
        <argsstring>(size_t *major, size_t *minor, size_t *patch)</argsstring>
        <name>miopenGetVersion</name>
        <param>
          <type>size_t *</type>
          <declname>major</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>minor</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>patch</declname>
        </param>
        <briefdescription>
<para>Method to return version of MIOpen. </para>
        </briefdescription>
        <detaileddescription>
<para>The output values of this call follow from the versioning format major.minor.patch</para>
<para>Pointers that are NULL will be ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>major</parametername>
</parameternamelist>
<parameterdescription>
<para>Major version number (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minor</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor version number (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch</parametername>
</parameternamelist>
<parameterdescription>
<para>Patch version number (output)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="169" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="169" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1gad7924dd946f447575547e0e1bddb2fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreate</definition>
        <argsstring>(miopenHandle_t *handle)</argsstring>
        <name>miopenCreate</name>
        <param>
          <type>miopenHandle_t *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Method to create the MIOpen handle object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a MIOpen handle. This is called at the very start to initialize the MIOpen environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a MIOpen handle type (output)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="179" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="179" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga104432242babf6a4c66b09a43e7081d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateWithStream</definition>
        <argsstring>(miopenHandle_t *handle, miopenAcceleratorQueue_t stream)</argsstring>
        <name>miopenCreateWithStream</name>
        <param>
          <type>miopenHandle_t *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenAcceleratorQueue_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Create a MIOpen handle with an accelerator stream. </para>
        </briefdescription>
        <detaileddescription>
<para>The HIP side uses a hipStream_t type for the stream, while OpenCL will use a cl_command_queue.</para>
<para>Create a handle with a previously created accelerator command queue. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a MIOpen handle type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>An accelerator queue type (input)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="192" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="192" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga20296fd22692cbaace8ad86a0a08b869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroy</definition>
        <argsstring>(miopenHandle_t handle)</argsstring>
        <name>miopenDestroy</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Destroys the MIOpen handle. </para>
        </briefdescription>
        <detaileddescription>
<para>This is called when breaking down the MIOpen environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="201" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="201" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1gadd90259644bc8edc5cb42070a66ed651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetStream</definition>
        <argsstring>(miopenHandle_t handle, miopenAcceleratorQueue_t streamID)</argsstring>
        <name>miopenSetStream</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenAcceleratorQueue_t</type>
          <declname>streamID</declname>
        </param>
        <briefdescription>
<para>Set accelerator command queue previously created. </para>
        </briefdescription>
        <detaileddescription>
<para>Set a command queue for an accelerator device <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streamID</parametername>
</parameternamelist>
<parameterdescription>
<para>An accelerator queue type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="210" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="210" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga64e9eb389d9c8e8793908052dffbf138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetStream</definition>
        <argsstring>(miopenHandle_t handle, miopenAcceleratorQueue_t *streamID)</argsstring>
        <name>miopenGetStream</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenAcceleratorQueue_t *</type>
          <declname>streamID</declname>
        </param>
        <briefdescription>
<para>Get the previously created accelerator command queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a command queue for an accelerator device <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streamID</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a accelerator queue type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="220" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="220" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga7e5ef2b84c12704b9ad9daf551d7bd31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetAllocator</definition>
        <argsstring>(miopenHandle_t handle, miopenAllocatorFunction allocator, miopenDeallocatorFunction deallocator, void *allocatorContext)</argsstring>
        <name>miopenSetAllocator</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__handle_1gac2642558af91c051446ef9fab49bba31" kindref="member">miopenAllocatorFunction</ref></type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="group__handle_1ga54112962a0d7bcf6cc011a5ed19a4201" kindref="member">miopenDeallocatorFunction</ref></type>
          <declname>deallocator</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocatorContext</declname>
        </param>
        <briefdescription>
<para>Set allocator for previously created miopenHandle. </para>
        </briefdescription>
        <detaileddescription>
<para>Set a command queue for an accelerator device <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function MIOpen will use for internal memory allocations. The provided callback function should allocate device memory with requested size and return a pointer to this memory. Passing 0 will restore the default MIOpen allocator and deallocator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deallocator</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function MIOpen will use to for internal memory deallocation. The provided callback function should free the specified memory pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocatorContext</parametername>
</parameternamelist>
<parameterdescription>
<para>User-specified pointer which is passed to <computeroutput>allocator</computeroutput> and <computeroutput>deallocator</computeroutput> This allows the callback function to access state set by the caller to this function, for example a stateful heap allocator or a c++ class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="239" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="239" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1gada439cdf3dac26d2e054f75158993fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetKernelTime</definition>
        <argsstring>(miopenHandle_t handle, float *time)</argsstring>
        <name>miopenGetKernelTime</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Get time for last kernel launched. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used only when profiling mode has been enabled. Kernel timings are based on the MIOpen handle and is not thread-safe. In order to use multi-threaded profiling, create an MIOpen handle for each concurrent thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a float type to contain kernel time in milliseconds (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="255" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="255" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__handle_1ga6873d2a57e63cd81a682e3c62900e813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenEnableProfiling</definition>
        <argsstring>(miopenHandle_t handle, bool enable)</argsstring>
        <name>miopenEnableProfiling</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable profiling to retrieve kernel time. </para>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable kernel profiling. This profiling is only for kernel time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to toggle profiling (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="264" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="264" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="miopen_8h_1a3f63d58e4f71379f2e72a3c5f188fc98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenFusionOpDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenFusionOpDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenFusionOpDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
<para>Fusion Operator Descriptor contains the meta-data associated with an operator to be fused in a compute graph </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="275" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="275" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1gaa709f2b37eaf01dc20d0a8c55b9dd91b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenTensorDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenTensorDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenTensorDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
<para>Tensor descriptor is an object that allows the user to specify a layer&apos;s size for each dimension and dimension strides. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="284" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga4a71ec0b8e2e7064ccb76be40ce9b7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenSeqTensorDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenSeqTensorDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenSeqTensorDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
<para>SeqTensor descriptor is an object that allows the user to specify tensor with sequence dimension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="292" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga10b4762521ca884d7c93cfe8634b38cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenConvolutionDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenConvolutionDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenConvolutionDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
<para>Convolution descriptor is an object that allows the user to specify a layer&apos;s padding, stride, and dilation of the convolutional filter. Parameters must all be non-negative. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="301" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="301" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1gae90132c94469bb7bfbca5498309fe0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenPoolingDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenPoolingDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenPoolingDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
<para>Pooling descriptor is an object that allows the user to specify the dimension sizes of the pooling windows, paddings, strides, and pooling mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="310" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="310" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___l_r_n_1gaaa30a58b289fbef587968001697c915a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenLRNDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenLRNDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenLRNDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
<para>LRN descriptor is an object that allows the user to specify the LRN mode, the number of elements in the normalization window, and the LRN k-parameter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="319" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="319" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__activation_1ga9f091c54e4e21e6ae53ab058be2d658f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenActivationDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenActivationDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenActivationDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
<para>Activation descriptor is an object that allows the user to specify the activation mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="327" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="327" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga781cb4cafc3e631e189a0ec014a2729f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenRNNDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenRNNDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenRNNDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="332" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="332" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___loss_function_1ga5060d9edff6010a4a0e9720659a897fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenCTCLossDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenCTCLossDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenCTCLossDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="337" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="337" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="miopen_8h_1af977aad2a1e17db8fdc7d43eabee4bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenDropoutDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenDropoutDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenDropoutDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="342" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="342" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___tensor_reduce_1gabdbbaf51367b7518e4ebbc5faf62357f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenReduceTensorDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenReduceTensorDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenReduceTensorDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="347" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="347" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga57867b185d47a1f10ddc50d642df784b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t *tensorDesc)</argsstring>
        <name>miopenCreateTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t *</type>
          <declname>tensorDesc</declname>
        </param>
        <briefdescription>
<para>Create a Tensor Descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>API for creating an uninitialized tensor descriptor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a tensor descriptor type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="636" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="636" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga7a9ed6faa48edc69f6d68cce68eaf8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSet4dTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t dataType, int n, int c, int h, int w)</argsstring>
        <name>miopenSet4dTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Set shape of 4D tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting 4-D tensor shape. MIOpen currently implements NCHW and NHWC layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Data height dimension size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Data width dimension size (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="650" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="650" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga1ca0a412a2de95e5f1cfb041cc045410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetNdTensorDescriptorWithLayout</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t dataType, miopenTensorLayout_t tensorLayout, const int *lens, int num_lens)</argsstring>
        <name>miopenSetNdTensorDescriptorWithLayout</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga4997f98fa2256f41736a184fa1574f8c" kindref="member">miopenTensorLayout_t</ref></type>
          <declname>tensorLayout</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lens</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_lens</declname>
        </param>
        <briefdescription>
<para>Set shape of ND tensor with specific layout. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting N-D packed tensor shape. This interface support NHWC, NCHW, NCHWc*, CHWNc* <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensorLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor layout (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lens</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor dimensions (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_lens</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor dimension size (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="664" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="664" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga8539b92c3aa163b90717fca82f7583c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSet4dTensorDescriptorEx</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t dataType, int n, int c, int h, int w, int nStride, int cStride, int hStride, int wStride)</argsstring>
        <name>miopenSet4dTensorDescriptorEx</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nStride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cStride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hStride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wStride</declname>
        </param>
        <briefdescription>
<para>Set shape and stride of 4D tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting 4-D tensor shape and stride. It allows to create the non-packed tensor. A non-packed tensor refers to the tensor where the elements are not compressed or packed in any specific way. Each element in the tensor is stored individually, and there is no special compression applied to the storage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Data height dimension size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Data width dimension size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch dimension stride (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel dimension stride (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Height dimension stride (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Width dimension stride (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="688" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="688" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga422ba168412b4b5ae7df9a27e008870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGet4dTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t *dataType, int *n, int *c, int *h, int *w, int *nStride, int *cStride, int *hStride, int *wStride)</argsstring>
        <name>miopenGet4dTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nStride</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cStride</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hStride</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>wStride</declname>
        </param>
        <briefdescription>
<para>Get the details of the tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface to query the 4-D tensor shape.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Data height dimension size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Data width dimension size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch dimension stride (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel dimension stride (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Height dimension stride (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Width dimension stride (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="715" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="715" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1gae57f3c7b71aed10691abc2ac2a5f8f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t dataType, int nbDims, const int *dimsA, const int *stridesA)</argsstring>
        <name>miopenSetTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbDims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>dimsA</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>stridesA</declname>
        </param>
        <briefdescription>
<para>Set shape of N-dimensional tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting non-packed tensor shape. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbDims</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions in the dimsA array (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimsA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the size of dimensions (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stridesA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the size of stride (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="736" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="736" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga68f03f27b4afafdc7606178307a5b2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetTensorCastType</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t cast_type)</argsstring>
        <name>miopenSetTensorCastType</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>cast_type</declname>
        </param>
        <briefdescription>
<para>Set the tensor cast type. </para>
        </briefdescription>
        <detaileddescription>
<para>For tensors where the cast_type attribute is set, the tensor elements would be converted to the target type before the target operation is applied. Currently, only supported for convolution operations targeting the FP8 datatype</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cast_type</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="752" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="752" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1gaa6907ccd3f4ebaeef047af1819d5cf05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetTensorDescriptorSize</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, int *size)</argsstring>
        <name>miopenGetTensorDescriptorSize</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set shape of N-dimensional tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for querying tensor size. MIOpen has support for 1, 2, 3, 4, 5 dimensional tensor of layout. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in tensor described by the descriptor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="764" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="764" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga0ac6a668ed3b2e580b45c39b2dbf8b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t *dataType, int *dimsA, int *stridesA)</argsstring>
        <name>miopenGetTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dimsA</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stridesA</declname>
        </param>
        <briefdescription>
<para>Get the details of the N-dimensional tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimsA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the size of dimensions (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stridesA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the size of stride (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="775" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="775" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1gaab76aa1181416bea57840e67cdbe1934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc)</argsstring>
        <name>miopenDestroyTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="785" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="785" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga924b379598666fd19496f8cb597a9eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateSeqTensorDescriptor</definition>
        <argsstring>(miopenSeqTensorDescriptor_t *tensorDesc)</argsstring>
        <name>miopenCreateSeqTensorDescriptor</name>
        <param>
          <type>miopenSeqTensorDescriptor_t *</type>
          <declname>tensorDesc</declname>
        </param>
        <briefdescription>
<para>Create a Tensor Descriptor for sequence data. </para>
        </briefdescription>
        <detaileddescription>
<para>API for creating an uninitialized sequence data tensor descriptor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a sequence data tensor descriptor type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="794" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="794" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga0a66a800ae274f35c1bd5b9182bc5e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroySeqTensorDescriptor</definition>
        <argsstring>(miopenSeqTensorDescriptor_t tensorDesc)</argsstring>
        <name>miopenDestroySeqTensorDescriptor</name>
        <param>
          <type>miopenSeqTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the sequence data tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="802" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="802" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga35d61860e1413ff6023b391fff70b7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenOpTensor</definition>
        <argsstring>(miopenHandle_t handle, miopenTensorOp_t tensorOp, const void *alpha1, const miopenTensorDescriptor_t aDesc, const void *A, const void *alpha2, const miopenTensorDescriptor_t bDesc, const void *B, const void *beta, const miopenTensorDescriptor_t cDesc, void *C)</argsstring>
        <name>miopenOpTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198" kindref="member">miopenTensorOp_t</ref></type>
          <declname>tensorOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha1</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>aDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha2</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>Execute element-wise tensor operations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements: <formula id="0">$ C = op ( alpha1[0] * A, alpha2[0] * B ) + beta[0] * C $</formula></para>
<para>For Forward Bias one can also use, <ref refid="group__convolutions_1ga8e445590bd57cd0038324943791a9b4a" kindref="member">miopenConvolutionForwardBias()</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensorOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation from miopenTensorOp_t (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha1</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor A&apos;s floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor A (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor A (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha2</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor B&apos;s floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor B (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor B (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor C&apos;s floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor C (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor C (input and output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="823" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="823" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga24fd91d999f4b4479b187ce20bcbb930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetTensor</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t yDesc, void *y, const void *alpha)</argsstring>
        <name>miopenSetTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Fills a tensor with a single value. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported datatypes are fp32, fp16, and bfp16</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to fill value (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="845" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="845" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga5e1f5d98a1c4499c3209cb4ea9d01e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenScaleTensor</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t yDesc, void *y, const void *alpha)</argsstring>
        <name>miopenScaleTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Scales all elements in a tensor by a single value. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported datatypes are fp32 and fp16</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor y (input and output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="860" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="860" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga3727427906d20e31009071ff4d058357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetTensorNumBytes</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, size_t *numBytes)</argsstring>
        <name>miopenGetTensorNumBytes</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Returns number of bytes associated with tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes associated with tensor descriptor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="871" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="871" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga49a729b5c718cff326e57fca6397399c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenTransformTensor</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t yDesc, void *y)</argsstring>
        <name>miopenTransformTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Copies one tensor to another tensor with a different layout/scale. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements:<orderedlist>
<listitem><para><formula id="1">$ Y = alpha * X + beta * Y $</formula> for fp32 and fp16 datatype</para>
</listitem><listitem><para>Vectorize/de-vectorize along channel dimension C for int8 datatype</para>
</listitem></orderedlist>
</para>
<para>Currently this is used for transforming from int8 to int8x4 vector datatypes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Source Tensor descriptor for tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Source Tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination Tensor descriptor for tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination Tensor y (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="891" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="891" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga6a31011f7c0719726a73d8f5bea388dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateConvolutionDescriptor</definition>
        <argsstring>(miopenConvolutionDescriptor_t *convDesc)</argsstring>
        <name>miopenCreateConvolutionDescriptor</name>
        <param>
          <type>miopenConvolutionDescriptor_t *</type>
          <declname>convDesc</declname>
        </param>
        <briefdescription>
<para>Creates a convolution layer descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="913" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="913" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga37d3fbee7a7cd36ecb22d9ab23c80ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenInitConvolutionDescriptor</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, miopenConvolutionMode_t c_mode, int pad_h, int pad_w, int stride_h, int stride_w, int dilation_h, int dilation_w)</argsstring>
        <name>miopenInitConvolutionDescriptor</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" kindref="member">miopenConvolutionMode_t</ref></type>
          <declname>c_mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dilation_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dilation_w</declname>
        </param>
        <briefdescription>
<para>Creates a 2-D convolution layer descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>For group/depthwise convolution dilation height and width, only a dilation value of 1 is supported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolutional mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Height input data padding (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Width input data padding (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Stride for the height of input data (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Stride for the width of input data (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dilation_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Dilation height (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dilation_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Dilation width (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="930" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="930" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga06f1ca4633a112373f4d353ed819bf10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenInitConvolutionNdDescriptor</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, int spatialDim, const int *padA, const int *strideA, const int *dilationA, miopenConvolutionMode_t c_mode)</argsstring>
        <name>miopenInitConvolutionNdDescriptor</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>spatialDim</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>padA</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>strideA</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>dilationA</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" kindref="member">miopenConvolutionMode_t</ref></type>
          <declname>c_mode</declname>
        </param>
        <briefdescription>
<para>Creates a N-dimensional convolution layer descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spatialDim</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolutional spatial dimension (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>padA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of input data padding (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strideA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of convolution stride (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dilationA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of convolution dilation (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolutional mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="950" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="950" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gab9c592d2e21e2841fb4e120ebd46a2d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetConvolutionSpatialDim</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, int *spatialDim)</argsstring>
        <name>miopenGetConvolutionSpatialDim</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>spatialDim</declname>
        </param>
        <briefdescription>
<para>Retrieves the spatial dimension of a convolution layer descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spatialDim</parametername>
</parameternamelist>
<parameterdescription>
<para>Spatial dimension of convolution descriptor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="963" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="963" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gaf59a6be12730a207c15d068a0b1fe52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetConvolutionDescriptor</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, miopenConvolutionMode_t *c_mode, int *pad_h, int *pad_w, int *stride_h, int *stride_w, int *dilation_h, int *dilation_w)</argsstring>
        <name>miopenGetConvolutionDescriptor</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" kindref="member">miopenConvolutionMode_t</ref> *</type>
          <declname>c_mode</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pad_h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pad_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stride_h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dilation_h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dilation_w</declname>
        </param>
        <briefdescription>
<para>Retrieves a 2-D convolution layer descriptor&apos;s details. </para>
        </briefdescription>
        <detaileddescription>
<para>For group/depthwise convolution dilation height and width, only a dilation value of 1 is supported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolutional mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Height input data padding (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Width input data padding (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Stride for the height of input data (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Stride for the width of input data (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dilation_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Dilation height (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dilation_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Dilation width (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="981" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="981" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga7288233f65445ca372a3d86c75449294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetConvolutionNdDescriptor</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, int requestedSpatialDim, int *spatialDim, int *padA, int *strideA, int *dilationA, miopenConvolutionMode_t *c_mode)</argsstring>
        <name>miopenGetConvolutionNdDescriptor</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>requestedSpatialDim</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>spatialDim</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>padA</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>strideA</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dilationA</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" kindref="member">miopenConvolutionMode_t</ref> *</type>
          <declname>c_mode</declname>
        </param>
        <briefdescription>
<para>Retrieves a N-dimensional convolution layer descriptor&apos;s details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedSpatialDim</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected convolution spatial dimension (intput) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spatialDim</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolutional spatial dimension (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>padA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of input data padding (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strideA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of convolution stride (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dilationA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of convolution dilation (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolutional mode (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1002" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1002" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga245126fedf3a5c7abdd9cf6dcb959692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetConvolutionGroupCount</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, int *groupCount)</argsstring>
        <name>miopenGetConvolutionGroupCount</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>groupCount</declname>
        </param>
        <briefdescription>
<para>Get the number of groups to be used in Group/Depthwise convolution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to number of groups in group/depthwise convolution (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1016" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1016" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetConvolutionGroupCount</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, int groupCount)</argsstring>
        <name>miopenSetConvolutionGroupCount</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>groupCount</declname>
        </param>
        <briefdescription>
<para>Set the number of groups to be used in Group/Depthwise convolution. </para>
        </briefdescription>
        <detaileddescription>
<para>Must be called before all computational APIs of group/depthwise convolution, it is preferable to call <ref refid="group__convolutions_1ga37d3fbee7a7cd36ecb22d9ab23c80ce3" kindref="member">miopenInitConvolutionDescriptor()</ref> first, then <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> to fully initialize group convolutions. Both Convolution Mode and Transpose Convolution Mode support group/depthwise convolution. To run depthwise convolution, set groupCount value equal to number of channels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupCount</parametername>
</parameternamelist>
<parameterdescription>
<para>number of groups, in depthwise conv using filter_number/channel_multiplier (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1032" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1032" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gab17d87360f1931c8dc01baea31cfe412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetTransposeConvOutputPadding</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, int adj_h, int adj_w)</argsstring>
        <name>miopenSetTransposeConvOutputPadding</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>adj_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>adj_w</declname>
        </param>
        <briefdescription>
<para>Set the output padding to be used in 2-D Transpose convolution. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is optional for initialization of Transpose convolution. If applicable, it must be called before all computational APIs of Transpose convolution. It is preferable to call <ref refid="group__convolutions_1ga37d3fbee7a7cd36ecb22d9ab23c80ce3" kindref="member">miopenInitConvolutionDescriptor()</ref> first, then <ref refid="group__convolutions_1gab17d87360f1931c8dc01baea31cfe412" kindref="member">miopenSetTransposeConvOutputPadding()</ref> to fully initialize transpose convolutions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adj_h</parametername>
</parameternamelist>
<parameterdescription>
<para>output padding for the height of output data (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adj_w</parametername>
</parameternamelist>
<parameterdescription>
<para>output padding for the width of output data (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1048" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1048" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gaad7d8adb6d907646ba23de7e506c5e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetTransposeConvNdOutputPadding</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, int spatialDim, const int *adjA)</argsstring>
        <name>miopenSetTransposeConvNdOutputPadding</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>spatialDim</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>adjA</declname>
        </param>
        <briefdescription>
<para>Set the output padding to be used in N-dimensional Transpose convolution. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is optional for initialization of Transpose convolution. If applicable, it must be called before all computational APIs of Transpose convolution. It is preferable to call <ref refid="group__convolutions_1ga06f1ca4633a112373f4d353ed819bf10" kindref="member">miopenInitConvolutionNdDescriptor()</ref> first, then <ref refid="group__convolutions_1gaad7d8adb6d907646ba23de7e506c5e5b" kindref="member">miopenSetTransposeConvNdOutputPadding()</ref> to fully initialize transpose convolutions. Currently, 2-D and 3-D convolutions are supported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spatialDim</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolutional spatial dimension (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adjA</parametername>
</parameternamelist>
<parameterdescription>
<para>array of output padding for output data (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1062" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1062" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga5aae8bdb57c4b48263cdeba2f9f76ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetConvolutionForwardOutputDim</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t inputTensorDesc, const miopenTensorDescriptor_t filterDesc, int *n, int *c, int *h, int *w)</argsstring>
        <name>miopenGetConvolutionForwardOutputDim</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>inputTensorDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>filterDesc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Get the shape of a resulting 4-D tensor from a 2-D convolution. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the dimensions of the resulting 4D tensor of a 2D convolution, given the convolution descriptor, the input tensor descriptor and the filter descriptor. This function can help to setup the output tensor and allocate the proper amount of memory prior to launch the actual convolution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filterDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Data height dimension size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Data width dimension size (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1083" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1083" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga4b71519741fb242c14b8e92f104301ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetConvolutionNdForwardOutputDim</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t inputTensorDesc, const miopenTensorDescriptor_t filterDesc, int *nDim, int *outputTensorDimA)</argsstring>
        <name>miopenGetConvolutionNdForwardOutputDim</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>inputTensorDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>filterDesc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nDim</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outputTensorDimA</declname>
        </param>
        <briefdescription>
<para>Get the shape of a resulting N-dimensional tensor from a (N-2)-dimensional convolution. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the dimensions of the resulting N-dimensional tensor of a (N-2)-dimensional convolution, given the convolution descriptor, the input tensor descriptor and the filter descriptor. It is used to setup the output tensor descriptor prior to executing the convolution layer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filterDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nDim</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Output data tensor dimension (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputTensorDimA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of Output data tensor length (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1105" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1105" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gacd21e57581808b98458dfa93c41a4ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyConvolutionDescriptor</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc)</argsstring>
        <name>miopenDestroyConvolutionDescriptor</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the tensor descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution tensor descriptor type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1117" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1117" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga92f38ddd274388a05d77001dac71e7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetConvolutionAttribute</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, const miopenConvolutionAttrib_t attr, int value)</argsstring>
        <name>miopenSetConvolutionAttribute</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const <ref refid="group__convolutions_1ga784559bf30977ad39cbc491727eae485" kindref="member">miopenConvolutionAttrib_t</ref></type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the attribute of the convolution descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute of this convolution to set (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of this attribute (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1125" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1125" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga41c95d7e368391df4e63539c88c53047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetConvolutionAttribute</definition>
        <argsstring>(miopenConvolutionDescriptor_t convDesc, const miopenConvolutionAttrib_t attr, int *value)</argsstring>
        <name>miopenGetConvolutionAttribute</name>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const <ref refid="group__convolutions_1ga784559bf30977ad39cbc491727eae485" kindref="member">miopenConvolutionAttrib_t</ref></type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get the attribute of the convolution descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute of this convolution to get (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of this attribute (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1135" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1135" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gaf9dbf5fdad1bc5faf1a9184ab2099439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionForwardGetSolutionCount</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t wDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t yDesc, size_t *solutionCount)</argsstring>
        <name>miopenConvolutionForwardGetSolutionCount</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>solutionCount</declname>
        </param>
        <briefdescription>
<para>Query the maximum number of solutions applicable for the given input/output and weights tensor descriptor for Convolution in the Forward direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This call returns the maximum number of applicable solutions for a forward convolution problem. The <computeroutput>solutionCount</computeroutput> returned may be used to allocate the memory required for the <computeroutput><ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref></computeroutput> which is required by miopenConvolutionGetSolution API calls.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutionCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to return number of applicable solutions (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1247" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1247" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gaf0c92cab22c81d632d596d30757dcba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionForwardGetSolution</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t wDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t yDesc, const size_t maxSolutionCount, size_t *solutionCount, miopenConvSolution_t *solutions)</argsstring>
        <name>miopenConvolutionForwardGetSolution</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxSolutionCount</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>solutionCount</declname>
        </param>
        <param>
          <type><ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref> *</type>
          <declname>solutions</declname>
        </param>
        <briefdescription>
<para>Query the applicable solutions for a convolution configuration described by input, output and convolution descriptors. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned solutions array is sorted in the order of decreasing performance. The returned solutions might be based on heuristics and for more consistent performance results the user the advised to run the Find step. The maximum length of the solutions array may be queried using miopenConvolutionForwardGetSolutionCount</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSolutionCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the solutions array passed in below (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutionCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the solutions array returned (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of type <ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref> allocated by the user, filled in by MIOpen with applicable solutions. (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1278" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1278" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga1960157add7bdd508dc345ea98801912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionForwardGetSolutionWorkspaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t wDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t yDesc, const uint64_t solution_id, size_t *workSpaceSize)</argsstring>
        <name>miopenConvolutionForwardGetSolutionWorkspaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>solution_id</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Returns the workspace size required for a particular solution id. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an optional call for users who may have serialized the solution id and just need the workspace size for it. The same information is returned by the miopenConvolutionForwardGetSolution as part of the <ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref> struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the solution for which workspace size is required (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the workspace (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1305" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1305" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gabacb81f250e154b92c628defe53a1a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionForwardCompileSolution</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t wDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t yDesc, const uint64_t solution_id)</argsstring>
        <name>miopenConvolutionForwardCompileSolution</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>solution_id</declname>
        </param>
        <briefdescription>
<para>Compiles the solution provided by the user, this solution may be acquired by the miopenConvolutionForwardGetSolution API call above. Compiling the solution ensures that the first API call to miopenConvolutionForwardImmediate does not cause a compile. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an optional step and may be skipped if a slow first miopenConvolutionForwardImmediate invocation is acceptable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the solution to be compiled, as chosen by the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1331" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1331" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga14fe027d4bb473a448eb26fe79e61002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionForwardImmediate</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t wDesc, const void *w, const miopenTensorDescriptor_t xDesc, const void *x, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t yDesc, void *y, void *workSpace, size_t workSpaceSize, const uint64_t solution_id)</argsstring>
        <name>miopenConvolutionForwardImmediate</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>solution_id</declname>
        </param>
        <briefdescription>
<para>Executes the Forward convolution operation based on the provided solution ID. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported datatypes are fp32, fp16, bfp16, and int8</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Workspace tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory in bytes pointed to by workSpace above </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the solution to be compiled, as chosen by the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1356" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1356" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gac245152e4fe078d089f2ac9247aed048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardDataGetSolutionCount</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t wDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dxDesc, size_t *solutionCount)</argsstring>
        <name>miopenConvolutionBackwardDataGetSolutionCount</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>solutionCount</declname>
        </param>
        <briefdescription>
<para>Query the maximum number of solutions applicable for the given input/output and weights tensor descriptor for backward Convolution w-r-t Data. </para>
        </briefdescription>
        <detaileddescription>
<para>This call returns the maximum number of applicable solutions for a the convolution problem, the number returned may be used to allocate the memory required for the miopenConvAlgoPert2_t which is required by miopenConvolutionBackwardDataGetSolution API calls.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutionCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to return number of applicable solutions (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1386" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1386" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga8c7f4bfae33e8d489c75c5e3717321f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardDataGetSolution</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t wDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dxDesc, const size_t maxSolutionCount, size_t *solutionCount, miopenConvSolution_t *solutions)</argsstring>
        <name>miopenConvolutionBackwardDataGetSolution</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxSolutionCount</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>solutionCount</declname>
        </param>
        <param>
          <type><ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref> *</type>
          <declname>solutions</declname>
        </param>
        <briefdescription>
<para>Query the applicable solutions for a backward convolution w-r-t data as described by input, output and convolution descriptors. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned solutions array is sorted in the order of decreasing performance. The returned solutions ns might be based on heuristics and for more consistent performance results the user the advised to run the Find step. The maximum length of the solutions array may be queried using miopenConvolutionBackwardDataGetSolutionCount</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSolutionCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the solutions array passed in below (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutionCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the solutions array returned (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of type <ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref> allocated by the user, filled in by MIOpen with applicable solutions. (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1418" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1418" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gafdf6485c7f4ca08822feb918f5078f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardDataGetSolutionWorkspaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t wDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dxDesc, const uint64_t solution_id, size_t *workSpaceSize)</argsstring>
        <name>miopenConvolutionBackwardDataGetSolutionWorkspaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>solution_id</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Returns the workspace size required for a particular solution id. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an optional call for users who may have serialized the solution id and just need the workspace size for it. The same information is returned by the miopenConvolutionBackwardDataGetSolution as part of the <ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref> struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the solution for which workspace size is required (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the workspace (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1445" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1445" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga16cd48938728e81468a1e80ccd07822f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardDataCompileSolution</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t wDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dxDesc, const uint64_t solution_id)</argsstring>
        <name>miopenConvolutionBackwardDataCompileSolution</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>solution_id</declname>
        </param>
        <briefdescription>
<para>Compiles the solution provided by the user, this solution may be acquired by the miopenConvolutionBackwardDataGetSolution API call above. Compiling the solution ensures that the first API call to miopenConvolutionBackwardDataImmediate does not cause a compile. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an optional step and may be skipped if a slow first miopenConvolutionBackwardDataImmediate invocation is acceptable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the solution to be compiled, as chosen by the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1472" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1472" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gaacefbf47cf57a6ade413ae23bbf5cabc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardDataImmediate</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t wDesc, const void *w, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dxDesc, void *dx, void *workSpace, size_t workSpaceSize, const uint64_t solution_id)</argsstring>
        <name>miopenConvolutionBackwardDataImmediate</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>solution_id</declname>
        </param>
        <briefdescription>
<para>Executes the Backward convolution w-r-t data operation based on the provided solution ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dx (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Workspace tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the workspace memory pointed to by workSpace </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the solution to be compiled, as chosen by the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1497" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1497" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gacf0d3225d92394cf8aad48da3902b64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardWeightsGetSolutionCount</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dwDesc, size_t *solutionCount)</argsstring>
        <name>miopenConvolutionBackwardWeightsGetSolutionCount</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>solutionCount</declname>
        </param>
        <briefdescription>
<para>Query the maximum number of solutions applicable for the given input/output and weights tensor descriptor for backward Convolution w-r-t Weights. </para>
        </briefdescription>
        <detaileddescription>
<para>This call returns the maximum number of applicable solutions for a the convolution problem, the number returned may be used to allocate the memory required for the miopenConvAlgoPert2_t which is required by miopenConvolutionBackwardWeightsGetSolution API calls.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor dw (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutionCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to return number of applicable solutions (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1527" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1527" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga720035aea137cd8b2fb5ea22afd08ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardWeightsGetSolution</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dwDesc, const size_t maxSolutionCount, size_t *solutionCount, miopenConvSolution_t *solutions)</argsstring>
        <name>miopenConvolutionBackwardWeightsGetSolution</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxSolutionCount</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>solutionCount</declname>
        </param>
        <param>
          <type><ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref> *</type>
          <declname>solutions</declname>
        </param>
        <briefdescription>
<para>Query the applicable solutions for a backward convolution w-r-t weights as described by input, output and convolution descriptors. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned solutions array is sorted in the order of decreasing performance. The returned solutions might be based on heuristics and for more consistent performance results the user the advised to run the Find step. The maximum length of the solutions array may be queried using miopenConvolutionBackwardWeightsGetSolutionCount</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor dw (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSolutionCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the solutions array passed in below (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutionCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the solutions array returned (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of type <ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref> allocated by the user, filled in by MIOpen with applicable solutions. (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1558" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1558" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gaecbba471182df8fa973a95d5dedd7259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardWeightsGetSolutionWorkspaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dwDesc, const uint64_t solution_id, size_t *workSpaceSize)</argsstring>
        <name>miopenConvolutionBackwardWeightsGetSolutionWorkspaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>solution_id</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Returns the workspace size required for a particular solution id. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an optional call for users who may have serialized the solution id and just need the workspace size for it. The same information is returned by the miopenConvolutionBackwardWeightsGetSolution as part of the <ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref> struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor dw (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the solution for which workspace size is required (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the workspace (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1584" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1584" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga4df568848733b9d49a416813df1249d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardWeightsCompileSolution</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dwDesc, const uint64_t solution_id)</argsstring>
        <name>miopenConvolutionBackwardWeightsCompileSolution</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>solution_id</declname>
        </param>
        <briefdescription>
<para>Compiles the solution provided by the user, this solution may be acquired by the miopenConvolutionBackwardWeightsGetSolution API call above. Compiling the solution ensures that the first API call to miopenConvolutionBackwardWeightsImmediate does not cause a compile. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an optional step and may be skipped if a slow first miopenConvolutionBackwardWeightsImmediate invocation is acceptable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor dw (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the solution to be compiled, as chosen by the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1611" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1611" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga816e7586b740e8ad652aac31f9efe9da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardWeightsImmediate</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t xDesc, const void *x, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dwDesc, void *dw, void *workSpace, size_t workSpaceSize, const uint64_t solution_id)</argsstring>
        <name>miopenConvolutionBackwardWeightsImmediate</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>solution_id</declname>
        </param>
        <briefdescription>
<para>Executes the Backward convolution w-r-t weights operation based on the provided solution ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor dw (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dw</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights delta tensor dw (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Workspace tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory passed in, pointed to by workSpace pointer above </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the solution to be compiled, as chosen by the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1637" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1637" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga625028c7ac3e3aeccbaea277096cca08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t wDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t yDesc, size_t *workSpaceSize)</argsstring>
        <name>miopenConvolutionForwardGetWorkSpaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Query the workspace size required for a forward convolution layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is required and must be executed once before running <ref refid="group__convolutions_1gaca2f3b99b04393beebaee41e3d990f68" kindref="member">miopenFindConvolutionForwardAlgorithm()</ref> in order to determine the largest required allocation for the algorithm search; i.e., the maximum size of the memory needed from the set of potential forward convolution algorithm is returned.</para>
<para>If using Group/Depthwise convolution mode, call <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> before running this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to return size in bytes (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1669" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1669" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gaca2f3b99b04393beebaee41e3d990f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFindConvolutionForwardAlgorithm</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t wDesc, const void *w, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t yDesc, void *y, const int requestAlgoCount, int *returnedAlgoCount, miopenConvAlgoPerf_t *perfResults, void *workSpace, size_t workSpaceSize, bool exhaustiveSearch)</argsstring>
        <name>miopenFindConvolutionForwardAlgorithm</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>requestAlgoCount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnedAlgoCount</declname>
        </param>
        <param>
          <type><ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref> *</type>
          <declname>perfResults</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exhaustiveSearch</declname>
        </param>
        <briefdescription>
<para>Search and run the forward convolutional algorithms and return a list of kernel times. </para>
        </briefdescription>
        <detaileddescription>
<para>This function attempts all MIOpen forward convolution algorithms based on the input configuration, and outputs performance metrics to a user-allocated array of type <ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref>. These metrics are written in a sorted fashion where the first element has the lowest compute time. Users can chose the top-most algorithm if they only care about the fastest algorithm.</para>
<para>This function is mandatory before using <ref refid="group__convolutions_1ga1de4638ae8f3330f3c777f91a67889ea" kindref="member">miopenConvolutionForward()</ref>. In order to execute this function, <ref refid="group__convolutions_1ga625028c7ac3e3aeccbaea277096cca08" kindref="member">miopenConvolutionForwardGetWorkSpaceSize()</ref> must be run to determine the required memory for this search.</para>
<para><itemizedlist>
<listitem><para>If exhaustiveSearch == 0, MIOpen will look for the first kernel with a configuration match. If a configuration match is not found, a default configuration will be returned.</para>
</listitem><listitem><para>If exhaustiveSearch == 1, MIOpen will look for the best kernel for the provided configuration. If a match is not found, an exhaustive search is performed by running individual algorithms.</para>
</listitem></itemizedlist>
</para>
<para>If using Group/Depthwise convolution mode, call <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> before running this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of algorithms to return kernel times (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnedAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to number of algorithms returned (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perfResults</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to union of best algorithm for forward and backwards (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workspace required for the search (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory needed for find (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exhaustiveSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean to toggle a full search of all algorithms and configurations (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1716" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1716" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga1de4638ae8f3330f3c777f91a67889ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionForward</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t wDesc, const void *w, const miopenConvolutionDescriptor_t convDesc, miopenConvFwdAlgorithm_t algo, const void *beta, const miopenTensorDescriptor_t yDesc, void *y, void *workSpace, size_t workSpaceSize)</argsstring>
        <name>miopenConvolutionForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Execute a forward convolution layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs the forward convolution layer based on the selected algorithm. The function <ref refid="group__convolutions_1gaca2f3b99b04393beebaee41e3d990f68" kindref="member">miopenFindConvolutionForwardAlgorithm()</ref> must have been executed previously to determine the required memory needed for the workspace and the best convolutional algorithm. The scaling parameter alpha (float) and shift parameter beta (float) are only supported for alpha = 1 and beta = 0.</para>
<para>The forward convolution is designed to accommodate both packed and non-packed tensor strides for multiple data types and dimensions across various platforms. This flexibility ensures optimal performance in handling diverse computational scenarios. To configure tensor parameters, including strides, users can utilize the APIs <ref refid="group__tensor_1gae57f3c7b71aed10691abc2ac2a5f8f27" kindref="member">miopenSetTensorDescriptor()</ref> and <ref refid="group__tensor_1ga0ac6a668ed3b2e580b45c39b2dbf8b8c" kindref="member">miopenGetTensorDescriptor()</ref>. These APIs empower developers to seamlessly set and retrieve tensor information, facilitating a more intuitive and efficient workflow. The tensor strides are non-packed by default.</para>
<para>If using Group/Depthwise convolution mode, call <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> before running this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights tensor w (inputs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (inputs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm selected (inputs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workspace required (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory determined by the find step (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1765" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1765" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga8e445590bd57cd0038324943791a9b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionForwardBias</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t bDesc, const void *b, const void *beta, const miopenTensorDescriptor_t yDesc, void *y)</argsstring>
        <name>miopenConvolutionForwardBias</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Calculate element-wise scale and shift of a tensor via a bias tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies an element-wise bias to a data tensor from an input bias tensor. The scaling parameter alpha (float) and shift parameter beta (float) are only supported for alpha = 1 and beta = 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for bias tensor b (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Bias tensor b (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (input and output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1794" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1794" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gac94e84d34972a135648c94b89d92f9cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardDataGetWorkSpaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t wDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dxDesc, size_t *workSpaceSize)</argsstring>
        <name>miopenConvolutionBackwardDataGetWorkSpaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Get the GPU memory required for the backward data convolution algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>For a provided tensor descriptors and algorithm selection, this function calculates and returns the workspace size required for back propagation on data. This call is required and must be executed once before running <ref refid="group__convolutions_1ga87840a99d86f888f4f3356adf7a15df0" kindref="member">miopenFindConvolutionBackwardDataAlgorithm()</ref> in order to determine the largest required allocation for the algorithm search; i.e., the maximum size of the memory needed from the set of potential backward convolution algorithm is returned.</para>
<para>If using Group/Depthwise convolution mode, call <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> before running this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory required (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1822" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1822" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga87840a99d86f888f4f3356adf7a15df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFindConvolutionBackwardDataAlgorithm</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t wDesc, const void *w, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dxDesc, void *dx, const int requestAlgoCount, int *returnedAlgoCount, miopenConvAlgoPerf_t *perfResults, void *workSpace, size_t workSpaceSize, bool exhaustiveSearch)</argsstring>
        <name>miopenFindConvolutionBackwardDataAlgorithm</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>requestAlgoCount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnedAlgoCount</declname>
        </param>
        <param>
          <type><ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref> *</type>
          <declname>perfResults</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exhaustiveSearch</declname>
        </param>
        <briefdescription>
<para>Search and run the backwards data convolution algorithms and return a list of kernel times. </para>
        </briefdescription>
        <detaileddescription>
<para>This function attempts all MIOpen backward data convolution algorithms, and outputs the performance metrics to a user-allocated array of type <ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref>. These metrics are written in sorted fashion where the first element has the lowest compute time. This function is mandatory before using backwards convolutions. Users can chose the top-most algorithm if they only care about the fastest algorithm.</para>
<para>This function is mandatory before using <ref refid="group__convolutions_1ga3fb51da4c191c70727c09a1560d38ddd" kindref="member">miopenConvolutionBackwardData()</ref>. In order to execute this function, miopenConvolutionBackwardsDataGetWorkSpaceSize() must be run to determine the required memory for this search.</para>
<para><itemizedlist>
<listitem><para>If exhaustiveSearch == 0, MIOpen will look for the first kernel with a configuration match. If a configuration match is not found, a default configuration will be returned.</para>
</listitem><listitem><para>If exhaustiveSearch == 1, MIOpen will look for the best kernel for the provided configuration. If a match is not found, an exhaustive search is performed by running individual algorithms.</para>
</listitem></itemizedlist>
</para>
<para>If using Group/Depthwise convolution mode, call <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> before running this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of algorithms to return kernel times (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnedAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to number of algorithms returned (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perfResults</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to union of best algorithm for forward and backwards (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workspace required for the search (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory needed for find (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exhaustiveSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean to toggle a full search of all algorithms and configurations (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1869" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1869" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga3fb51da4c191c70727c09a1560d38ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardData</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t wDesc, const void *w, const miopenConvolutionDescriptor_t convDesc, miopenConvBwdDataAlgorithm_t algo, const void *beta, const miopenTensorDescriptor_t dxDesc, void *dx, void *workSpace, size_t workSpaceSize)</argsstring>
        <name>miopenConvolutionBackwardData</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga774e44db42d175d73c0d87272f6cdc05" kindref="member">miopenConvBwdDataAlgorithm_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Execute a backward data convolution layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs the backward data convolution layer based on the selected algorithm. The function <ref refid="group__convolutions_1ga87840a99d86f888f4f3356adf7a15df0" kindref="member">miopenFindConvolutionBackwardDataAlgorithm()</ref> must have been executed previously to determine the required memory needed for the workspace and the best convolutional algorithm.</para>
<para>The backward data convolution is designed to accommodate both packed and non-packed tensor strides for multiple data types and dimensions across various platforms. This flexibility ensures optimal performance in handling diverse computational scenarios. To configure tensor parameters, including strides, users can utilize the APIs <ref refid="group__tensor_1gae57f3c7b71aed10691abc2ac2a5f8f27" kindref="member">miopenSetTensorDescriptor()</ref> and <ref refid="group__tensor_1ga0ac6a668ed3b2e580b45c39b2dbf8b8c" kindref="member">miopenGetTensorDescriptor()</ref>. These APIs empower developers to seamlessly set and retrieve tensor information, facilitating a more intuitive and efficient workflow. The tensor strides are non-packed by default.</para>
<para>If using Group/Depthwise convolution mode, call <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> before running this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm selected (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dx (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workspace required for the search (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory needed for find (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1918" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1918" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga7eb4416db9701236648ba2b60d91cc1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardWeightsGetWorkSpaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const miopenTensorDescriptor_t xDesc, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dwDesc, size_t *workSpaceSize)</argsstring>
        <name>miopenConvolutionBackwardWeightsGetWorkSpaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Get the GPU memory required for the backward weights convolution algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>For a provided tensor descriptors and algorithm selection, this function calculates and returns the workspace size required for back propagation on data. This call is required and must be executed once before running <ref refid="group__convolutions_1ga57dda8a3c4ecddb988dbba421151e761" kindref="member">miopenFindConvolutionBackwardWeightsAlgorithm()</ref> in order to determine the largest required allocation for the algorithm search; i.e., the maximum size of the memory needed from the set of potential backward weights convolution algorithm is returned.</para>
<para>If using Group/Depthwise convolution mode, call <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> before running this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output weights tensor dw (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory required (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="1954" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="1954" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1ga57dda8a3c4ecddb988dbba421151e761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFindConvolutionBackwardWeightsAlgorithm</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t xDesc, const void *x, const miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t dwDesc, void *dw, const int requestAlgoCount, int *returnedAlgoCount, miopenConvAlgoPerf_t *perfResults, void *workSpace, size_t workSpaceSize, bool exhaustiveSearch)</argsstring>
        <name>miopenFindConvolutionBackwardWeightsAlgorithm</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>requestAlgoCount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnedAlgoCount</declname>
        </param>
        <param>
          <type><ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref> *</type>
          <declname>perfResults</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exhaustiveSearch</declname>
        </param>
        <briefdescription>
<para>Search and run the backwards weights convolutional algorithms and return a list of kernel times. </para>
        </briefdescription>
        <detaileddescription>
<para>This function attempts all MIOpen backward weights convolution algorithms, and outputs the performance metrics to a user-allocated array of type <ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref>. These metrics are written in sorted fashion where the first element has the lowest compute time. This function is mandatory before using backwards weight convolutions. Users can chose the top-most algorithm if they only care about the fastest algorithm.</para>
<para>This function is mandatory before using <ref refid="group__convolutions_1gac651a5c2fe903191bb6a383b1890ea0d" kindref="member">miopenConvolutionBackwardWeights()</ref>. In order to execute this function, miopenConvolutionBackwardsWeightsGetWorkSpaceSize() must be run to determine the required memory for this search.</para>
<para><itemizedlist>
<listitem><para>If exhaustiveSearch == 0, MIOpen will look for the first kernel with a configuration match. If a configuration match is not found, a default configuration will be returned.</para>
</listitem><listitem><para>If exhaustiveSearch == 1, MIOpen will look for the best kernel for the provided configuration. If a match is not found, an exhaustive search is performed by running individual algorithms.</para>
</listitem></itemizedlist>
</para>
<para>If using Group/Depthwise convolution mode, call <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> before running this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor dw (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dw</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights delta tensor dw (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of algorithms to return kernel times (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnedAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to number of algorithms returned (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perfResults</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to union of best algorithm for forward and backwards (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workspace required for the search (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory needed for find (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exhaustiveSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean to toggle a full search of all algorithms and configurations (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2001" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2001" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gac651a5c2fe903191bb6a383b1890ea0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardWeights</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t xDesc, const void *x, const miopenConvolutionDescriptor_t convDesc, miopenConvBwdWeightsAlgorithm_t algo, const void *beta, const miopenTensorDescriptor_t dwDesc, void *dw, void *workSpace, size_t workSpaceSize)</argsstring>
        <name>miopenConvolutionBackwardWeights</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1gaba316771c206839e54419b135027cbee" kindref="member">miopenConvBwdWeightsAlgorithm_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Execute a backward weights convolution layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs the backward weights convolution layer based on the selected algorithm. The function <ref refid="group__convolutions_1ga57dda8a3c4ecddb988dbba421151e761" kindref="member">miopenFindConvolutionBackwardWeightsAlgorithm()</ref> must have been executed previously to determine the required memory needed for the workspace and the best convolutional algorithm.</para>
<para>The backward weights convolution is designed to accommodate both packed and non-packed tensor strides for multiple data types and dimensions across various platforms. This flexibility ensures optimal performance in handling diverse computational scenarios. To configure tensor parameters, including strides, users can utilize the APIs <ref refid="group__tensor_1gae57f3c7b71aed10691abc2ac2a5f8f27" kindref="member">miopenSetTensorDescriptor()</ref> and <ref refid="group__tensor_1ga0ac6a668ed3b2e580b45c39b2dbf8b8c" kindref="member">miopenGetTensorDescriptor()</ref>. These APIs empower developers to seamlessly set and retrieve tensor information, facilitating a more intuitive and efficient workflow. The tensor strides are non-packed by default.</para>
<para>If using Group/Depthwise convolution mode, call <ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount()</ref> before running this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm selected (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor dw (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dw</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights delta tensor dw (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workspace required for the search (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory needed for find (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2050" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2050" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__convolutions_1gafe46a24bd8eba36fe34dbf0162ada0d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBackwardBias</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t dyDesc, const void *dy, const void *beta, const miopenTensorDescriptor_t dbDesc, void *db)</argsstring>
        <name>miopenConvolutionBackwardBias</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dbDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>db</declname>
        </param>
        <briefdescription>
<para>Calculates the gradient with respect to the bias. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute the convolution backwards gradient with respect to the bias tensor. The scaling parameter alpha (float) and shift parameter beta (float) are only supported for alpha = 1 and beta = 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dbDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input bias tensor db (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>Bias delta tensor db (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2079" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2079" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1gabd7d9b79e9164e8a3c91855c015cc43d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreatePoolingDescriptor</definition>
        <argsstring>(miopenPoolingDescriptor_t *poolDesc)</argsstring>
        <name>miopenCreatePoolingDescriptor</name>
        <param>
          <type>miopenPoolingDescriptor_t *</type>
          <declname>poolDesc</declname>
        </param>
        <briefdescription>
<para>Creates a pooling layer descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2101" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2101" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1gac31ae1c8976de3929adaf898c033f8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetPoolingIndexType</definition>
        <argsstring>(miopenPoolingDescriptor_t poolDesc, miopenIndexType_t index_type)</argsstring>
        <name>miopenSetPoolingIndexType</name>
        <param>
          <type>miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type><ref refid="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547" kindref="member">miopenIndexType_t</ref></type>
          <declname>index_type</declname>
        </param>
        <briefdescription>
<para>Set index data type for pooling layer. The default indexing type is uint8_t. Users can set the index type to any of the miopenIndexType_t sizes; 8, 16, 32, or 64 bit unsigned integers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Index type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2111" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2111" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1ga8f2bc026ee75ccac3aaaf18b4f2791dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetPoolingIndexType</definition>
        <argsstring>(miopenPoolingDescriptor_t poolDesc, miopenIndexType_t *index_type)</argsstring>
        <name>miopenGetPoolingIndexType</name>
        <param>
          <type>miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type><ref refid="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547" kindref="member">miopenIndexType_t</ref> *</type>
          <declname>index_type</declname>
        </param>
        <briefdescription>
<para>Get the index data type for pooling layer. The index type to any of the miopenIndexType_t sizes; 8, 16, 32, or 64 bit unsigned integers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Index type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2121" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2121" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1ga05ef9d8e8b8127e468efe2a4310b180f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetPoolingWorkSpaceIndexMode</definition>
        <argsstring>(miopenPoolingDescriptor_t poolDesc, miopenPoolingWorkspaceIndexMode_t workspace_index)</argsstring>
        <name>miopenSetPoolingWorkSpaceIndexMode</name>
        <param>
          <type>miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type><ref refid="group__pooling_1ga8f69978be75d6d32dbc172d3a99695e7" kindref="member">miopenPoolingWorkspaceIndexMode_t</ref></type>
          <declname>workspace_index</declname>
        </param>
        <briefdescription>
<para>Set workspace index mode for pooling layer. The default mode is miopenPoolingWorkSpaceIndexMask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspace_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Workspace index mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2131" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2131" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1ga6beeb9aba269f016cfeda70390db77b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetPoolingWorkSpaceIndexMode</definition>
        <argsstring>(miopenPoolingDescriptor_t poolDesc, miopenPoolingWorkspaceIndexMode_t *workspace_index)</argsstring>
        <name>miopenGetPoolingWorkSpaceIndexMode</name>
        <param>
          <type>miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type><ref refid="group__pooling_1ga8f69978be75d6d32dbc172d3a99695e7" kindref="member">miopenPoolingWorkspaceIndexMode_t</ref> *</type>
          <declname>workspace_index</declname>
        </param>
        <briefdescription>
<para>Get workspace index mode for pooling layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspace_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Workspace index mode (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2140" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2140" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1ga03b3553e6cc0162c9a31f47cf9cdd4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSet2dPoolingDescriptor</definition>
        <argsstring>(miopenPoolingDescriptor_t poolDesc, miopenPoolingMode_t mode, int windowHeight, int windowWidth, int pad_h, int pad_w, int stride_h, int stride_w)</argsstring>
        <name>miopenSet2dPoolingDescriptor</name>
        <param>
          <type>miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type><ref refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" kindref="member">miopenPoolingMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>windowHeight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>windowWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <briefdescription>
<para>Sets a 2-D pooling layer descriptor details. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the window shape, padding, and stride for a previously created 2-D pooling descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pooling mode enum (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>Input window height dimension (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Input window width dimension (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to pad height (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to pad width (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertical stride (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Horizontal stride (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2157" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2157" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1gad72feef4d7d5e37044b61c221bd1e2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGet2dPoolingDescriptor</definition>
        <argsstring>(const miopenPoolingDescriptor_t poolDesc, miopenPoolingMode_t *mode, int *windowHeight, int *windowWidth, int *pad_h, int *pad_w, int *stride_h, int *stride_w)</argsstring>
        <name>miopenGet2dPoolingDescriptor</name>
        <param>
          <type>const miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type><ref refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" kindref="member">miopenPoolingMode_t</ref> *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>windowHeight</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>windowWidth</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pad_h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pad_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stride_h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stride_w</declname>
        </param>
        <briefdescription>
<para>Gets a 2-D pooling layer descriptor details. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets the window shape, padding, and stride for a previously created 2-D pooling descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pooling mode enum (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>Input window height dimension (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Input window width dimension (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to pad height (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to pad width (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_h</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertical stride (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_w</parametername>
</parameternamelist>
<parameterdescription>
<para>Horizontal stride (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2180" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2180" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1ga1198df51381b094021aee5b1a1a05e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetPoolingForwardOutputDim</definition>
        <argsstring>(const miopenPoolingDescriptor_t poolDesc, const miopenTensorDescriptor_t tensorDesc, int *n, int *c, int *h, int *w)</argsstring>
        <name>miopenGetPoolingForwardOutputDim</name>
        <param>
          <type>const miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Gets the shape of the output tensor for 2-D pooling. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the tensor dimensions for the forward 2-D pooling. This call is required for the forward if the output dimensions are different than the input tensor dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch dim (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Heights of input map (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of input map (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2204" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2204" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1ga2c3fa7681fe3535180eaa89ba48eea3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetNdPoolingDescriptor</definition>
        <argsstring>(miopenPoolingDescriptor_t poolDesc, const miopenPoolingMode_t mode, int nbDims, const int *windowDimA, const int *padA, const int *stridesA)</argsstring>
        <name>miopenSetNdPoolingDescriptor</name>
        <param>
          <type>miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type>const <ref refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" kindref="member">miopenPoolingMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbDims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>windowDimA</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>padA</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>stridesA</declname>
        </param>
        <briefdescription>
<para>Set details of a N-D pooling layer descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the window shape, padding, and stride for a previously created N-D pooling descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pooling mode enum (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbDims</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the pooling (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowDimA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of input window dimensions with length equal to or larger than dimsRequested (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>padA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of number of elements to padding with length equal to or larger than dimsRequested (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stridesA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of stride parameter with length equal to or larger than dimsRequested (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2226" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2226" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1gabc760e40557710fe52cafde0cbfdfcf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetNdPoolingDescriptor</definition>
        <argsstring>(const miopenPoolingDescriptor_t poolDesc, int nbDimsRequested, miopenPoolingMode_t *mode, int *nbDims, int *windowDimA, int *padA, int *stridesA)</argsstring>
        <name>miopenGetNdPoolingDescriptor</name>
        <param>
          <type>const miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbDimsRequested</declname>
        </param>
        <param>
          <type><ref refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" kindref="member">miopenPoolingMode_t</ref> *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nbDims</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>windowDimA</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>padA</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stridesA</declname>
        </param>
        <briefdescription>
<para>Get details of a N-D pooling layer descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the window shape, padding, and stride for a previously created N-D pooling descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbDimsRequested</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the expected pooling descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pooling mode enum (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbDims</parametername>
</parameternamelist>
<parameterdescription>
<para>Actual dimension of the pooling descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowDimA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of input window dimensions with length equal to or larger than dimsRequested (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>padA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of number of elements to padding with length equal to or larger than dimsRequested (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stridesA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of stride parameter with length equal to or larger than dimsRequested (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2249" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2249" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1gab70ecbdc8d96942b78b0f3ca785114d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetPoolingNdForwardOutputDim</definition>
        <argsstring>(const miopenPoolingDescriptor_t poolDesc, const miopenTensorDescriptor_t tensorDesc, int dims, int *tensorDimArr)</argsstring>
        <name>miopenGetPoolingNdForwardOutputDim</name>
        <param>
          <type>const miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>tensorDimArr</declname>
        </param>
        <briefdescription>
<para>Gets the shape of the output tensor for N-D pooling. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the tensor dimensions for the forward N-D pooling. This call is required for the forward if the output dimensions are different than the input tensor dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the pooling (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensorDimArr</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of tensor dimension (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2270" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2270" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1ga23a4bf9e5cf91da0765c2c386b8aaab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenPoolingGetWorkSpaceSize</definition>
        <argsstring>(const miopenTensorDescriptor_t yDesc, size_t *workSpaceSize)</argsstring>
        <name>miopenPoolingGetWorkSpaceSize</name>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Get the amount of GPU memory required for pooling. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the amount of workspace in bytes require for pooling. This call is required to determine the amount of GPU memory needed for the backwards pooling algorithms. For max- pooling, an assumption is that index data type is uint8_t, therefore the returned workspace size will be based on this assumption even if the user sets the index type with <ref refid="group__pooling_1gac31ae1c8976de3929adaf898c033f8e8" kindref="member">miopenSetPoolingIndexType()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for pooling layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workSpaceSize (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2287" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2287" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1ga5a8b1812384cb03b5eb4437950e2f334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenPoolingGetWorkSpaceSizeV2</definition>
        <argsstring>(const miopenPoolingDescriptor_t poolDesc, const miopenTensorDescriptor_t yDesc, size_t *workSpaceSize)</argsstring>
        <name>miopenPoolingGetWorkSpaceSizeV2</name>
        <param>
          <type>const miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Get the amount of GPU memory required for pooling. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the amount of workspace in bytes require for pooling. This call is required to determine the amount of GPU memory needed for the backwards pooling algorithms. For max- pooling, there is no assumption on index data type. As the user can set the index datatype size using <ref refid="group__pooling_1gac31ae1c8976de3929adaf898c033f8e8" kindref="member">miopenSetPoolingIndexType()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pooling layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for pooling layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workSpaceSize (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2303" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2303" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1ga2f64eee5653500719bfd0badb98aad86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenPoolingForward</definition>
        <argsstring>(miopenHandle_t handle, const miopenPoolingDescriptor_t poolDesc, const void *alpha, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t yDesc, void *y, bool do_backward, void *workSpace, size_t workSpaceSize)</argsstring>
        <name>miopenPoolingForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_backward</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Execute a forward pooling layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs forward pooling. <ref refid="group__pooling_1ga1198df51381b094021aee5b1a1a05e3a" kindref="member">miopenGetPoolingForwardOutputDim()</ref> should be called before <ref refid="group__pooling_1ga2f64eee5653500719bfd0badb98aad86" kindref="member">miopenPoolingForward()</ref>. If the parameter do_backward == 0, then set workSpace = nullptr and workSpaceSize = 0. However, for back-propagation do_backwards must be set to 1 in <ref refid="group__pooling_1ga2f64eee5653500719bfd0badb98aad86" kindref="member">miopenPoolingForward()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for pooling layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_backward</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to toggle save data in workspace for backwards pass (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer user allocated memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory needed (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2327" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2327" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1gaf0f319af071fe15254d800bb3e452f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenPoolingBackward</definition>
        <argsstring>(miopenHandle_t handle, const miopenPoolingDescriptor_t poolDesc, const void *alpha, const miopenTensorDescriptor_t yDesc, const void *y, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t dxDesc, void *dx, void *workSpace)</argsstring>
        <name>miopenPoolingBackward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <briefdescription>
<para>Execute a backward pooling layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs backward pooling. <ref refid="group__pooling_1ga23a4bf9e5cf91da0765c2c386b8aaab6" kindref="member">miopenPoolingGetWorkSpaceSize()</ref> must be called before <ref refid="group__pooling_1gaf0f319af071fe15254d800bb3e452f20" kindref="member">miopenPoolingBackward()</ref> to determine the amount of workSpace to be allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for pooling layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights delta tensor dx (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user allocated workspace (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2359" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2359" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__pooling_1gae7ea63b05752da3fba82a6dca1de65b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyPoolingDescriptor</definition>
        <argsstring>(miopenPoolingDescriptor_t poolDesc)</argsstring>
        <name>miopenDestroyPoolingDescriptor</name>
        <param>
          <type>miopenPoolingDescriptor_t</type>
          <declname>poolDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the pooling descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poolDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pooling tensor descriptor type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2378" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2378" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___l_r_n_1ga41f093f397f886f31fe905e50167cac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateLRNDescriptor</definition>
        <argsstring>(miopenLRNDescriptor_t *lrnDesc)</argsstring>
        <name>miopenCreateLRNDescriptor</name>
        <param>
          <type>miopenLRNDescriptor_t *</type>
          <declname>lrnDesc</declname>
        </param>
        <briefdescription>
<para>Creates a local response normalization (LRN) layer descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lrnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a local response normalization layer descriptor type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2393" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2393" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___l_r_n_1ga322f5ee2751280378ca6756219052334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetLRNDescriptor</definition>
        <argsstring>(const miopenLRNDescriptor_t lrnDesc, miopenLRNMode_t mode, unsigned int lrnN, double lrnAlpha, double lrnBeta, double lrnK)</argsstring>
        <name>miopenSetLRNDescriptor</name>
        <param>
          <type>const miopenLRNDescriptor_t</type>
          <declname>lrnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___l_r_n_1gae8c4f5513e59a0c2870013504f9b5c4d" kindref="member">miopenLRNMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>lrnN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lrnAlpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lrnBeta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lrnK</declname>
        </param>
        <briefdescription>
<para>Sets a LRN layer descriptor details. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets all of the descriptor details for the LRN layer. The number of window elements lrnN is a diameter and always odd.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lrnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a LRN layer descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>LRN mode enum (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnN</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of normalization window elements (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift factor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnK</parametername>
</parameternamelist>
<parameterdescription>
<para>K factor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2408" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2408" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___l_r_n_1ga48c74e2a652a14083de6687b812153e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetLRNDescriptor</definition>
        <argsstring>(const miopenLRNDescriptor_t lrnDesc, miopenLRNMode_t *mode, unsigned int *lrnN, double *lrnAlpha, double *lrnBeta, double *lrnK)</argsstring>
        <name>miopenGetLRNDescriptor</name>
        <param>
          <type>const miopenLRNDescriptor_t</type>
          <declname>lrnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___l_r_n_1gae8c4f5513e59a0c2870013504f9b5c4d" kindref="member">miopenLRNMode_t</ref> *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>lrnN</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lrnAlpha</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lrnBeta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lrnK</declname>
        </param>
        <briefdescription>
<para>Gets a LRN layer descriptor details. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the LRN descriptor details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lrnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a LRN layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>LRN mode enum (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnN</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of normalization window elements (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift factor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnK</parametername>
</parameternamelist>
<parameterdescription>
<para>K factor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2427" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2427" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___l_r_n_1ga9be3e08ec25eaf2b99cf0b8f88711f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenLRNGetWorkSpaceSize</definition>
        <argsstring>(const miopenTensorDescriptor_t yDesc, size_t *workSpaceSize)</argsstring>
        <name>miopenLRNGetWorkSpaceSize</name>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Determine the workspace requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines the GPU memory allocation required to execute the LRN layer based on the LRN descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a LRN layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Output variable for workspace size (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2443" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2443" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___l_r_n_1gaf5ec38b9a11b7fa584bf8a635d03c68e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenLRNForward</definition>
        <argsstring>(miopenHandle_t handle, const miopenLRNDescriptor_t lrnDesc, const void *alpha, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t yDesc, void *y, bool do_backward, void *workSpace)</argsstring>
        <name>miopenLRNForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenLRNDescriptor_t</type>
          <declname>lrnDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_backward</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <briefdescription>
<para>Execute a LRN forward layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs the forward layer normalization in the forward direction. If do_backward == 0, then set workSpace = nullptr and workSpaceSize = 0. However, if the user wishes to execute backwards, then they must set do_backwards = 1 in <ref refid="group___l_r_n_1gaf5ec38b9a11b7fa584bf8a635d03c68e" kindref="member">miopenLRNForward()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for LRN layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_backward</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to toggle save data in workspace for backwards pass (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer user allocated memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2464" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2464" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___l_r_n_1ga637b624c1a29d5f0b9c5a4bfcee353a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenLRNBackward</definition>
        <argsstring>(miopenHandle_t handle, const miopenLRNDescriptor_t lrnDesc, const void *alpha, const miopenTensorDescriptor_t yDesc, const void *y, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t dxDesc, void *dx, const void *workSpace)</argsstring>
        <name>miopenLRNBackward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenLRNDescriptor_t</type>
          <declname>lrnDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>workSpace</declname>
        </param>
        <briefdescription>
<para>Execute a LRN backward layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lrnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for LRN layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor x (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer user allocated memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2492" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2492" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___l_r_n_1gaf73f4948c1e487621773ea5286cc8843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyLRNDescriptor</definition>
        <argsstring>(miopenLRNDescriptor_t lrnDesc)</argsstring>
        <name>miopenDestroyLRNDescriptor</name>
        <param>
          <type>miopenLRNDescriptor_t</type>
          <declname>lrnDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the LRN descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lrnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>LRN tensor descriptor type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2511" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2511" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__layernorm_1ga167bb1f70a5625e10295132444bab39d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenLayerNormForward</definition>
        <argsstring>(miopenHandle_t handle, miopenNormMode_t mode, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t weightDesc, const void *weight, const miopenTensorDescriptor_t biasDesc, const void *bias, const float epsilon, const int32_t normalized_dim, const miopenTensorDescriptor_t yDesc, void *y, const miopenTensorDescriptor_t meanDesc, void *mean, const miopenTensorDescriptor_t rstdDesc, void *rstd)</argsstring>
        <name>miopenLayerNormForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__layernorm_1ga996bace523abc82c6847984c34b60d5b" kindref="member">miopenNormMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>weightDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>normalized_dim</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>meanDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>rstdDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>rstd</declname>
        </param>
        <briefdescription>
<para>Execute a layernorm forward layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>LayerNorm mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor weight (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor weight (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor bias (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor bias (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to stablize inverse variance calculation (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalized_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Nomalized dimensions in the input array (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor mean (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor mean (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rstdDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor rstd (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rstd</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor rstd (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2542" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2542" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__cat_1ga1d94a26be667c754a8ab5cce29524d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCatForward</definition>
        <argsstring>(miopenHandle_t handle, const int32_t xCount, const miopenTensorDescriptor_t *xDescs, const void *const *xs, const miopenTensorDescriptor_t yDesc, void *y, const int32_t dim)</argsstring>
        <name>miopenCatForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>xCount</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDescs</declname>
        </param>
        <param>
          <type>const void *const *</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Execute a cat forward layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDescs</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor of input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Source data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor of output tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Concatenation dimension (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2580" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2580" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__batchnorm_1gaf2aef2cbd792e82b32b305039d6e4662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDeriveBNTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t derivedBnDesc, const miopenTensorDescriptor_t xDesc, miopenBatchNormMode_t bn_mode)</argsstring>
        <name>miopenDeriveBNTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>derivedBnDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <briefdescription>
<para>Derive tensor for gamma and beta from input tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes the input tensor descriptor and outputs a derived tensor for the normalization scale (gamma) and shift (beta) tensors.</para>
<para>For an input tensor NCHW and spatial mode, the output derived tensor is 1C11, while for per-activation the derived tensor is 1CHW.</para>
<para>For an input tensor NCDHW and spatial mode, the output derived tensor is 1C111, while for per-activation the derived tensor is 1CDHW.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>derivedBnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Output derived tensor descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch Normalization mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2614" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2614" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__batchnorm_1ga343969e08d276e480a2fa3b14151f287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenBatchNormalizationForwardTraining</definition>
        <argsstring>(miopenHandle_t handle, miopenBatchNormMode_t bn_mode, void *alpha, void *beta, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t yDesc, void *y, const miopenTensorDescriptor_t bnScaleBiasMeanVarDesc, void *bnScale, void *bnBias, double expAvgFactor, void *resultRunningMean, void *resultRunningVariance, double epsilon, void *resultSaveMean, void *resultSaveInvVariance)</argsstring>
        <name>miopenBatchNormalizationForwardTraining</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bnScaleBiasMeanVarDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>bnScale</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>bnBias</declname>
        </param>
        <param>
          <type>double</type>
          <declname>expAvgFactor</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultRunningMean</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultRunningVariance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultSaveMean</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultSaveInvVariance</declname>
        </param>
        <briefdescription>
<para>Execute forward training layer for batch normalization. </para>
        </briefdescription>
        <detaileddescription>
<para>Batch normalization pass for forward training pass. Takes in batch normalization mode bn_mode and input tensor x, output tensor y, bnBias and bnScale with their descriptor.</para>
<para>If either resultSaveMean, or resultSaveInvVariance are null pointers then the values for the mean and inverse variance will not be used.</para>
<para>Likewise, if either resultRunningMean, or resultRunningVariance are null pointers then the values for the running mean and variance will not be saved. Running averages and variances are scaled using an exponential averaging factor: <formula id="2">\[ \mu_{old} = \mu_{new}*factor + \mu_{old}*(1-factor) \]</formula> where <formula id="3">\[ factor=1/(1+iteration) \]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScaleBiasMeanVarDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for BN scaling, shifting, saved variance and mean (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScale</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch norm scaling, gamma, tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch norm bias, beta, tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expAvgFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponential averaging factor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultRunningMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Running average saved for inference (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultRunningVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Running variance saved for inference (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to stablize inverse variance calculation (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultSaveMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Saved mini-batch mean for backwards pass (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultSaveInvVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Saved mini-batch inverse variance for backwards pass (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2657" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2657" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__batchnorm_1ga076386cb1c1bf692f1883c3d1a013a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenBatchNormalizationForwardInference</definition>
        <argsstring>(miopenHandle_t handle, miopenBatchNormMode_t bn_mode, void *alpha, void *beta, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t yDesc, void *y, const miopenTensorDescriptor_t bnScaleBiasMeanVarDesc, void *bnScale, void *bnBias, void *estimatedMean, void *estimatedVariance, double epsilon)</argsstring>
        <name>miopenBatchNormalizationForwardInference</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bnScaleBiasMeanVarDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>bnScale</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>bnBias</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>estimatedMean</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>estimatedVariance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Execute forward inference layer for batch normalization. </para>
        </briefdescription>
        <detaileddescription>
<para>Batch normalization pass for forward inference pass. Takes in batch normalization mode bn_mode and input tensor x, output tensor y, bnBias and bnScale with their descriptor.</para>
<para>If either estimatedMean, or estimatedVariance are null pointers then the values for the mean and variance will be calculated from input data and this calculated mean and variance will be used to update input values. If variance is zero and epsilon is also zero, this function outputs NAN values. Input espilon value should always be non zero positive value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScaleBiasMeanVarDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for BN scaling, shifting, saved variance and mean (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScale</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch norm scaling, gamma, tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch norm bias, beta, tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>estimatedMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Running average saved during forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>estimatedVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Running variance saved during forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to stabilize inverse variance calculation (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2705" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2705" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__batchnorm_1gaae2f39675310df613802dcf8cfd446a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenBatchNormalizationBackward</definition>
        <argsstring>(miopenHandle_t handle, miopenBatchNormMode_t bn_mode, const void *alphaDataDiff, const void *betaDataDiff, const void *alphaParamDiff, const void *betaParamDiff, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t dxDesc, void *dx, const miopenTensorDescriptor_t bnScaleBiasDiffDesc, const void *bnScale, void *resultBnScaleDiff, void *resultBnBiasDiff, double epsilon, const void *savedMean, const void *savedInvVariance)</argsstring>
        <name>miopenBatchNormalizationBackward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alphaDataDiff</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>betaDataDiff</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alphaParamDiff</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>betaParamDiff</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bnScaleBiasDiffDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnScale</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultBnScaleDiff</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultBnBiasDiff</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>savedMean</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>savedInvVariance</declname>
        </param>
        <briefdescription>
<para>Execute backwards propagation layer for batch normalization. </para>
        </briefdescription>
        <detaileddescription>
<para>Batch normalization pass for backwards propagation training pass. The method for backwards propagation batch normalization.</para>
<para>Takes in batch normalization mode bn_mode and input tensor data x, input activation tensor dy, output tensor dx, the learned tensors resultBNBiasDiff and resultBNScaleDiff with their descriptor.</para>
<para>If BOTH savedMean, and savedVariance are not null pointers then the method will use the saved mean and variance calculated by the forward training phase.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alphaDataDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>betaDataDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alphaParamDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>betaParamDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dx (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScaleBiasDiffDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for BN scaling, shifting, saved variance and mean (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScale</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch norm scaling, gamma, tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultBnScaleDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor for dscale (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultBnBiasDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor for dbias (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to stabilize inverse variance calculation (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Saved mini-batch mean for backwards pass (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedInvVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Saved mini-bathc inverse variance for backwards pass (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2755" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2755" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__activation_1ga92c0d5c8719120d3ade6a83f9c35c4af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateActivationDescriptor</definition>
        <argsstring>(miopenActivationDescriptor_t *activDesc)</argsstring>
        <name>miopenCreateActivationDescriptor</name>
        <param>
          <type>miopenActivationDescriptor_t *</type>
          <declname>activDesc</declname>
        </param>
        <briefdescription>
<para>Creates the Activation descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>activDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an activation tensor descriptor type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2789" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2789" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__activation_1ga91813317a3b87f4b6aaaa960a2cfc58a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetActivationDescriptor</definition>
        <argsstring>(const miopenActivationDescriptor_t activDesc, miopenActivationMode_t mode, double activAlpha, double activBeta, double activGamma)</argsstring>
        <name>miopenSetActivationDescriptor</name>
        <param>
          <type>const miopenActivationDescriptor_t</type>
          <declname>activDesc</declname>
        </param>
        <param>
          <type><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activAlpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activBeta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activGamma</declname>
        </param>
        <briefdescription>
<para>Sets the activation layer descriptor details. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets all of the descriptor details for the activation layer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>activDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a activation layer descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation mode enum (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Alpha value for some activation modes (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>Beta value for some activation modes (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma value for some activation modes (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2803" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2803" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__activation_1gac2a4025376e08329662ebb982e037def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetActivationDescriptor</definition>
        <argsstring>(const miopenActivationDescriptor_t activDesc, miopenActivationMode_t *mode, double *activAlpha, double *activBeta, double *activGamma)</argsstring>
        <name>miopenGetActivationDescriptor</name>
        <param>
          <type>const miopenActivationDescriptor_t</type>
          <declname>activDesc</declname>
        </param>
        <param>
          <type><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref> *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>activAlpha</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>activBeta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>activGamma</declname>
        </param>
        <briefdescription>
<para>Gets the activation layer descriptor details. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves all of the descriptor details for the activation layer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>activDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a activation layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation mode enum (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Alpha value for some activation modes (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>Beta value for some activation modes (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma value for some activation modes (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2821" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2821" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__activation_1ga33971a83fd4a33df97f790421c208d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenActivationForward</definition>
        <argsstring>(miopenHandle_t handle, const miopenActivationDescriptor_t activDesc, const void *alpha, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t yDesc, void *y)</argsstring>
        <name>miopenActivationForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenActivationDescriptor_t</type>
          <declname>activDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Execute an activation forward layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for activation layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2839" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2839" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__activation_1ga4f43724d9ab601a14d1355cc3e4ba8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenActivationBackward</definition>
        <argsstring>(miopenHandle_t handle, const miopenActivationDescriptor_t activDesc, const void *alpha, const miopenTensorDescriptor_t yDesc, const void *y, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t dxDesc, void *dx)</argsstring>
        <name>miopenActivationBackward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenActivationDescriptor_t</type>
          <declname>activDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
<para>Execute a activation backwards layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for activation layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data output tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Output data delta tensor dx (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2864" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2864" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__activation_1gae281c7cc4e97934b57cbedd6c73c3133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyActivationDescriptor</definition>
        <argsstring>(miopenActivationDescriptor_t activDesc)</argsstring>
        <name>miopenDestroyActivationDescriptor</name>
        <param>
          <type>miopenActivationDescriptor_t</type>
          <declname>activDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the activation descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>activDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation tensor descriptor type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2883" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2883" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__softmax_1ga3b2ad480ed94ab0f39a3d0e9c2bf1ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSoftmaxForward</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t yDesc, void *y)</argsstring>
        <name>miopenSoftmaxForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Execute a softmax forward layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This API only implements the SOFTMAX_MODE_CHANNEL in SOFTMAX_ACCURATE path.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2906" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2906" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__softmax_1ga86f410cedb58f1849e507436036d8329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSoftmaxBackward</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t yDesc, const void *y, const miopenTensorDescriptor_t dyDesc, const void *dy, const void *beta, const miopenTensorDescriptor_t dxDesc, void *dx)</argsstring>
        <name>miopenSoftmaxBackward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
<para>Execute a softmax backwards layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This API only implements the SOFTMAX_MODE_CHANNEL in SOFTMAX_ACCURATE path.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data output tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Output data delta tensor dx (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2929" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2929" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__softmax_1ga71e476f60294b1dae6aa80ff773804b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSoftmaxForward_V2</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t yDesc, void *y, miopenSoftmaxAlgorithm_t algorithm, miopenSoftmaxMode_t mode)</argsstring>
        <name>miopenSoftmaxForward_V2</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfe" kindref="member">miopenSoftmaxAlgorithm_t</ref></type>
          <declname>algorithm</declname>
        </param>
        <param>
          <type><ref refid="group__softmax_1gaea670eae33cee9aee53d48624cf28d7d" kindref="member">miopenSoftmaxMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Execute a softmax forward layer with expanded modes and algorithms. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>Softmax implementation algorithm (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Softmax mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2952" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2952" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__softmax_1ga35e023988554fd30579fd6c8b205983a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSoftmaxBackward_V2</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t yDesc, const void *y, const miopenTensorDescriptor_t dyDesc, const void *dy, const void *beta, const miopenTensorDescriptor_t dxDesc, void *dx, miopenSoftmaxAlgorithm_t algorithm, miopenSoftmaxMode_t mode)</argsstring>
        <name>miopenSoftmaxBackward_V2</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfe" kindref="member">miopenSoftmaxAlgorithm_t</ref></type>
          <declname>algorithm</declname>
        </param>
        <param>
          <type><ref refid="group__softmax_1gaea670eae33cee9aee53d48624cf28d7d" kindref="member">miopenSoftmaxMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Execute a softmax backwards layer with expanded modes and algorithms. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data output tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Output data delta tensor dx (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>Softmax implementation algorithm (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Softmax mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2977" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2977" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga66a35ee58b7bae6400997b70c60d6579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenFusionPlanDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenFusionPlanDescriptor</type>
        </param>
        <briefdescription>
<para>MIOpen fusion interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2995" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2995" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="miopen_8h_1ab7b2d0b6d40df1f72c66432d5b743bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenOperatorDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenOperatorDescriptor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2996" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2996" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="miopen_8h_1af0ec2e8f14b734074be71321165e69ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenOperatorArgs)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenOperatorArgs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="2997" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="2997" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gad6221c451528eac3d9592842f1df2f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateFusionPlan</definition>
        <argsstring>(miopenFusionPlanDescriptor_t *fusePlanDesc, const miopenFusionDirection_t fuseDirection, const miopenTensorDescriptor_t inputDesc)</argsstring>
        <name>miopenCreateFusionPlan</name>
        <param>
          <type>miopenFusionPlanDescriptor_t *</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>const <ref refid="group___f_u_s_i_o_n_1ga774d5d8b0c1ca371d920e78387100858" kindref="member">miopenFusionDirection_t</ref></type>
          <declname>fuseDirection</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>inputDesc</declname>
        </param>
        <briefdescription>
<para>Creates the kenrel fusion plan descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a fusion plan (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fuseDirection</parametername>
</parameternamelist>
<parameterdescription>
<para>Horizontal or Vertical fusion (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor to tensor for the input (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3020" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3020" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga72b408c1034c7c934c26cb86fde84e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyFusionPlan</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc)</argsstring>
        <name>miopenDestroyFusionPlan</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <briefdescription>
<para>Destroy the fusion plan descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3029" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3029" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga9cbffb2ba55ade895a5fcb005a03c9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCompileFusionPlan</definition>
        <argsstring>(miopenHandle_t handle, miopenFusionPlanDescriptor_t fusePlanDesc)</argsstring>
        <name>miopenCompileFusionPlan</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <briefdescription>
<para>Compiles the fusion plan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3037" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3037" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga6f35ee49f5a6fcd81f3b4cb82f60f830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFusionPlanGetOp</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, const int op_idx, miopenFusionOpDescriptor_t *op)</argsstring>
        <name>miopenFusionPlanGetOp</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>op_idx</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Allows access to the operators in a fusion plan. </para>
        </briefdescription>
        <detaileddescription>
<para>This api call does bounds checking on the supplied op_idx and would return miopenStatusError if the index is out of bounds</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the required operator in the fusion plan, in the order of insertion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer to the operator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3050" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3050" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga3afcf7d3325e8b251eb7b74da8bdc13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFusionPlanGetWorkSpaceSize</definition>
        <argsstring>(miopenHandle_t handle, miopenFusionPlanDescriptor_t fusePlanDesc, size_t *workSpaceSize, miopenConvFwdAlgorithm_t algo)</argsstring>
        <name>miopenFusionPlanGetWorkSpaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref></type>
          <declname>algo</declname>
        </param>
        <briefdescription>
<para>Query the workspace size required for the fusion plan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to return size in bytes (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm selected (inputs) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3062" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3062" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga305370335f4a926f2a2b1cf1c72727f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFusionPlanConvolutionGetAlgo</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, const int requestAlgoCount, int *returnedAlgoCount, miopenConvFwdAlgorithm_t *returnedAlgos)</argsstring>
        <name>miopenFusionPlanConvolutionGetAlgo</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>requestAlgoCount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnedAlgoCount</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref> *</type>
          <declname>returnedAlgos</declname>
        </param>
        <briefdescription>
<para>Returns the supported algorithms for the convolution operator in the Fusion Plan. </para>
        </briefdescription>
        <detaileddescription>
<para>A Convolution operator in a fusion plan may be implemented by different algorithms representing different tradeoffs of memory and performance. The returned list of algorithms is sorted in decreasing order of priority. Therefore, if the user does not request an algorithm to be set using the miopenFusionPlanConvolutionSetAlgo call, the first algorithm in the list would be used to execute the convolution in the fusion plan. Moreover this call must be immediately preceded by the miopenCreateOpConvForward call for the op in question.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of algorithms to return (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnedAlgoCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The actual number of returned algorithms; always be less than equal to requestAlgoCount (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnedAlgos</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list of supported algorithms </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3085" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3085" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga45b767f63622636b63f5ad453358cfc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFusionPlanConvolutionSetAlgo</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenConvFwdAlgorithm_t algo)</argsstring>
        <name>miopenFusionPlanConvolutionSetAlgo</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref></type>
          <declname>algo</declname>
        </param>
        <briefdescription>
<para>Requests the fusion runtime to choose a particular algorithm for the added convolution operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Please see the description for miopenFusionPlanConvolutionGetAlgo</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested algorithm for the convolution operator (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3099" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3099" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga5ce93b3bd99720da807a3bfb8f778821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpConvForward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *convOp, miopenConvolutionDescriptor_t convDesc, const miopenTensorDescriptor_t wDesc)</argsstring>
        <name>miopenCreateOpConvForward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>convOp</declname>
        </param>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <briefdescription>
<para>Creates forward convolution operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor for the weights tensor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3110" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3110" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga733b3205944e4707ce9b9565927be47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpActivationForward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *activFwdOp, miopenActivationMode_t mode)</argsstring>
        <name>miopenCreateOpActivationForward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>activFwdOp</declname>
        </param>
        <param>
          <type><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Creates a forward activation operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activFwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation version (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3126" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3126" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga1181e44c0d111616642fffe0c323e21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpActivationBackward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *activBwdOp, miopenActivationMode_t mode)</argsstring>
        <name>miopenCreateOpActivationBackward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>activBwdOp</declname>
        </param>
        <param>
          <type><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Creates a backward activation operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation version (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3139" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3139" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gafe82043e423cc3af83f0a86683c2faa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpBiasForward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *biasOp, const miopenTensorDescriptor_t bDesc)</argsstring>
        <name>miopenCreateOpBiasForward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>biasOp</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bDesc</declname>
        </param>
        <briefdescription>
<para>Creates a forward bias operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>bias tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3151" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3151" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga493ad077910d796d4391f40032983da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpBatchNormInference</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *bnOp, const miopenBatchNormMode_t bn_mode, const miopenTensorDescriptor_t bnScaleBiasMeanVarDesc)</argsstring>
        <name>miopenCreateOpBatchNormInference</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>bnOp</declname>
        </param>
        <param>
          <type>const <ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bnScaleBiasMeanVarDesc</declname>
        </param>
        <briefdescription>
<para>Creates a forward inference batch normalization operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization layer mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScaleBiasMeanVarDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma, beta, mean, variance tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3165" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3165" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga2c8f42b324b568ea2f9e1678cca809b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpBatchNormForward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *bnFwdOp, const miopenBatchNormMode_t bn_mode, bool runningMeanVariance)</argsstring>
        <name>miopenCreateOpBatchNormForward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>bnFwdOp</declname>
        </param>
        <param>
          <type>const <ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>runningMeanVariance</declname>
        </param>
        <briefdescription>
<para>Creates a forward training batch normalization operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnFwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization layer mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runningMeanVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Toggles whether or not to save population statistics for inference; batch statistic are required (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3180" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3180" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gab536f8a2157852540dd2a2fcff5e90c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOpBatchNormBackward</definition>
        <argsstring>(miopenFusionPlanDescriptor_t fusePlanDesc, miopenFusionOpDescriptor_t *bnBwdOp, const miopenBatchNormMode_t bn_mode)</argsstring>
        <name>miopenCreateOpBatchNormBackward</name>
        <param>
          <type>miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>miopenFusionOpDescriptor_t *</type>
          <declname>bnBwdOp</declname>
        </param>
        <param>
          <type>const <ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref></type>
          <declname>bn_mode</declname>
        </param>
        <briefdescription>
<para>Creates a back propagation batch normalization operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fusion plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bn_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization layer mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3193" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3193" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gab7c88a2676231b3e9d1a623616ea9053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateOperatorArgs</definition>
        <argsstring>(miopenOperatorArgs_t *args)</argsstring>
        <name>miopenCreateOperatorArgs</name>
        <param>
          <type>miopenOperatorArgs_t *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Creates an operator argument object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operator argument type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3203" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3203" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gab395e7ca41f74ed5deda61bc173e3db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyOperatorArgs</definition>
        <argsstring>(miopenOperatorArgs_t args)</argsstring>
        <name>miopenDestroyOperatorArgs</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Destroys an operator argument object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An operator argument type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3210" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3210" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gabc13e846bf2934371aa914d05d727b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsConvForward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t convOp, const void *alpha, const void *beta, const void *w)</argsstring>
        <name>miopenSetOpArgsConvForward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>convOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for forward convolution op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Forward convolution operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to tensor memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3222" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3222" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gaaa5188cbdbf34f68ba2fc02be21ffb7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsActivForward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t activFwdOp, const void *alpha, const void *beta, double activAlpha, double activBeta, double activGamma)</argsstring>
        <name>miopenSetOpArgsActivForward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>activFwdOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activAlpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activBeta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activGamma</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for forward activation op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activFwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation backwards operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3240" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3240" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga85bc81886a81df6b3610276674fe3562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsActivBackward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t activBwdOp, const void *alpha, const void *beta, const void *y, const void *reserved, double activAlpha, double activBeta, double activGamma)</argsstring>
        <name>miopenSetOpArgsActivBackward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>activBwdOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>reserved</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activAlpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activBeta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>activGamma</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for backward activation op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBwdOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation backwards operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y, output of activations in the forward direction (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserved</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor reserved memory space; currently should be nullptr (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision activation parameter which depends on activation mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3262" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3262" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga671c3d981cd6f5f149adf4421b00fcea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsBatchNormInference</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t bnOp, const void *alpha, const void *beta, const void *bnScale, const void *bnBias, const void *estimatedMean, const void *estimatedVariance, double epsilon)</argsstring>
        <name>miopenSetOpArgsBatchNormInference</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>bnOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnScale</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnBias</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>estimatedMean</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>estimatedVariance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for inference batch normalization op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization inference operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScale</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gamma tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the beta tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>estimatedMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to population mean memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>estimatedVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to population variance memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value for numerical stability (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3287" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3287" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga6754e3fce005f9b9d352211cc1430b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsBatchNormForward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t bnOp, const void *alpha, const void *beta, const void *bnScale, const void *bnBias, void *savedMean, void *savedInvVariance, void *runningMean, void *runningVariance, double expAvgFactor, double epsilon)</argsstring>
        <name>miopenSetOpArgsBatchNormForward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>bnOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnScale</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnBias</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>savedMean</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>savedInvVariance</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>runningMean</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>runningVariance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>expAvgFactor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for forward batch normalization op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization forward operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScale</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gamma tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the beta tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to batch mean memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedInvVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to batch inverse variance memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runningMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to population mean memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runningVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to population variance memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expAvgFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value for control of population statistics (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value for numerical stability (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3313" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3313" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gaa7f311a862d10ff2e4d771072f6ad54a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsBatchNormBackward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t bnOp, const void *alpha, const void *beta, const void *x, const void *bnScale, const void *bnBias, void *resultBnScaleDiff, void *resultBnBiasDiff, const void *savedMean, const void *savedInvVariance)</argsstring>
        <name>miopenSetOpArgsBatchNormBackward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>bnOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnScale</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bnBias</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultBnScaleDiff</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>resultBnBiasDiff</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>savedMean</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>savedInvVariance</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for backward batch normalization op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch normalization forward operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the forward input tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnScale</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gamma tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the beta tensor memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultBnScaleDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gamma gradient tensor memory (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultBnBiasDiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the beta gradient tensor memory (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to batch mean memory (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savedInvVariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to batch inverse variance memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3341" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3341" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga5cddc46abf5c9ea46bc0bbcc161f6eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetOpArgsBiasForward</definition>
        <argsstring>(miopenOperatorArgs_t args, const miopenFusionOpDescriptor_t biasOp, const void *alpha, const void *beta, const void *bias)</argsstring>
        <name>miopenSetOpArgsBiasForward</name>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const miopenFusionOpDescriptor_t</type>
          <declname>biasOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bias</declname>
        </param>
        <briefdescription>
<para>Sets the arguments for forward bias op. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An arguments object type (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Forward bias operator (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point shift factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the forward bias input tensor memory (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3363" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3363" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1ga6dae1b3552cbd88138544937b014cd5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenExecuteFusionPlan</definition>
        <argsstring>(const miopenHandle_t handle, const miopenFusionPlanDescriptor_t fusePlanDesc, const miopenTensorDescriptor_t inputDesc, const void *input, const miopenTensorDescriptor_t outputDesc, void *output, miopenOperatorArgs_t args)</argsstring>
        <name>miopenExecuteFusionPlan</name>
        <param>
          <type>const miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenFusionPlanDescriptor_t</type>
          <declname>fusePlanDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>inputDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>outputDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>miopenOperatorArgs_t</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Executes the fusion plan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fusePlanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>fused plan descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Source data tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Decriptor of the output tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination data tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An argument object of the fused kernel (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3381" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3381" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_u_s_i_o_n_1gad2e1ed4cfbdd05c244e407933ed8541b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenConvolutionBiasActivationForward</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha1, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t wDesc, const void *w, const miopenConvolutionDescriptor_t convDesc, miopenConvFwdAlgorithm_t algo, void *workspace, size_t workspaceSizeInBytes, const void *alpha2, const miopenTensorDescriptor_t zDesc, const void *z, const miopenTensorDescriptor_t biasDesc, const void *bias, const miopenActivationDescriptor_t activationDesc, const miopenTensorDescriptor_t yDesc, void *y)</argsstring>
        <name>miopenConvolutionBiasActivationForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha1</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenConvolutionDescriptor_t</type>
          <declname>convDesc</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workspace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workspaceSizeInBytes</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha2</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>zDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>const miopenActivationDescriptor_t</type>
          <declname>activationDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Prepares and executes the Convlution+Bias+Activation Fusion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha1</parametername>
</parameternamelist>
<parameterdescription>
<para>floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for weight tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights tensor w (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Convolution layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm selected (inputs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to workspace required (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspaceSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory in bytes pointed to by workSpace above </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha2</parametername>
</parameternamelist>
<parameterdescription>
<para>floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor z (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor z (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for input data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor bias (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activationDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Activation descriptor that specifies the activation mode </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Output data tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3413" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3413" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gab6af15d94b2e0932873142d55aa239b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateRNNDescriptor</definition>
        <argsstring>(miopenRNNDescriptor_t *rnnDesc)</argsstring>
        <name>miopenCreateRNNDescriptor</name>
        <param>
          <type>miopenRNNDescriptor_t *</type>
          <declname>rnnDesc</declname>
        </param>
        <briefdescription>
<para>Create a RNN layer Descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>API for creating an uninitialized RNN layer descriptor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a tensor descriptor type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3531" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3531" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga6ac11f7ee823327d80e1b0ebc6774b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNDescriptor</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, miopenRNNMode_t *rnnMode, miopenRNNAlgo_t *algoMode, miopenRNNInputMode_t *inputMode, miopenRNNDirectionMode_t *dirMode, miopenRNNBiasMode_t *biasMode, int *hiddenSize, int *layer)</argsstring>
        <name>miopenGetRNNDescriptor</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref> *</type>
          <declname>rnnMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref> *</type>
          <declname>algoMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref> *</type>
          <declname>inputMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref> *</type>
          <declname>dirMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref> *</type>
          <declname>biasMode</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hiddenSize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Retrieves a RNN layer descriptor&apos;s details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algoMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN algorithm mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN data input mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dirMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Uni or bi direction mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Bias used (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hiddenSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of hidden state (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of stacked layers (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3545" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3545" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga102a6710811b4662eee1c3f2858b3498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNDescriptor_V2</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, int *hiddenSize, int *layer, miopenDropoutDescriptor_t *dropoutDesc, miopenRNNInputMode_t *inputMode, miopenRNNDirectionMode_t *dirMode, miopenRNNMode_t *rnnMode, miopenRNNBiasMode_t *biasMode, miopenRNNAlgo_t *algoMode, miopenDataType_t *dataType)</argsstring>
        <name>miopenGetRNNDescriptor_V2</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hiddenSize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenDropoutDescriptor_t *</type>
          <declname>dropoutDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref> *</type>
          <declname>inputMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref> *</type>
          <declname>dirMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref> *</type>
          <declname>rnnMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref> *</type>
          <declname>biasMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref> *</type>
          <declname>algoMode</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>dataType</declname>
        </param>
        <briefdescription>
<para>Retrieves a RNN layer descriptor&apos;s details version 2. This version enables retrieving information of the dropout descriptor of the rnn descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hiddenSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of hidden state (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of stacked layers (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-configured dropout descriptor for dropout layer in between RNN layers (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN data input mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dirMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Uni or bi direction mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Bias used (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algoMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN algorithm mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type of RNN (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3570" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3570" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaf5675f82ade15ca38b890f6ea4d035b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyRNNDescriptor</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc)</argsstring>
        <name>miopenDestroyRNNDescriptor</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the tensor descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN tensor descriptor type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3586" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3586" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga609253972613b2dc6ea2e9d07697f665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNDescriptor</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, const int hsize, const int nlayers, miopenRNNInputMode_t inMode, miopenRNNDirectionMode_t direction, miopenRNNMode_t rnnMode, miopenRNNBiasMode_t biasMode, miopenRNNAlgo_t algo, miopenDataType_t dataType)</argsstring>
        <name>miopenSetRNNDescriptor</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>hsize</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nlayers</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref></type>
          <declname>inMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref></type>
          <declname>rnnMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref></type>
          <declname>biasMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <briefdescription>
<para>Set the details of the RNN descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting the values of the RNN descriptor object. This function requires specific algorithm selection. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Hidden layer size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nlayers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of layers (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN first layer input mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN direction (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN model type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN bias included (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN algorithm selected (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3603" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3603" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaf02ff9a9c328099753d9244eae95c5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNDescriptor_V2</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, const int hsize, const int nlayers, miopenDropoutDescriptor_t dropoutDesc, miopenRNNInputMode_t inMode, miopenRNNDirectionMode_t direction, miopenRNNMode_t rnnMode, miopenRNNBiasMode_t biasMode, miopenRNNAlgo_t algo, miopenDataType_t dataType)</argsstring>
        <name>miopenSetRNNDescriptor_V2</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>hsize</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nlayers</declname>
        </param>
        <param>
          <type>miopenDropoutDescriptor_t</type>
          <declname>dropoutDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref></type>
          <declname>inMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref></type>
          <declname>rnnMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref></type>
          <declname>biasMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <briefdescription>
<para>Set the details of the RNN descriptor version 2. This version enables the use of dropout in rnn. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting the values of the RNN descriptor object. This function requires specific algorithm selection. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Hidden layer size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nlayers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of layers (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-initialized dropout descriptor for dropout layer in between RNN layers (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN first layer input mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN direction (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN model type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN bias included (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN algorithm selected (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3631" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3631" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gadaf0448f9d4ee351183c7e83d2b5f520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNDataSeqTensorDescriptor</definition>
        <argsstring>(miopenSeqTensorDescriptor_t seqTensorDesc, miopenDataType_t dataType, miopenRNNBaseLayout_t layout, int maxSequenceLen, int batchSize, int vectorSize, const int *sequenceLenArray, void *paddingMarker)</argsstring>
        <name>miopenSetRNNDataSeqTensorDescriptor</name>
        <param>
          <type>miopenSeqTensorDescriptor_t</type>
          <declname>seqTensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" kindref="member">miopenRNNBaseLayout_t</ref></type>
          <declname>layout</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSequenceLen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vectorSize</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>sequenceLenArray</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>paddingMarker</declname>
        </param>
        <briefdescription>
<para>Set shape of RNN seqData tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting tensor shape to be used as RNN input data</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seqTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the main supported layouts for RNN data(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence length limit within this SeqTensor(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of sequences within this SeqTensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vectorSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLenArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the length of each sequence in the SeqTensor(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paddingMarker</parametername>
</parameternamelist>
<parameterdescription>
<para>Not used, should be NULL (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3657" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3657" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga90c8af014044546749e8dfd68a074ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNDataSeqTensorDescriptor</definition>
        <argsstring>(miopenSeqTensorDescriptor_t seqTensorDesc, miopenDataType_t *dataType, miopenRNNBaseLayout_t *layout, int *maxSequenceLen, int *batchSize, int *vectorSize, int sequenceLenArrayLimit, int *sequenceLenArray, void *paddingMarker)</argsstring>
        <name>miopenGetRNNDataSeqTensorDescriptor</name>
        <param>
          <type>miopenSeqTensorDescriptor_t</type>
          <declname>seqTensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" kindref="member">miopenRNNBaseLayout_t</ref> *</type>
          <declname>layout</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>maxSequenceLen</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vectorSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sequenceLenArrayLimit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sequenceLenArray</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>paddingMarker</declname>
        </param>
        <briefdescription>
<para>Get shape of RNN seqData tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting tensor shape to be used as RNN input data</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seqTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the main supported layouts for RNN data(output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence length limit within this SeqTensor(output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of sequences within this SeqTensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vectorSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLenArrayLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit for number of elements that can be returned to user by sequenceLenArray (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLenArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the length of each sequence in the SeqTensor. This is allowed to be a NULL pointer if sequenceLenArrayLimit is 0 (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paddingMarker</parametername>
</parameternamelist>
<parameterdescription>
<para>Not used, should be NULL (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3685" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3685" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gad2f8db58662277452612e0b3381123fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNWorkspaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, size_t *numBytes)</argsstring>
        <name>miopenGetRNNWorkspaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Query the amount of memory required to execute the RNN layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the amount of memory required to run the RNN layer given an RNN descriptor and a tensor descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iteration unrolls (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3711" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3711" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga59b770093f4ab10d72126436b1d0395a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNTrainingReserveSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, size_t *numBytes)</argsstring>
        <name>miopenGetRNNTrainingReserveSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Query the amount of memory required for RNN training. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the amount of memory required to train the RNN layer given an RNN descriptor and a tensor descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iteration unrolls (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3733" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3733" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga82cf9678664959b494765e56f06f87c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNTempSpaceSizes</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, miopenSeqTensorDescriptor_t xDesc, miopenRNNFWDMode_t fwdMode, size_t *workSpaceSize, size_t *reserveSpaceSize)</argsstring>
        <name>miopenGetRNNTempSpaceSizes</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>miopenSeqTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" kindref="member">miopenRNNFWDMode_t</ref></type>
          <declname>fwdMode</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>reserveSpaceSize</declname>
        </param>
        <briefdescription>
<para>Query the amount of additional memory required for this RNN layer execution. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the size of extra buffers, depending on the layer configuration, which is determined by: RNN descriptor, isInference, and data descriptor. If isInference is True, reserve_space_size is always zero, because the reserve_space buffer is not used in Inference computation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence data tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fwdMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies in which mode the buffers will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum WorkSpace buffer size required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum ReserveSpaceSize buffer size required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3755" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3755" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga2394f4629b6da29bf2145f0e0220810c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNParamsSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, miopenTensorDescriptor_t xDesc, size_t *numBytes, miopenDataType_t dtype)</argsstring>
        <name>miopenGetRNNParamsSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
<para>Query the amount of parameter memory required for RNN training. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the amount of parameter memory required to train the RNN layer given an RNN descriptor and a tensor descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen data type enum (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3774" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3774" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gadf75eb328f82b81ddc83d4230b0c54af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNParamsDescriptor</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, miopenDataType_t dtype)</argsstring>
        <name>miopenGetRNNParamsDescriptor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
<para>Obtain a weight tensor descriptor for RNNs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function populates a weight descriptor that describes the memory layout of the weight matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Fully populated RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A previously populated tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A previously allocated tensor descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen data type enum (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3792" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3792" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga97b8a45e7925826423dd5e2795a5f8cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNInputTensorSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int seqLen, miopenTensorDescriptor_t *xDesc, size_t *numBytes)</argsstring>
        <name>miopenGetRNNInputTensorSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>seqLen</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Obtain a the size in bytes of the RNN input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines the size in bytes of the allocation needed for the input data tensor for an RNN layer. The number of bytes is derived from the array of tensor descriptors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Fully populated RNN layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seqLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iteration unrolls (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for input tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3815" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3815" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaf5d51f866c74ce07a6cc4286fa06200c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNHiddenTensorSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int seqLen, miopenTensorDescriptor_t *xDesc, size_t *numBytes)</argsstring>
        <name>miopenGetRNNHiddenTensorSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>seqLen</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Obtain a the size in bytes of the RNN hidden tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines the size in bytes of the allocation needed for the hidden tensor over all layers</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Fully populated RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seqLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iteration unrolls (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of previously populated tensor descriptors (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for input tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3833" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3833" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gab082ab70bd71d3d5a248b76bf96def6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerParamSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, const int paramID, size_t *numBytes)</argsstring>
        <name>miopenGetRNNLayerParamSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>paramID</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Gets the number of bytes of a parameter matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, paramID == 0 retrieves the weight matrix associated with the in input GEMM, while paramID == 1 retrieves the weight matrix associated with the hidden state GEMM.</para>
<para>For miopenLSTM paramID 0 to 3 refer to the weight matrices associated with the input GEMM, 4-7 are associated with matrices associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>paramID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>paramID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>paramID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU paramID 0 to 2 refer to the weight matrix offset associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>paramID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>paramID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes of the layer&apos;s parameter matrix (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3879" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3879" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga5ed3d73c243de909de9ebf58a1d3d5d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerBiasSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, const int biasID, size_t *numBytes)</argsstring>
        <name>miopenGetRNNLayerBiasSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>biasID</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Gets the number of bytes of a bias. </para>
        </briefdescription>
        <detaileddescription>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, biasID == 0 retrieves the weight matrix associated with the in input GEMM, while biasID == 1 retrieves the bias associated with the hidden state GEMM.</para>
<para>For miopenLSTM biasID 0 to 3 refer to the biases associated with the input GEMM, 4-7 are associated with biases associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>biasID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>biasID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>biasID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU biasID 0 to 2 refer to the biases associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>biasID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>biasID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes of the layer&apos;s bias (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3923" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3923" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gacd0730d483c86d3f9f047658a58f5695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerParam</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, const void *w, const int paramID, miopenTensorDescriptor_t paramDesc, void *layerParam)</argsstring>
        <name>miopenGetRNNLayerParam</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>paramID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>paramDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>layerParam</declname>
        </param>
        <briefdescription>
<para>Gets a weight matrix for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the weight matrix data for a specific layer and parameter ID and copies the data into previously allocated device memory.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, paramID == 0 retrieves the weight matrix associated with the in input GEMM, while paramID == 1 retrieves the weight matrix associated with the hidden state GEMM.</para>
<para>For miopenLSTM paramID 0 to 3 refer to the weight matrices associated with the input GEMM, 4-7 are associated with matrices associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>paramID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>paramID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>paramID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU paramID 0 to 2 refer to the weight matrix offset associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>paramID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>paramID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The output argument paramDesc is a previously created tensor descriptor that is populated to describe the memory layout of the parameter matrix. It is full packed and is used when calling to <ref refid="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" kindref="member">miopenSetRNNLayerParam()</ref></para>
<para>The argument layerParam should either be nullptr, or have device memory allocated to allow copying of the entire layer parameter matrix into it. If layerParam is nullptr then only the paramDesc is populated and returned. The size in bytes of the layer parameter matrix can be determined by using <ref refid="group___r_n_n_1gab082ab70bd71d3d5a248b76bf96def6b" kindref="member">miopenGetRNNLayerParamSize()</ref>.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1gacd0730d483c86d3f9f047658a58f5695" kindref="member">miopenGetRNNLayerParam()</ref> will return a error status miopenStatusBadParm for input paramID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory containing parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for the fully packed output parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerParam</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3987" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3987" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga4f27d46b80c043ef254fbc2caf481423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerBias</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, const void *w, const int biasID, miopenTensorDescriptor_t biasDesc, void *layerBias)</argsstring>
        <name>miopenGetRNNLayerBias</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>biasID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>layerBias</declname>
        </param>
        <briefdescription>
<para>Gets a bias for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the bias data for a specific layer and bias ID and copies the data into previously allocated device memory.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, biasID == 0 retrieves the bias associated with the in input GEMM, while biasID == 1 retrieves the bias associated with the hidden state GEMM.</para>
<para>For miopenLSTM biasID 0 to 3 refer to the biases associated with the input GEMM, 4-7 are associated with biases associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>biasID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>biasID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>biasID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU biasID 0 to 2 refer to the biases associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>biasID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>biasID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The output argument biasDesc is a previously created tensor descriptor that is populated to describe the memory layout of the bias. It is full packed and is used when calling to <ref refid="group___r_n_n_1ga1991ee70fba68f8de643c1a4aa183bf7" kindref="member">miopenSetRNNLayerBias()</ref></para>
<para>The argument layerBias should either be nullptr, or have device memory allocated to allow copying of the entire layer bias into it. If layerBias is nullptr then only the biasDesc is populated and returned. The size in bytes of the layer bias can be determined by using <ref refid="group___r_n_n_1ga5ed3d73c243de909de9ebf58a1d3d5d8" kindref="member">miopenGetRNNLayerBiasSize()</ref>.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1ga4f27d46b80c043ef254fbc2caf481423" kindref="member">miopenGetRNNLayerBias()</ref> will return a error status miopenStatusBadParm for input biasID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory containing parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the bias tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4054" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4054" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga2c445114d21ef806585c4de8fe777b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerParamOffset</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, const int paramID, miopenTensorDescriptor_t paramDesc, size_t *layerParamOffset)</argsstring>
        <name>miopenGetRNNLayerParamOffset</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>paramID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>paramDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>layerParamOffset</declname>
        </param>
        <briefdescription>
<para>Gets an index offset for a specific weight matrix for a layer in the RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the index offset for a weight matrix in a layer.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, paramID == 0 retrieves the weight matrix offset associated with the in input GEMM, while paramID == 1 retrieves the weight matrix offset associated with the hidden state GEMM.</para>
<para>For miopenLSTM paramID 0 to 3 refer to the weight matrix offsets associated with the input GEMM, 4-7 are associated with matrix offset associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>paramID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>paramID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>paramID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU paramID 0 to 2 refer to the weight matrix offset associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>paramID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>paramID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The output argument paramDesc is a previously created tensor descriptor that is populated to describe the memory layout of the parameter matrix. It is full packed and is used when calling to <ref refid="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" kindref="member">miopenSetRNNLayerParam()</ref>.</para>
<para>The argument layerParamOffset should either be nullptr, or an address to place the offset. If layerParamOffset is nullptr then only the paramDesc is populated and returned.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1ga2c445114d21ef806585c4de8fe777b70" kindref="member">miopenGetRNNLayerParamOffset()</ref> will return a error status miopenStatusBadParm for input paramID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for the fully packed output parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerParamOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Location for the parameter offset (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4118" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4118" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga24389ba4b784d7211f06b6fe4c94c8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerBiasOffset</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, const int biasID, miopenTensorDescriptor_t biasDesc, size_t *layerBiasOffset)</argsstring>
        <name>miopenGetRNNLayerBiasOffset</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>biasID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>layerBiasOffset</declname>
        </param>
        <briefdescription>
<para>Gets a bias index offset for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the bias index offset for a specific layer and bias ID.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, biasID == 0 retrieves the bias associated with the in input GEMM, while biasID == 1 retrieves the weight matrix associated with the hidden state GEMM.</para>
<para>For miopenLSTM biasID 0 to 3 refer to the bias offset associated with the input GEMM, 4-7 are the bias offsets associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>biasID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>biasID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>biasID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU biasID 0 to 2 refer to the biases associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>biasID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>biasID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The output argument biasDesc is a previously created tensor descriptor that is populated to describe the memory layout of the bias. It is full packed and is used when calling to <ref refid="group___r_n_n_1ga1991ee70fba68f8de643c1a4aa183bf7" kindref="member">miopenSetRNNLayerBias()</ref></para>
<para>The argument layerBiasOffset should either be nullptr, or point to an output address. If layerBias is nullptr then only the biasDesc is populated and returned.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1ga24389ba4b784d7211f06b6fe4c94c8d7" kindref="member">miopenGetRNNLayerBiasOffset()</ref> will return a error status miopenStatusBadParm for input biasID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerBiasOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the bias tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4175" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4175" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNLayerParam</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, void *w, const int paramID, miopenTensorDescriptor_t paramDesc, const void *layerParam)</argsstring>
        <name>miopenSetRNNLayerParam</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>paramID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>paramDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>layerParam</declname>
        </param>
        <briefdescription>
<para>Sets a weight matrix for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the weight matrix data for a specific layer and parameter ID.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, paramID == 0 sets the weight matrix associated with the in input GEMM, while paramID == 1 sets the weight matrix associated with the hidden state GEMM.</para>
<para>For miopenLSTM paramID 0 to 3 refer to the weight matrices associated with the input GEMM, 4-7 are associated with matrices associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>paramID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>paramID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>paramID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU paramID 0 to 2 refer to the weight matrix offset associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>paramID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>paramID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The input argument paramDesc is a previously populated tensor descriptor typically by first calling <ref refid="group___r_n_n_1gacd0730d483c86d3f9f047658a58f5695" kindref="member">miopenGetRNNLayerParam()</ref>.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" kindref="member">miopenSetRNNLayerParam()</ref> will return a error status miopenStatusBadParm for input paramID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory containing parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerParam</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4234" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4234" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga1991ee70fba68f8de643c1a4aa183bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNLayerBias</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, void *w, const int biasID, miopenTensorDescriptor_t biasDesc, const void *layerBias)</argsstring>
        <name>miopenSetRNNLayerBias</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>biasID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>layerBias</declname>
        </param>
        <briefdescription>
<para>Sets a bias for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the bias data for a specific layer and bias ID.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, biasID == 0 retrieves the weight matrix associated with the in input GEMM, while biasID == 1 retrieves the bias associated with the hidden state GEMM.</para>
<para>For miopenLSTM biasID 0 to 3 refer to the biases associated with the input GEMM, 4-7 are associated with the biases associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>biasID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>biasID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>biasID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU biasID 0 to 2 refer to the biases associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>biasID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>biasID 2 and 5 are for the new new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The input argument biasDesc is a previously populated tensor descriptor typically by first calling miopenGetRNNLayeBias().</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case miopenSetRNNLayerBias will return a error status miopenStatusBadParm for input biasID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to the bias tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory containing bias tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal bias tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the bias tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the bias tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4294" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4294" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaf9f746d7c62bfbf62ff8663e54360771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNPaddingMode</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, miopenRNNPaddingMode_t paddingMode)</argsstring>
        <name>miopenSetRNNPaddingMode</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" kindref="member">miopenRNNPaddingMode_t</ref></type>
          <declname>paddingMode</declname>
        </param>
        <briefdescription>
<para>Sets a bias for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function changes padidng mode at previously created and initialized RNN descriptor. This function must be called before using <ref refid="group___r_n_n_1gad2f8db58662277452612e0b3381123fe" kindref="member">miopenGetRNNWorkspaceSize()</ref> and <ref refid="group___r_n_n_1ga59b770093f4ab10d72126436b1d0395a" kindref="member">miopenGetRNNTrainingReserveSize()</ref> functions. By default, not padded data is expected at the RNN input/output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paddingMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN input/output data padding mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4315" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4315" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga86fc04d775ab501c0ab829703b2cf738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNPaddingMode</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, miopenRNNPaddingMode_t *paddingMode)</argsstring>
        <name>miopenGetRNNPaddingMode</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" kindref="member">miopenRNNPaddingMode_t</ref> *</type>
          <declname>paddingMode</declname>
        </param>
        <briefdescription>
<para>This function retrieves the RNN padding mode from the RNN descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paddingMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RNN padding mode (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4325" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4325" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga8d5b72681258d9cd7f50ba03ab6215e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNForward</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, miopenRNNFWDMode_t fwdMode, const miopenSeqTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t hDesc, const void *hx, void *hy, const miopenTensorDescriptor_t cDesc, const void *cx, void *cy, const miopenSeqTensorDescriptor_t yDesc, void *y, const void *w, size_t weightSpaceSize, void *workSpace, size_t workSpaceNumBytes, void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" kindref="member">miopenRNNFWDMode_t</ref></type>
          <declname>fwdMode</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>weightSpaceSize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute forward training for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the forward training / inference pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fwdMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies in which mode the buffers will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer output tensor. If hy is NULL, then the final hidden state will not be saved. (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If hy is NULL, then the final cell state will not be saved. (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to output tensor (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the weights tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for hidden states used durning training (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4378" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4378" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga44ac8be6fceea4aa1e755958960be862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNBackwardSeqData</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const miopenSeqTensorDescriptor_t yDesc, const void *y, const void *dy, const miopenTensorDescriptor_t hDesc, const void *hx, const void *dhy, void *dhx, const miopenTensorDescriptor_t cDesc, const void *cx, const void *dcy, void *dcx, const miopenSeqTensorDescriptor_t xDesc, void *dx, const void *w, size_t weightSpaceSize, void *workSpace, size_t workSpaceNumBytes, void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNBackwardSeqData</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dcy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dcx</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>weightSpaceSize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute backward data for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the backward data pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An output tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the delta hidden layer output tensor. If dhx is NULL the hidden gradient will not ouput. (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A input cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If dcy is NULL, then the initial delta cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If dcx is NULL the cell gradient will not ouput. (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the weights tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4447" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4447" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga1ff33e5279bfca3ed08d59bfa8069a9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNBackwardWeightsSeqTensor</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const miopenSeqTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t hDesc, const void *hx, const miopenSeqTensorDescriptor_t yDesc, const void *y, void *dw, size_t weightSpaceSize, void *workSpace, size_t workSpaceNumBytes, const void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNBackwardWeightsSeqTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>weightSpaceSize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute backward weights for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the backward weights pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An output tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output tensor (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dw</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the weights tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4503" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4503" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gae7844191464b02e0343af135904413ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNForwardTraining</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, const void *x, const miopenTensorDescriptor_t hxDesc, const void *hx, const miopenTensorDescriptor_t cxDesc, const void *cx, const miopenTensorDescriptor_t wDesc, const void *w, const miopenTensorDescriptor_t *yDesc, void *y, const miopenTensorDescriptor_t hyDesc, void *hy, const miopenTensorDescriptor_t cyDesc, void *cy, void *workSpace, size_t workSpaceNumBytes, void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNForwardTraining</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hyDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cyDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute forward training for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the forward training pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporal iterations to unroll (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A weights tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to output tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer output tensor. If hy is NULL, then the final hidden state will not be saved. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If hy is NULL, then the final cell state will not be saved. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4575" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4575" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga6ac03fa91d038feb1206b4f8a770af97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNBackwardData</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *yDesc, const void *y, const miopenTensorDescriptor_t *dyDesc, const void *dy, const miopenTensorDescriptor_t dhyDesc, const void *dhy, const miopenTensorDescriptor_t dcyDesc, const void *dcy, const miopenTensorDescriptor_t wDesc, const void *w, const miopenTensorDescriptor_t hxDesc, const void *hx, const miopenTensorDescriptor_t cxDesc, const void *cx, const miopenTensorDescriptor_t *dxDesc, void *dx, const miopenTensorDescriptor_t dhxDesc, void *dhx, const miopenTensorDescriptor_t dcxDesc, void *dcx, void *workSpace, size_t workSpaceNumBytes, void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNBackwardData</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dhyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dcyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dcy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dhxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dcxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dcx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute backward data for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the backward data pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporal iterations to unroll (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If dcy is NULL, then the initial delta cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A weights tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A input cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the delta hidden layer output tensor. If dhx is NULL the hidden gradient will not ouput. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If dcx is NULL the cell gradient will not ouput. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4669" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4669" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga55040b58e6820d21f58957d356715739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNBackwardWeights</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, const void *x, const miopenTensorDescriptor_t hxDesc, const void *hx, const miopenTensorDescriptor_t *yDesc, const void *y, const miopenTensorDescriptor_t dwDesc, void *dw, void *workSpace, size_t workSpaceNumBytes, const void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNBackwardWeights</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute backward weights for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the backward weights pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporal iterations to unroll (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A weights tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dw</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4733" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4733" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gafd8f2c43d92a7baf7de2e431bbcf7199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNForwardInference</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, const void *x, const miopenTensorDescriptor_t hxDesc, const void *hx, const miopenTensorDescriptor_t cxDesc, const void *cx, const miopenTensorDescriptor_t wDesc, const void *w, const miopenTensorDescriptor_t *yDesc, void *y, const miopenTensorDescriptor_t hyDesc, void *hy, const miopenTensorDescriptor_t cyDesc, void *cy, void *workSpace, size_t workSpaceNumBytes)</argsstring>
        <name>miopenRNNForwardInference</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hyDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cyDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute forward inference for RNN layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the forward inference pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporal iterations to unroll (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A weights tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to output tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer output tensor. If hy is NULL, then the final hidden state will not be saved. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A output cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If cy is NULL, then the final cell state will not be saved. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4804" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4804" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___loss_function_1ga514750d47eedc6069c1c6fa5aa696bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateCTCLossDescriptor</definition>
        <argsstring>(miopenCTCLossDescriptor_t *ctcLossDesc)</argsstring>
        <name>miopenCreateCTCLossDescriptor</name>
        <param>
          <type>miopenCTCLossDescriptor_t *</type>
          <declname>ctcLossDesc</declname>
        </param>
        <briefdescription>
<para>Create a CTC loss function Descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>API for creating an uninitialized CTC loss function descriptor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctcLossDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the CTC loss function descriptor type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4846" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4846" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___loss_function_1ga50fa7cf5fca14cc1b9181d004b90e10f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetCTCLossDescriptor</definition>
        <argsstring>(miopenCTCLossDescriptor_t ctcLossDesc, miopenDataType_t *dataType, int *blank_label_id, bool *apply_softmax_layer)</argsstring>
        <name>miopenGetCTCLossDescriptor</name>
        <param>
          <type>miopenCTCLossDescriptor_t</type>
          <declname>ctcLossDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>blank_label_id</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>apply_softmax_layer</declname>
        </param>
        <briefdescription>
<para>Retrieves a CTC loss function descriptor&apos;s details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctcLossDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>CTC loss function descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type used in this CTC loss operation, only fp32 currently supported (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blank_label_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User defined index for blank label (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>apply_softmax_layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to toggle input layer property (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4857" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4857" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___loss_function_1gae3a6a39b1a961c9342674fa62342393a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyCTCLossDescriptor</definition>
        <argsstring>(miopenCTCLossDescriptor_t ctcLossDesc)</argsstring>
        <name>miopenDestroyCTCLossDescriptor</name>
        <param>
          <type>miopenCTCLossDescriptor_t</type>
          <declname>ctcLossDesc</declname>
        </param>
        <briefdescription>
<para>Destroys a CTC loss function descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctcLossDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>CTC loss function descriptor type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4867" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4867" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___loss_function_1ga4cf2c0ac1a30f13c3503be5a98cdccd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetCTCLossDescriptor</definition>
        <argsstring>(miopenCTCLossDescriptor_t ctcLossDesc, miopenDataType_t dataType, const int blank_label_id, bool apply_softmax_layer)</argsstring>
        <name>miopenSetCTCLossDescriptor</name>
        <param>
          <type>miopenCTCLossDescriptor_t</type>
          <declname>ctcLossDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>blank_label_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>apply_softmax_layer</declname>
        </param>
        <briefdescription>
<para>Set the details of a CTC loss function descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctcLossDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>CTC loss function descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type used in this CTC loss operation, only fp32 currently supported (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blank_label_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User defined index for blank label, default 0 (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>apply_softmax_layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to toggle input layer property (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4878" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4878" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___loss_function_1ga0b277cfacf38a158bf753d8edc609dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetCTCLossWorkspaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t probsDesc, const miopenTensorDescriptor_t gradientsDesc, const int *labels, const int *labelLengths, const int *inputLengths, miopenCTCLossAlgo_t algo, const miopenCTCLossDescriptor_t ctcLossDesc, size_t *workSpaceSize)</argsstring>
        <name>miopenGetCTCLossWorkspaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>probsDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>gradientsDesc</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>labelLengths</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>inputLengths</declname>
        </param>
        <param>
          <type><ref refid="group___loss_function_1ga3a791761ce6a39c117116a1f0075b2c6" kindref="member">miopenCTCLossAlgo_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type>const miopenCTCLossDescriptor_t</type>
          <declname>ctcLossDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Query the amount of memory required to execute miopenCTCLoss. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the amount of memory required to run the CTC loss function given a CTC loss function descriptor with the specified algorithm. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probsDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for probabilities (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradientsDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for gradients (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the flattened labels list (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labelLengths</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the lengths list for &quot;labels&quot; (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputLengths</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list of the time steps in each batch (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>CTC loss algorithm selected (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctcLossDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>CTC loss function descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes of workspace required for CTC loss operation with selected algorithm (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4900" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4900" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___loss_function_1ga4d8ec531689521616491dad2e3ae7c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCTCLoss</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t probsDesc, const void *probs, const int *labels, const int *labelLengths, const int *inputLengths, void *losses, const miopenTensorDescriptor_t gradientsDesc, void *gradients, miopenCTCLossAlgo_t algo, const miopenCTCLossDescriptor_t ctcLossDesc, void *workSpace, size_t workSpaceSize)</argsstring>
        <name>miopenCTCLoss</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>probsDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>probs</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>labelLengths</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>inputLengths</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>losses</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>gradientsDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>gradients</declname>
        </param>
        <param>
          <type><ref refid="group___loss_function_1ga3a791761ce6a39c117116a1f0075b2c6" kindref="member">miopenCTCLossAlgo_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type>const miopenCTCLossDescriptor_t</type>
          <declname>ctcLossDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceSize</declname>
        </param>
        <briefdescription>
<para>Execute forward inference for CTCLoss layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the forward inference pass on a CTCLoss. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probsDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for probabilities (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the probabilities tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the flattened labels list (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labelLengths</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the lengths list for &quot;labels&quot; (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputLengths</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list of the time steps in each batch (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>losses</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the computed losses of CTC (Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradientsDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for gradients (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradients</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the computed gradients of CTC (Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>CTC loss algorithm selected (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctcLossDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>CTC loss function descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for execute CTC loss operation (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes of workspace required for CTC loss operation with selected algorithm (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4929" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4929" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dropout_1gabd41a45a7c2f7785eb124080071e9e69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateDropoutDescriptor</definition>
        <argsstring>(miopenDropoutDescriptor_t *dropoutDesc)</argsstring>
        <name>miopenCreateDropoutDescriptor</name>
        <param>
          <type>miopenDropoutDescriptor_t *</type>
          <declname>dropoutDesc</declname>
        </param>
        <briefdescription>
<para>Creates the dropout descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a dropout descriptor type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4965" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4965" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dropout_1ga053288f154f85d8695f3825853d7b44e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyDropoutDescriptor</definition>
        <argsstring>(miopenDropoutDescriptor_t dropoutDesc)</argsstring>
        <name>miopenDestroyDropoutDescriptor</name>
        <param>
          <type>miopenDropoutDescriptor_t</type>
          <declname>dropoutDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the dropout descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Dropout descriptor type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4972" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4972" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dropout_1ga7a1ea2d1245dd07eaf7ec2c59e19e842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDropoutGetReserveSpaceSize</definition>
        <argsstring>(const miopenTensorDescriptor_t xDesc, size_t *reserveSpaceSizeInBytes)</argsstring>
        <name>miopenDropoutGetReserveSpaceSize</name>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>reserveSpaceSizeInBytes</declname>
        </param>
        <briefdescription>
<para>Query the amount of memory required to run dropout. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the amount of memory required to run dropout. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes of reservespace required for executing dropout (Output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4982" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4982" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dropout_1ga323bbd149e25ef334cb4b52ef4e57a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDropoutGetStatesSize</definition>
        <argsstring>(miopenHandle_t handle, size_t *stateSizeInBytes)</argsstring>
        <name>miopenDropoutGetStatesSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>stateSizeInBytes</declname>
        </param>
        <briefdescription>
<para>Query the amount of memory required to store the states of the random number generators. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the amount of memory required to store the states of the random number generators used by miopenDropoutForward. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required to store random generator states (Output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4993" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4993" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dropout_1gaabb82ee87a6e073d3acfc95b242fdbb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetDropoutDescriptor</definition>
        <argsstring>(miopenDropoutDescriptor_t dropoutDesc, miopenHandle_t handle, float *dropout, void **states, unsigned long long *seed, bool *use_mask, bool *state_evo, miopenRNGType_t *rng_mode)</argsstring>
        <name>miopenGetDropoutDescriptor</name>
        <param>
          <type>miopenDropoutDescriptor_t</type>
          <declname>dropoutDesc</declname>
        </param>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dropout</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>states</declname>
        </param>
        <param>
          <type>unsigned long long *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>use_mask</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>state_evo</declname>
        </param>
        <param>
          <type><ref refid="group__dropout_1ga283a437b36e9ed35ce7b80490de4d15d" kindref="member">miopenRNGType_t</ref> *</type>
          <declname>rng_mode</declname>
        </param>
        <briefdescription>
<para>Get the details of the dropout descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for querying the dropout descriptor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Dropout layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dropout</parametername>
</parameternamelist>
<parameterdescription>
<para>The probability by which the input is set to 0 in the dropout layer (Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>states</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory that holds random number generator states (Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed used to initialize random number generator states (Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag indicating whether to use a saved mask (an existing or user-defined dropout layout) in reserveSpace (Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_evo</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag indicating whether to adopt state evolution strategy to update the PRNG states by the end of each implementation (Output placeholder, currently not enabled) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator used to generate parallel random number sequences (Output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5012" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5012" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dropout_1gad0b1c52d5641f0fb09f6baf17b7d051f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRestoreDropoutDescriptor</definition>
        <argsstring>(miopenDropoutDescriptor_t dropoutDesc, miopenHandle_t handle, float dropout, void *states, size_t stateSizeInBytes, unsigned long long seed, bool use_mask, bool state_evo, miopenRNGType_t rng_mode)</argsstring>
        <name>miopenRestoreDropoutDescriptor</name>
        <param>
          <type>miopenDropoutDescriptor_t</type>
          <declname>dropoutDesc</declname>
        </param>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dropout</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>states</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stateSizeInBytes</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>state_evo</declname>
        </param>
        <param>
          <type><ref refid="group__dropout_1ga283a437b36e9ed35ce7b80490de4d15d" kindref="member">miopenRNGType_t</ref></type>
          <declname>rng_mode</declname>
        </param>
        <briefdescription>
<para>Restore the dropout descriptor to a saved state. </para>
        </briefdescription>
        <detaileddescription>
<para>This function restores the state of dropout descriptor using the address of a state buffer with previously saved PRNG state pattern, without launching the expensive PRNG initialization process.</para>
<para>Interface for restoring the dropout descriptor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Dropout layer descriptor (input/Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dropout</parametername>
</parameternamelist>
<parameterdescription>
<para>The probability by which the input is set to 0 in the dropout layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>states</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory that holds random number generator states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes holding random generator states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed used to initialize random number generator states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag indicating whether to use a saved mask (an existing or user-defined dropout layout) in reserveSpace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_evo</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag indicating whether to adopt state evolution strategy to update the PRNG states by the end of each implementation (input placeholder, currently not enabled) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator used to generate parallel random number sequences (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5043" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5043" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dropout_1gae60f56b35fd49b562141d8e00b1a20e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetDropoutDescriptor</definition>
        <argsstring>(miopenDropoutDescriptor_t dropoutDesc, miopenHandle_t handle, float dropout, void *states, size_t stateSizeInBytes, unsigned long long seed, bool use_mask, bool state_evo, miopenRNGType_t rng_mode)</argsstring>
        <name>miopenSetDropoutDescriptor</name>
        <param>
          <type>miopenDropoutDescriptor_t</type>
          <declname>dropoutDesc</declname>
        </param>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dropout</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>states</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stateSizeInBytes</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>state_evo</declname>
        </param>
        <param>
          <type><ref refid="group__dropout_1ga283a437b36e9ed35ce7b80490de4d15d" kindref="member">miopenRNGType_t</ref></type>
          <declname>rng_mode</declname>
        </param>
        <briefdescription>
<para>Initialize the dropout descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting up the dropout descriptor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Dropout layer descriptor (input/Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dropout</parametername>
</parameternamelist>
<parameterdescription>
<para>The probability by which the input is set to 0 in the dropout layer (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>states</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory that holds random number generator states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes provided for random generator states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed used to initialize random number generator states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag indicating whether to use a saved mask (an existing or user-defined dropout layout) in reserveSpace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_evo</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag indicating whether to adopt state evolution strategy to update the PRNG states by the end of each implementation (input placeholder, currently not enabled) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator used to generate parallel random number sequences (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5072" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5072" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dropout_1gaa695ad520fe252a47102bb49c56b52a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDropoutForward</definition>
        <argsstring>(miopenHandle_t handle, const miopenDropoutDescriptor_t dropoutDesc, const miopenTensorDescriptor_t noise_shape, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t yDesc, void *y, void *reserveSpace, size_t reserveSpaceSizeInBytes)</argsstring>
        <name>miopenDropoutForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenDropoutDescriptor_t</type>
          <declname>dropoutDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>noise_shape</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceSizeInBytes</declname>
        </param>
        <briefdescription>
<para>Execute forward dropout operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the forward pass on a Dropout. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Dropout layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for noise shape (input placeholder, currently not enabled) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for executing forward dropout, expecting reserveSpace unchanged before next call of miopenDropoutBackward (Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes of reservespace required for executing forward dropout (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5099" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5099" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__dropout_1gac0a6cf12640c7a959a27412b8304954b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDropoutBackward</definition>
        <argsstring>(miopenHandle_t handle, const miopenDropoutDescriptor_t dropoutDesc, const miopenTensorDescriptor_t noise_shape, const miopenTensorDescriptor_t dyDesc, const void *dy, const miopenTensorDescriptor_t dxDesc, void *dx, void *reserveSpace, size_t reserveSpaceSizeInBytes)</argsstring>
        <name>miopenDropoutBackward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenDropoutDescriptor_t</type>
          <declname>dropoutDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>noise_shape</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceSizeInBytes</declname>
        </param>
        <briefdescription>
<para>Execute backward dropout operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the backward pass on a Dropout. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Dropout layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for noise shape (input placeholder, currently not enabled) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dy (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data delta tensor dx (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Data delta tensor dx (Output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for executing backward dropout, expecting reserveSpace unchanged after previous call of miopenDropoutForward (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes of reservespace required for executing backward dropout (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5126" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5126" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___tensor_reduce_1ga5f77b41324cbed4284d00b2e80140c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateReduceTensorDescriptor</definition>
        <argsstring>(miopenReduceTensorDescriptor_t *reduceTensorDesc)</argsstring>
        <name>miopenCreateReduceTensorDescriptor</name>
        <param>
          <type>miopenReduceTensorDescriptor_t *</type>
          <declname>reduceTensorDesc</declname>
        </param>
        <briefdescription>
<para>Creates the ReduceTensor descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reduceTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a ReduceTensor descriptor type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5151" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5151" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___tensor_reduce_1gac17bc3081a6e585c993d4c26e67f5c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyReduceTensorDescriptor</definition>
        <argsstring>(miopenReduceTensorDescriptor_t reduceTensorDesc)</argsstring>
        <name>miopenDestroyReduceTensorDescriptor</name>
        <param>
          <type>miopenReduceTensorDescriptor_t</type>
          <declname>reduceTensorDesc</declname>
        </param>
        <briefdescription>
<para>Destroy the ReduceTensor descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reduceTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>ReduceTensor descriptor type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5159" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5159" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___tensor_reduce_1ga5dfa99bd883f588f29d1b927917e6ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetReduceTensorDescriptor</definition>
        <argsstring>(miopenReduceTensorDescriptor_t reduceTensorDesc, miopenReduceTensorOp_t reduceTensorOp, miopenDataType_t reduceTensorCompType, miopenNanPropagation_t reduceTensorNanOpt, miopenReduceTensorIndices_t reduceTensorIndices, miopenIndicesType_t reduceTensorIndicesType)</argsstring>
        <name>miopenSetReduceTensorDescriptor</name>
        <param>
          <type>miopenReduceTensorDescriptor_t</type>
          <declname>reduceTensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddd" kindref="member">miopenReduceTensorOp_t</ref></type>
          <declname>reduceTensorOp</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>reduceTensorCompType</declname>
        </param>
        <param>
          <type><ref refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89" kindref="member">miopenNanPropagation_t</ref></type>
          <declname>reduceTensorNanOpt</declname>
        </param>
        <param>
          <type><ref refid="group___tensor_reduce_1ga4dd527c6b506c34ec06d641551d78b7c" kindref="member">miopenReduceTensorIndices_t</ref></type>
          <declname>reduceTensorIndices</declname>
        </param>
        <param>
          <type><ref refid="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82b" kindref="member">miopenIndicesType_t</ref></type>
          <declname>reduceTensorIndicesType</declname>
        </param>
        <briefdescription>
<para>Initialize a ReduceTensor descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reduceTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ReduceTensor descriptor object (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Enumerant specifying the operation used by ReduceTensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorCompType</parametername>
</parameternamelist>
<parameterdescription>
<para>Enumerant specifying the data type used with ReduceTensor operation (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorNanOpt</parametername>
</parameternamelist>
<parameterdescription>
<para>Enumerant specifying the Nan number propagation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Enumerant specifying the indices modes used by ReduceTensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorIndicesType</parametername>
</parameternamelist>
<parameterdescription>
<para>Enumerant specifying the data type of the indices (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5174" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5174" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___tensor_reduce_1gafd5a88ef7c4bc12f0cb57e8ea20365d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetReduceTensorDescriptor</definition>
        <argsstring>(const miopenReduceTensorDescriptor_t reduceTensorDesc, miopenReduceTensorOp_t *reduceTensorOp, miopenDataType_t *reduceTensorCompType, miopenNanPropagation_t *reduceTensorNanOpt, miopenReduceTensorIndices_t *reduceTensorIndices, miopenIndicesType_t *reduceTensorIndicesType)</argsstring>
        <name>miopenGetReduceTensorDescriptor</name>
        <param>
          <type>const miopenReduceTensorDescriptor_t</type>
          <declname>reduceTensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddd" kindref="member">miopenReduceTensorOp_t</ref> *</type>
          <declname>reduceTensorOp</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>reduceTensorCompType</declname>
        </param>
        <param>
          <type><ref refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89" kindref="member">miopenNanPropagation_t</ref> *</type>
          <declname>reduceTensorNanOpt</declname>
        </param>
        <param>
          <type><ref refid="group___tensor_reduce_1ga4dd527c6b506c34ec06d641551d78b7c" kindref="member">miopenReduceTensorIndices_t</ref> *</type>
          <declname>reduceTensorIndices</declname>
        </param>
        <param>
          <type><ref refid="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82b" kindref="member">miopenIndicesType_t</ref> *</type>
          <declname>reduceTensorIndicesType</declname>
        </param>
        <briefdescription>
<para>Query a ReduceTensor descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reduceTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ReduceTensor descriptor object (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to enumerant specifying the operation used by ReduceTensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorCompType</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to enumerant specifying the data type used with ReduceTensor operation (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorNanOpt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to enumerant specifying the Nan number propagation mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to enumerant specifying the indices modes used by ReduceTensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorIndicesType</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to enumerant specifying the data type of the indices (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5197" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5197" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___tensor_reduce_1gaad36391f9ef26c3404b57d6881a45341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetReductionIndicesSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenReduceTensorDescriptor_t reduceTensorDesc, const miopenTensorDescriptor_t aDesc, const miopenTensorDescriptor_t cDesc, size_t *sizeInBytes)</argsstring>
        <name>miopenGetReductionIndicesSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenReduceTensorDescriptor_t</type>
          <declname>reduceTensorDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>aDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sizeInBytes</declname>
        </param>
        <briefdescription>
<para>Helper function to query the minimum index space size required by the ReduceTensor call. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen Handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ReduceTensor descriptor object (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to return the minimum index space size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5214" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5214" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___tensor_reduce_1gae6168e1d701ab82cb44fed031c93d699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetReductionWorkspaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenReduceTensorDescriptor_t reduceTensorDesc, const miopenTensorDescriptor_t aDesc, const miopenTensorDescriptor_t cDesc, size_t *sizeInBytes)</argsstring>
        <name>miopenGetReductionWorkspaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenReduceTensorDescriptor_t</type>
          <declname>reduceTensorDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>aDesc</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sizeInBytes</declname>
        </param>
        <briefdescription>
<para>Helper function to query the minimum workspace size required by the ReduceTensor call. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen Handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ReduceTensor descriptor object (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to return the minimum workspace size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5230" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5230" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___tensor_reduce_1gaac1654ff051edc15a3bc17f99bf96736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenReduceTensor</definition>
        <argsstring>(miopenHandle_t handle, const miopenReduceTensorDescriptor_t reduceTensorDesc, void *indices, size_t indicesSizeInBytes, void *workspace, size_t workspaceSizeInBytes, const void *alpha, const miopenTensorDescriptor_t aDesc, const void *A, const void *beta, const miopenTensorDescriptor_t cDesc, void *C)</argsstring>
        <name>miopenReduceTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenReduceTensorDescriptor_t</type>
          <declname>reduceTensorDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>indicesSizeInBytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workspace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workspaceSizeInBytes</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>aDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>TensorReduce function doing reduction on tensor A by implementing C = alpha * reduceOp(A) </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>beta * C</para>
</listitem></itemizedlist>
</para>
<para>The length of each dimension of output tensor C must match the length of the corresponding dimension of input tensor A or must be equal to 1. The dimensions with length equal to 1 indicate the dimensions of A to be reduced.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen Handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduceTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ReduceTensor descriptor object (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the allocated indices data space (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indicesSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the allocated indices data space (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the allocated workspace data (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspaceSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the allocated workspace data (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to scale factor for data in input tensor A (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the tensor descriptor for input tensor A (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data of input tensor A (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to scale factor for data in output tensor C (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the tensor descriptor for output tensor C (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data of output tensor C (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5260" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5260" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga7bd14eca1cfc4b80b3099365fd341c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenProblem)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenProblem</type>
        </param>
        <briefdescription>
<para>Describes a problem for different miopen operations. </para>
        </briefdescription>
        <detaileddescription>
<para>For now, this is only used for convolution, but could be used for other operators in the future(such as GEMM, Pooling, etc) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5287" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5287" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gaeb7ab171928f07c4fd02a96b23c3cd02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateConvProblem</definition>
        <argsstring>(miopenProblem_t *problem, miopenConvolutionDescriptor_t operatorDesc, miopenProblemDirection_t direction)</argsstring>
        <name>miopenCreateConvProblem</name>
        <param>
          <type>miopenProblem_t *</type>
          <declname>problem</declname>
        </param>
        <param>
          <type>miopenConvolutionDescriptor_t</type>
          <declname>operatorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__find2_1gab7565f4a33ed5b4f7fa1793a7dad6337" kindref="member">miopenProblemDirection_t</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Initializes a problem object describing a convolution operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>problem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the problem to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operatorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the operator to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction of the operation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5335" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5335" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gadd378dce1c7c8686c492decaada8a8bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyProblem</definition>
        <argsstring>(miopenProblem_t problem)</argsstring>
        <name>miopenDestroyProblem</name>
        <param>
          <type>miopenProblem_t</type>
          <declname>problem</declname>
        </param>
        <briefdescription>
<para>Destroys a problem object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>problem</parametername>
</parameternamelist>
<parameterdescription>
<para>Problem to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5344" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5344" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gafbaf96e05f4c8ff0ab0b5081ec909cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetProblemTensorDescriptor</definition>
        <argsstring>(miopenProblem_t problem, miopenTensorArgumentId_t id, const miopenTensorDescriptor_t descriptor)</argsstring>
        <name>miopenSetProblemTensorDescriptor</name>
        <param>
          <type>miopenProblem_t</type>
          <declname>problem</declname>
        </param>
        <param>
          <type><ref refid="group__find2_1ga9aadaf9e83bdc5303cfb58955514502c" kindref="member">miopenTensorArgumentId_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>descriptor</declname>
        </param>
        <briefdescription>
<para>Sets a tensor descriptor for the specified argument. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>problem</parametername>
</parameternamelist>
<parameterdescription>
<para>Problem to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the argument for the descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5354" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5354" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga9d8376fb648ff974f91757f882fd665f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenFindOptions)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenFindOptions</type>
        </param>
        <briefdescription>
<para>The miopenFindOptions allows the user to configure how find will be used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5360" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5360" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gae336156fdf21e987155101879d78cb75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateFindOptions</definition>
        <argsstring>(miopenFindOptions_t *options)</argsstring>
        <name>miopenCreateFindOptions</name>
        <param>
          <type>miopenFindOptions_t *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Initializes miopenFindOptions object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to options object to initialze </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5367" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5367" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga860acc71b6724dbbefbad2006e3c9248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyFindOptions</definition>
        <argsstring>(miopenFindOptions_t options)</argsstring>
        <name>miopenDestroyFindOptions</name>
        <param>
          <type>miopenFindOptions_t</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Destroys miopenFindOptions object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Options object to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5374" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5374" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gaa3dee344f811055f5c95dc88cd18abd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetFindOptionTuning</definition>
        <argsstring>(miopenFindOptions_t options, int value)</argsstring>
        <name>miopenSetFindOptionTuning</name>
        <param>
          <type>miopenFindOptions_t</type>
          <declname>options</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the tuning find option. Default value is zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Options object to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of zero means no tuning, value of one means tuning enabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5382" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5382" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gaaba2c9d169a0b79ebbbc15a3ac573a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetFindOptionResultsOrder</definition>
        <argsstring>(miopenFindOptions_t options, miopenFindResultsOrder_t value)</argsstring>
        <name>miopenSetFindOptionResultsOrder</name>
        <param>
          <type>miopenFindOptions_t</type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="group__find2_1ga10ba204b05e13c25e81b70abd6b3cd69" kindref="member">miopenFindResultsOrder_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the results order find option. Default value is miopenFindResultsOrderByTime. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Options object to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies what order should find results have </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5390" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5390" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga7237650148d17d93cc357327bb363893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetFindOptionWorkspaceLimit</definition>
        <argsstring>(miopenFindOptions_t options, size_t value)</argsstring>
        <name>miopenSetFindOptionWorkspaceLimit</name>
        <param>
          <type>miopenFindOptions_t</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the workspace limit find option. Default value is maximum of size_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Options object to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the workspace limit for find call. All solvers exceeding the limit would be ignored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5400" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5400" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gad1654e888fff200be7639bf16bdcbc3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetFindOptionPreallocatedWorkspace</definition>
        <argsstring>(miopenFindOptions_t options, void *buffer, size_t size)</argsstring>
        <name>miopenSetFindOptionPreallocatedWorkspace</name>
        <param>
          <type>miopenFindOptions_t</type>
          <declname>options</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Attaches the preallocated workspace to find options. Allocated by the library by default. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Options object to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the workspace for find call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the size of the buffer passed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5410" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5410" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga7265f2f86c90158c3c9bafc516908214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetFindOptionPreallocatedTensor</definition>
        <argsstring>(miopenFindOptions_t options, miopenTensorArgumentId_t id, void *buffer)</argsstring>
        <name>miopenSetFindOptionPreallocatedTensor</name>
        <param>
          <type>miopenFindOptions_t</type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="group__find2_1ga9aadaf9e83bdc5303cfb58955514502c" kindref="member">miopenTensorArgumentId_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Attaches a preallocated tensor to find options. If not used, buffers are allocated by MIOpen internally, which is not recommended. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Options object to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the id of the tensor passed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the tensor for find call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5422" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5422" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga8cca5ef400a6ddb430fe618769f5a6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenSolution)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenSolution</type>
        </param>
        <briefdescription>
<para>The miopenSolution object describes a prepared solution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5428" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5428" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gaa3c5212a8cfb8913e3536cff5df7de7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFindSolutions</definition>
        <argsstring>(miopenHandle_t handle, miopenProblem_t problem, miopenFindOptions_t options, miopenSolution_t *solutions, size_t *numSolutions, size_t maxSolutions)</argsstring>
        <name>miopenFindSolutions</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenProblem_t</type>
          <declname>problem</declname>
        </param>
        <param>
          <type>miopenFindOptions_t</type>
          <declname>options</declname>
        </param>
        <param>
          <type>miopenSolution_t *</type>
          <declname>solutions</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numSolutions</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxSolutions</declname>
        </param>
        <briefdescription>
<para>Finds solutions to a problem by running different applicable solutions. Memory is automatically allocated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to execute the kernels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>problem</parametername>
</parameternamelist>
<parameterdescription>
<para>Problem to solve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Find options. When null default values would be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutions</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first result. Must not be null </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numSolutions</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the amount of results. Ignored if null </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSolutions</parametername>
</parameternamelist>
<parameterdescription>
<para>Limits the amount of results </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5441" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5441" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gab63fa12d932b163facc83c64d9e24cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRunSolution</definition>
        <argsstring>(miopenHandle_t handle, miopenSolution_t solution, size_t nInputs, const miopenTensorArgument_t *tensors, void *workspace, size_t workspaceSize)</argsstring>
        <name>miopenRunSolution</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenSolution_t</type>
          <declname>solution</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nInputs</declname>
        </param>
        <param>
          <type>const <ref refid="structmiopen_tensor_argument__t" kindref="compound">miopenTensorArgument_t</ref> *</type>
          <declname>tensors</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workspace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workspaceSize</declname>
        </param>
        <briefdescription>
<para>Runs the solution using the passed in buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to execute the kernels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solution</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution to execute </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nInputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount to inputs for the solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensors</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor arguments described by <ref refid="structmiopen_tensor_argument__t" kindref="compound">miopenTensorArgument_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device buffer used as workspace. May be null when not required. Should not be less than expected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the workspace buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5477" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5477" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gac049412a8595cb334890d907d0816f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroySolution</definition>
        <argsstring>(miopenSolution_t solution)</argsstring>
        <name>miopenDestroySolution</name>
        <param>
          <type>miopenSolution_t</type>
          <declname>solution</declname>
        </param>
        <briefdescription>
<para>Destroys solution object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solution</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5489" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5489" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gac48d517c378b83f1c6c4648b18405f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenLoadSolution</definition>
        <argsstring>(miopenSolution_t *solution, const char *data, size_t size)</argsstring>
        <name>miopenLoadSolution</name>
        <param>
          <type>miopenSolution_t *</type>
          <declname>solution</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Loads solution object from binary data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solution</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the solution to load </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to load the solution from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the solution blob </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5498" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5498" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gac7125760ca7876ae28fdd6817fcb5841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSaveSolution</definition>
        <argsstring>(miopenSolution_t solution, char *data)</argsstring>
        <name>miopenSaveSolution</name>
        <param>
          <type>miopenSolution_t</type>
          <declname>solution</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Saves a solution object as binary data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solution</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution to save </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer to save soltuion to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5508" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5508" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga9978589af89369b8bba9af932985b29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetSolutionSize</definition>
        <argsstring>(miopenSolution_t solution, size_t *size)</argsstring>
        <name>miopenGetSolutionSize</name>
        <param>
          <type>miopenSolution_t</type>
          <declname>solution</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reads the expected size of a solution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solution</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution to get size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a location where to write the size of the solution blob </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5516" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5516" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gaa94f17f9ac9ffe58a80d02e2d09e2b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetSolutionWorkspaceSize</definition>
        <argsstring>(miopenSolution_t solution, size_t *workspaceSize)</argsstring>
        <name>miopenGetSolutionWorkspaceSize</name>
        <param>
          <type>miopenSolution_t</type>
          <declname>solution</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workspaceSize</declname>
        </param>
        <briefdescription>
<para>Reads the amount of workspace required to exectute the solution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solution</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution to get required workspace size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a location where to write the workspace size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5524" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5524" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga3f109a28f79a609f733b1c832c1e52b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetSolutionTime</definition>
        <argsstring>(miopenSolution_t solution, float *time)</argsstring>
        <name>miopenGetSolutionTime</name>
        <param>
          <type>miopenSolution_t</type>
          <declname>solution</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Reads the time spent to execute the solution the last it was run. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solution</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution to get exection time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a location where to write the execution time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5533" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5533" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga27761e9b6c870fe094e2d3a5a40fac79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetSolutionSolverId</definition>
        <argsstring>(miopenSolution_t solution, uint64_t *solverId)</argsstring>
        <name>miopenGetSolutionSolverId</name>
        <param>
          <type>miopenSolution_t</type>
          <declname>solution</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>solverId</declname>
        </param>
        <briefdescription>
<para>Reads id of the solver referred by the solution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solution</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution to get solver id from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solverId</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a location where to write the solver id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5541" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5541" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gacc4d666af80bb7e661bb13cdfbdbf9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetSolverIdConvAlgorithm</definition>
        <argsstring>(uint64_t solverId, miopenConvAlgorithm_t *result)</argsstring>
        <name>miopenGetSolverIdConvAlgorithm</name>
        <param>
          <type>uint64_t</type>
          <declname>solverId</declname>
        </param>
        <param>
          <type><ref refid="group__convolutions_1ga3ba938002b32a963925c7cfce51ce15a" kindref="member">miopenConvAlgorithm_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Gets the convolution algorithm implemented by a solver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solverId</parametername>
</parameternamelist>
<parameterdescription>
<para>Solver id to get convolution algorithm of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a location where to write the algorithm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5550" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5550" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gadc3adb3d81d376bc016950fbcf59c636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateActivationProblem</definition>
        <argsstring>(miopenProblem_t *problem, miopenActivationDescriptor_t operatorDesc, miopenProblemDirection_t direction)</argsstring>
        <name>miopenCreateActivationProblem</name>
        <param>
          <type>miopenProblem_t *</type>
          <declname>problem</declname>
        </param>
        <param>
          <type>miopenActivationDescriptor_t</type>
          <declname>operatorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__find2_1gab7565f4a33ed5b4f7fa1793a7dad6337" kindref="member">miopenProblemDirection_t</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Initializes a problem object describing an activation operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>As of now there is no way to actually get any solution for this kind of problems.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>problem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the problem to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operatorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the operator to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction of the operation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5564" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5564" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1ga97cbacdb934a4a9477043e9e8ead4d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenFuseProblems</definition>
        <argsstring>(miopenProblem_t problem1, miopenProblem_t problem2)</argsstring>
        <name>miopenFuseProblems</name>
        <param>
          <type>miopenProblem_t</type>
          <declname>problem1</declname>
        </param>
        <param>
          <type>miopenProblem_t</type>
          <declname>problem2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5587" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5587" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__find2_1gaef75c299c6a5d68c95d4eb9d6bbd5606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateBiasProblem</definition>
        <argsstring>(miopenProblem_t *problem, miopenProblemDirection_t direction)</argsstring>
        <name>miopenCreateBiasProblem</name>
        <param>
          <type>miopenProblem_t *</type>
          <declname>problem</declname>
        </param>
        <param>
          <type><ref refid="group__find2_1gab7565f4a33ed5b4f7fa1793a7dad6337" kindref="member">miopenProblemDirection_t</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Initializes a problem object describing an bias operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>As of now there is no way to actually get any solution for this kind of problems.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>problem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the problem to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction of the operation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5596" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5596" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__sum_1gaaedf9fa469c2305481ba2a7138691238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetSumWorkspaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t xDesc, const int32_t dim, const miopenTensorDescriptor_t yDesc, size_t *sizeInBytes)</argsstring>
        <name>miopenGetSumWorkspaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sizeInBytes</declname>
        </param>
        <briefdescription>
<para>Helper function to query the minimum workspace size required by the ReduceTensor call. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen Handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions to sum. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to return the minimum workspace size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5631" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5631" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__sum_1ga792e22dc02c7a8a5c7296ef35bf6f0e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSumForward</definition>
        <argsstring>(miopenHandle_t handle, miopenSumNanPropagation_t nanPropagation, void *workspace, size_t workspaceSizeInBytes, const miopenTensorDescriptor_t xDesc, const void *x, const int32_t dim, const miopenTensorDescriptor_t yDesc, void *y)</argsstring>
        <name>miopenSumForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__sum_1ga9bc32feb2d65228d0bd5d30f8a1e44d2" kindref="member">miopenSumNanPropagation_t</ref></type>
          <declname>nanPropagation</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workspace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workspaceSizeInBytes</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Execute a sum forward layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nanPropagation</parametername>
</parameternamelist>
<parameterdescription>
<para>Nan number propagation mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the allocated workspace data (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspaceSizeInBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the allocated workspace data (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions to sum. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5650" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5650" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="miopen_8h_1ad71682910a5370d8a7a8f0d62b55a6de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenArgmaxForward</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t xDesc, const void *x, const int32_t dim, const miopenTensorDescriptor_t yDesc, void *y)</argsstring>
        <name>miopenArgmaxForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Find the index of the maximum value of a tensor across dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions to reduce argmax. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output indice data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5677" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5677" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__groupnorm_1ga78187f1ce6f0529b0e66b2bcb0d42037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGroupNormForward</definition>
        <argsstring>(miopenHandle_t handle, miopenNormMode_t mode, const miopenTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t weightDesc, const void *weight, const miopenTensorDescriptor_t biasDesc, const void *bias, const uint64_t num_groups, const float epsilon, const miopenTensorDescriptor_t yDesc, void *y, const miopenTensorDescriptor_t meanDesc, void *mean, const miopenTensorDescriptor_t rstdDesc, void *rstd)</argsstring>
        <name>miopenGroupNormForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__layernorm_1ga996bace523abc82c6847984c34b60d5b" kindref="member">miopenNormMode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>weightDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>num_groups</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>meanDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>rstdDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>rstd</declname>
        </param>
        <briefdescription>
<para>Execute a groupnorm forward layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>GroupNorm mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor weight (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor weight (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for data input tensor bias (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor bias (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_groups</parametername>
</parameternamelist>
<parameterdescription>
<para>nNmber of groups to separate the channels into (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to stablize inverse variance calculation (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor y (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meanDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor mean (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor mean (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rstdDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for output data tensor rstd (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rstd</parametername>
</parameternamelist>
<parameterdescription>
<para>Data tensor rstd (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="5712" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="5712" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>Advanced<sp/>Micro<sp/>Devices,<sp/>Inc.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MIOPEN_GUARD_MIOPEN_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIOPEN_GUARD_MIOPEN_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wextern-c-compat&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;miopen/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;miopen/export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MIOPEN_BACKEND_OPENCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CL_TARGET_OPENCL_VERSION<sp/>120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__APPLE__)<sp/>||<sp/>defined(__MACOSX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OpenCL/cl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CL_USE_DEPRECATED_OPENCL_1_2_APIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CL/cl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>MIOPEN_BACKEND_HIP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hip/hip_runtime_api.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>convolutions</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>pooling</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>handle</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>layernorm</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>LRN</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>batchnorm</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>activation</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>tensor</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>softmax</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>RNN</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>fusion</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>LossFunction</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>TensorReduce</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>find2</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>sum</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>argmax</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>groupnorm</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>cat</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIOPEN_DECLARE_OBJECT(name)<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>struct<sp/>name*<sp/>name##_t;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MIOPEN_BACKEND_OPENCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>cl_command_queue<sp/>miopenAcceleratorQueue_t;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>MIOPEN_BACKEND_HIP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>hipStream_t<sp/>miopenAcceleratorQueue_t;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="group__handle_1gaaf9a62fe06372c918be22db25cf13007" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenHandle);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a3fc50915c64e73ec736e0f9c2cb78129" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a3fc50915c64e73ec736e0f9c2cb78129" kindref="member">miopenStatusSuccess</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="107" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6abd80b3c675e17392162640b6a5cb7375" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6abd80b3c675e17392162640b6a5cb7375" kindref="member">miopenStatusNotInitialized</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="108" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6af0d655f9d71417a7143be6452651c1bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6af0d655f9d71417a7143be6452651c1bb" kindref="member">miopenStatusInvalidValue</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="109" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6abcd087689c69bcee83d4726487c8cca8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6abcd087689c69bcee83d4726487c8cca8" kindref="member">miopenStatusBadParm</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="110" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a9a1f9f181bb7d5649d3bb788760c489b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a9a1f9f181bb7d5649d3bb788760c489b" kindref="member">miopenStatusAllocFailed</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4,<sp/></highlight></codeline>
<codeline lineno="111" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6acfdd2d77791aae4ddd442f819189c19c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6acfdd2d77791aae4ddd442f819189c19c" kindref="member">miopenStatusInternalError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>5,<sp/></highlight></codeline>
<codeline lineno="112" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6ab6a11c9af8b9e52ab982abd85673ce9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6ab6a11c9af8b9e52ab982abd85673ce9e" kindref="member">miopenStatusNotImplemented</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>6,<sp/></highlight></codeline>
<codeline lineno="113" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a1504690ef8823ed85612008c08277b88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a1504690ef8823ed85612008c08277b88" kindref="member">miopenStatusUnknownError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>7,<sp/></highlight></codeline>
<codeline lineno="114" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a0199ef6922cf9b53fc3320d681915b73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a0199ef6922cf9b53fc3320d681915b73" kindref="member">miopenStatusUnsupportedOp</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline lineno="115" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a0d00d1e79b4c27f3ca840c9729a8c58b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a0d00d1e79b4c27f3ca840c9729a8c58b" kindref="member">miopenStatusGpuOperationsSkipped</ref><sp/>=<sp/>9,<sp/></highlight></codeline>
<codeline lineno="116" refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a51681c1688f3fdf0609c798e43afd171" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga74216ea6ba6c5487d5aceb46eb35f1d6a51681c1688f3fdf0609c798e43afd171" kindref="member">miopenStatusVersionMismatch</ref><sp/>=<sp/>10,<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="group__handle_1ga80bfa6e46fdc8764f04f29a03689d1fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122" refid="group__handle_1gga80bfa6e46fdc8764f04f29a03689d1fcafbe24189bfd43c73fe839aa4ea2968d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga80bfa6e46fdc8764f04f29a03689d1fcafbe24189bfd43c73fe839aa4ea2968d7" kindref="member">miopenF8RoundingModeStandard</ref><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="123" refid="group__handle_1gga80bfa6e46fdc8764f04f29a03689d1fcafe52ff63273ab4eb21714c050f4abfb3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__handle_1gga80bfa6e46fdc8764f04f29a03689d1fcafe52ff63273ab4eb21714c050f4abfb3" kindref="member">miopenF8RoundingModeStochastic</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/><ref refid="group__handle_1ga80bfa6e46fdc8764f04f29a03689d1fc" kindref="member">miopenF8RoundingMode_t</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="group__handle_1gac6c00a7bd50c44b815976c276ae4d9b4" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="group__handle_1gac6c00a7bd50c44b815976c276ae4d9b4" kindref="member">miopenGetErrorString</ref>(<ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/>error);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="group__handle_1gac2642558af91c051446ef9fab49bba31" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(*miopenAllocatorFunction)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="group__handle_1ga54112962a0d7bcf6cc011a5ed19a4201" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__handle_1ga54112962a0d7bcf6cc011a5ed19a4201" kindref="member">miopenDeallocatorFunction</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>memory);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="group__handle_1ga6e4d06e38316d75e5d95cb6fde5c7c70" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__handle_1ga6e4d06e38316d75e5d95cb6fde5c7c70" kindref="member">miopenGetVersion</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>major,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>minor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>patch);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="group__handle_1gad7924dd946f447575547e0e1bddb2fbe" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__handle_1gad7924dd946f447575547e0e1bddb2fbe" kindref="member">miopenCreate</ref>(miopenHandle_t*<sp/>handle);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="group__handle_1ga104432242babf6a4c66b09a43e7081d4" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__handle_1ga104432242babf6a4c66b09a43e7081d4" kindref="member">miopenCreateWithStream</ref>(miopenHandle_t*<sp/>handle,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenAcceleratorQueue_t<sp/>stream);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="group__handle_1ga20296fd22692cbaace8ad86a0a08b869" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__handle_1ga20296fd22692cbaace8ad86a0a08b869" kindref="member">miopenDestroy</ref>(miopenHandle_t<sp/>handle);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="group__handle_1gadd90259644bc8edc5cb42070a66ed651" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__handle_1gadd90259644bc8edc5cb42070a66ed651" kindref="member">miopenSetStream</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenAcceleratorQueue_t<sp/>streamID);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="group__handle_1ga64e9eb389d9c8e8793908052dffbf138" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__handle_1ga64e9eb389d9c8e8793908052dffbf138" kindref="member">miopenGetStream</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenAcceleratorQueue_t*<sp/>streamID);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="group__handle_1ga7e5ef2b84c12704b9ad9daf551d7bd31" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__handle_1ga7e5ef2b84c12704b9ad9daf551d7bd31" kindref="member">miopenSetAllocator</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__handle_1gac2642558af91c051446ef9fab49bba31" kindref="member">miopenAllocatorFunction</ref><sp/>allocator,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__handle_1ga54112962a0d7bcf6cc011a5ed19a4201" kindref="member">miopenDeallocatorFunction</ref><sp/>deallocator,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>allocatorContext);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="group__handle_1gada439cdf3dac26d2e054f75158993fac" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__handle_1gada439cdf3dac26d2e054f75158993fac" kindref="member">miopenGetKernelTime</ref>(miopenHandle_t<sp/>handle,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>time);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="group__handle_1ga6873d2a57e63cd81a682e3c62900e813" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__handle_1ga6873d2a57e63cd81a682e3c62900e813" kindref="member">miopenEnableProfiling</ref>(miopenHandle_t<sp/>handle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>HANDLE<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="miopen_8h_1a3f63d58e4f71379f2e72a3c5f188fc98" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenFusionOpDescriptor);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="group__tensor_1gaa709f2b37eaf01dc20d0a8c55b9dd91b" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenTensorDescriptor);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="group__tensor_1ga4a71ec0b8e2e7064ccb76be40ce9b7dc" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenSeqTensorDescriptor);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="group__convolutions_1ga10b4762521ca884d7c93cfe8634b38cb" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenConvolutionDescriptor);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="group__pooling_1gae90132c94469bb7bfbca5498309fe0f8" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenPoolingDescriptor);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="group___l_r_n_1gaaa30a58b289fbef587968001697c915a" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenLRNDescriptor);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="group__activation_1ga9f091c54e4e21e6ae53ab058be2d658f" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenActivationDescriptor);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="group___r_n_n_1ga781cb4cafc3e631e189a0ec014a2729f" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenRNNDescriptor);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="group___loss_function_1ga5060d9edff6010a4a0e9720659a897fd" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenCTCLossDescriptor);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="miopen_8h_1af977aad2a1e17db8fdc7d43eabee4bea" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenDropoutDescriptor);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="group___tensor_reduce_1gabdbbaf51367b7518e4ebbc5faf62357f" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenReduceTensorDescriptor);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355" refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a6e9ac7a764797dde5f1b28d3516ba69f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a6e9ac7a764797dde5f1b28d3516ba69f" kindref="member">miopenHalf</ref><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="356" refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a33115d427e71a2759a28dfea283d5eeb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a33115d427e71a2759a28dfea283d5eeb" kindref="member">miopenFloat</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="357" refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a6aa2b89e7e323df62ba76bc62b6d8c0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a6aa2b89e7e323df62ba76bc62b6d8c0c" kindref="member">miopenInt32</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="358" refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a6a5fcabf2ddece1384141f68b0bd34cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a6a5fcabf2ddece1384141f68b0bd34cc" kindref="member">miopenInt8</ref><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>miopenInt8x4<sp/><sp/><sp/>=<sp/>4,<sp/>/*!&lt;<sp/>Pack<sp/>of<sp/>4x<sp/>Int8<sp/>in<sp/>NCHW_VECT_C<sp/>format<sp/>(Support<sp/>discontinued)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a656b49db33ff9a982cbcbcfd2710bb43" kindref="member">miopenBFloat16</ref><sp/>=<sp/>5,<sp/></highlight></codeline>
<codeline lineno="362" refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a90310ef7026c1f362feb65cdd90a6e44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a90310ef7026c1f362feb65cdd90a6e44" kindref="member">miopenDouble</ref><sp/>=<sp/>6,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17af035994430ebff11d40c896fca7624e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17af035994430ebff11d40c896fca7624e4" kindref="member">miopenFloat8</ref><sp/><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="365" refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a785652761965bb5a33008904660dd6bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8bf94a23997093548ddf866c94c4ac17a785652761965bb5a33008904660dd6bb" kindref="member">miopenBFloat8</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>miopenReserved1<sp/>=<sp/>7,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>miopenReserved2<sp/>=<sp/>8,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">}<sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="group__tensor_1ga4997f98fa2256f41736a184fa1574f8c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379" refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca3640618e74eb72dbdfee36f9cbb408bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca3640618e74eb72dbdfee36f9cbb408bb" kindref="member">miopenTensorNCHW</ref><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="380" refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca1657aaece7d521bd728632a953e2f55a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca1657aaece7d521bd728632a953e2f55a" kindref="member">miopenTensorNHWC</ref><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="381" refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca05a571279bec2ef5c20eb66c09616a3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca05a571279bec2ef5c20eb66c09616a3e" kindref="member">miopenTensorCHWN</ref><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="382" refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8caff0e70e620fa03f6383f666c19977fdd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8caff0e70e620fa03f6383f666c19977fdd" kindref="member">miopenTensorNCHWc4</ref><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="383" refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca4e90e1a30efbe32d6e3854d4bf7c9bc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca4e90e1a30efbe32d6e3854d4bf7c9bc3" kindref="member">miopenTensorNCHWc8</ref><sp/>=<sp/>4,<sp/></highlight></codeline>
<codeline lineno="384" refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca4ca640612b360e10b1e93fa7a89c0741" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca4ca640612b360e10b1e93fa7a89c0741" kindref="member">miopenTensorCHWNc4</ref><sp/>=<sp/>5,<sp/></highlight></codeline>
<codeline lineno="385" refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca9cf6d72886e9754658d6c511a3c29c44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca9cf6d72886e9754658d6c511a3c29c44" kindref="member">miopenTensorCHWNc8</ref><sp/>=<sp/>6,<sp/></highlight></codeline>
<codeline lineno="386" refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca727b31912781101a907b27391534c1c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca727b31912781101a907b27391534c1c7" kindref="member">miopenTensorNCDHW</ref><sp/><sp/>=<sp/>7,<sp/></highlight></codeline>
<codeline lineno="387" refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca1facc75bcb03d9832c5606151a34795b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4997f98fa2256f41736a184fa1574f8ca1facc75bcb03d9832c5606151a34795b" kindref="member">miopenTensorNDHWC</ref><sp/><sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal">}<sp/><ref refid="group__tensor_1ga4997f98fa2256f41736a184fa1574f8c" kindref="member">miopenTensorLayout_t</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396" refid="miopen_8h_1ga8428bfacfbe899245b707fa7a6b95547ae75cb44f2c20e2fb87b3222b8b7ebc8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8428bfacfbe899245b707fa7a6b95547ae75cb44f2c20e2fb87b3222b8b7ebc8b" kindref="member">miopenIndexUint8</ref><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="397" refid="miopen_8h_1ga8428bfacfbe899245b707fa7a6b95547a2020981e0bbe101614506772aa324a73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8428bfacfbe899245b707fa7a6b95547a2020981e0bbe101614506772aa324a73" kindref="member">miopenIndexUint16</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="398" refid="miopen_8h_1ga8428bfacfbe899245b707fa7a6b95547ab1fa80c8eafef2fe983e52210be8c260" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8428bfacfbe899245b707fa7a6b95547ab1fa80c8eafef2fe983e52210be8c260" kindref="member">miopenIndexUint32</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="399" refid="miopen_8h_1ga8428bfacfbe899245b707fa7a6b95547a4539c9a6e12c960e90ff1ffe388fdcdd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8428bfacfbe899245b707fa7a6b95547a4539c9a6e12c960e90ff1ffe388fdcdd" kindref="member">miopenIndexUint64</ref><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="400"><highlight class="normal">}<sp/><ref refid="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547" kindref="member">miopenIndexType_t</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408" refid="miopen_8h_1gaa2498dabff3e75d86471b25a2be9a198ad0cfac2b0c8f5668f62c2b156a7281e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gaa2498dabff3e75d86471b25a2be9a198ad0cfac2b0c8f5668f62c2b156a7281e0" kindref="member">miopenTensorOpAdd</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="409" refid="miopen_8h_1gaa2498dabff3e75d86471b25a2be9a198ae20aa1bb8363d01002ce601f9edfdbf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gaa2498dabff3e75d86471b25a2be9a198ae20aa1bb8363d01002ce601f9edfdbf2" kindref="member">miopenTensorOpMul</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="410" refid="miopen_8h_1gaa2498dabff3e75d86471b25a2be9a198a46cb1f291532f6b241b12b76e17ddbef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gaa2498dabff3e75d86471b25a2be9a198a46cb1f291532f6b241b12b76e17ddbef" kindref="member">miopenTensorOpMin</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="411" refid="miopen_8h_1gaa2498dabff3e75d86471b25a2be9a198aed2a5c869fb47aa3f0aebd9945fa56da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gaa2498dabff3e75d86471b25a2be9a198aed2a5c869fb47aa3f0aebd9945fa56da" kindref="member">miopenTensorOpMax</ref><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal">}<sp/><ref refid="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198" kindref="member">miopenTensorOp_t</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420" refid="miopen_8h_1ga91bcbdad0e53c07078287a74799c88cdaf5c5ca99ec760a1d1016a671408766bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga91bcbdad0e53c07078287a74799c88cdaf5c5ca99ec760a1d1016a671408766bc" kindref="member">miopenConvolution</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="421" refid="miopen_8h_1ga91bcbdad0e53c07078287a74799c88cdaaa6f0f5913493a335cbb4389c66f4736" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga91bcbdad0e53c07078287a74799c88cdaaa6f0f5913493a335cbb4389c66f4736" kindref="member">miopenTranspose</ref><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="422" refid="miopen_8h_1ga91bcbdad0e53c07078287a74799c88cdaa839e7fb549d7ee872485b571b8e692a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga91bcbdad0e53c07078287a74799c88cdaa839e7fb549d7ee872485b571b8e692a" kindref="member">miopenGroupConv</ref><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="423" refid="miopen_8h_1ga91bcbdad0e53c07078287a74799c88cda43f0c77533ba896fcd8dc6e9913e9ec5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga91bcbdad0e53c07078287a74799c88cda43f0c77533ba896fcd8dc6e9913e9ec5" kindref="member">miopenDepthwise</ref><sp/><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal">}<sp/><ref refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" kindref="member">miopenConvolutionMode_t</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="miopen_8h_1a4540cf2ce4c529bc029b727969368cca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432" refid="miopen_8h_1a4540cf2ce4c529bc029b727969368ccaa4aed4a8a65105faaf4b5642513149fc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1a4540cf2ce4c529bc029b727969368ccaa4aed4a8a65105faaf4b5642513149fc3" kindref="member">miopenPaddingDefault</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="433" refid="miopen_8h_1a4540cf2ce4c529bc029b727969368ccaad39c20eb8155b9bc83691beca44ceb0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1a4540cf2ce4c529bc029b727969368ccaad39c20eb8155b9bc83691beca44ceb0b" kindref="member">miopenPaddingSame</ref><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="434" refid="miopen_8h_1a4540cf2ce4c529bc029b727969368ccaaeef0ba477e48d5e1e4f4fd88d87aa6f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1a4540cf2ce4c529bc029b727969368ccaaeef0ba477e48d5e1e4f4fd88d87aa6f2" kindref="member">miopenPaddingValid</ref><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal">}<sp/><ref refid="miopen_8h_1a4540cf2ce4c529bc029b727969368cca" kindref="member">miopenPaddingMode_t</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443" refid="miopen_8h_1ga4243bc20d51988902e2e22a5d2b6bb5cad4f167bcecbd60fb7078fb97aaffd3fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4243bc20d51988902e2e22a5d2b6bb5cad4f167bcecbd60fb7078fb97aaffd3fc" kindref="member">miopenPoolingMax</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="444" refid="miopen_8h_1ga4243bc20d51988902e2e22a5d2b6bb5ca3964ddda768df3b127079997346bfe89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4243bc20d51988902e2e22a5d2b6bb5ca3964ddda768df3b127079997346bfe89" kindref="member">miopenPoolingAverage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="445" refid="miopen_8h_1ga4243bc20d51988902e2e22a5d2b6bb5caa060d79a20d907b13a9ecc2a77e88c44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4243bc20d51988902e2e22a5d2b6bb5caa060d79a20d907b13a9ecc2a77e88c44" kindref="member">miopenPoolingAverageInclusive</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal">}<sp/><ref refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" kindref="member">miopenPoolingMode_t</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="group__pooling_1ga8f69978be75d6d32dbc172d3a99695e7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456" refid="miopen_8h_1ga8f69978be75d6d32dbc172d3a99695e7aa18c786f4a9f7ca40cb70395d5d9aeaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8f69978be75d6d32dbc172d3a99695e7aa18c786f4a9f7ca40cb70395d5d9aeaa" kindref="member">miopenPoolingWorkspaceIndexMask</ref><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="457" refid="miopen_8h_1ga8f69978be75d6d32dbc172d3a99695e7a962adb90a1876eb3980c39d5a9247a38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8f69978be75d6d32dbc172d3a99695e7a962adb90a1876eb3980c39d5a9247a38" kindref="member">miopenPoolingWorkspaceIndexImage</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal">}<sp/><ref refid="group__pooling_1ga8f69978be75d6d32dbc172d3a99695e7" kindref="member">miopenPoolingWorkspaceIndexMode_t</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="group___l_r_n_1gae8c4f5513e59a0c2870013504f9b5c4d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466" refid="miopen_8h_1gae8c4f5513e59a0c2870013504f9b5c4da0062534dacca2acfb07e261fd5c0b77c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gae8c4f5513e59a0c2870013504f9b5c4da0062534dacca2acfb07e261fd5c0b77c" kindref="member">miopenLRNWithinChannel</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="467" refid="miopen_8h_1gae8c4f5513e59a0c2870013504f9b5c4da5c1611ee75b7929a3a59e414974a18a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gae8c4f5513e59a0c2870013504f9b5c4da5c1611ee75b7929a3a59e414974a18a7" kindref="member">miopenLRNCrossChannel</ref><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal">}<sp/><ref refid="group___l_r_n_1gae8c4f5513e59a0c2870013504f9b5c4d" kindref="member">miopenLRNMode_t</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="group__layernorm_1ga996bace523abc82c6847984c34b60d5b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476" refid="miopen_8h_1ga996bace523abc82c6847984c34b60d5ba6dafa3af3a93d940670d2e19448a8b4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga996bace523abc82c6847984c34b60d5ba6dafa3af3a93d940670d2e19448a8b4b" kindref="member">MIOPEN_ELEMENTWISE_AFFINE</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga996bace523abc82c6847984c34b60d5ba3eb5ec947f41699cc76f26232a6e1101" kindref="member">MIOPEN_WEIGHT_BIAS</ref><sp/>=</highlight></codeline>
<codeline lineno="478" refid="miopen_8h_1ga996bace523abc82c6847984c34b60d5ba3eb5ec947f41699cc76f26232a6e1101" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal">}<sp/><ref refid="group__layernorm_1ga996bace523abc82c6847984c34b60d5b" kindref="member">miopenNormMode_t</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487" refid="miopen_8h_1gab21179fc753f8e0d1a6f23ac9b340a26a44ab9eadea90a770a3744a61b71d536f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gab21179fc753f8e0d1a6f23ac9b340a26a44ab9eadea90a770a3744a61b71d536f" kindref="member">miopenBNPerActivation</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="488" refid="miopen_8h_1gab21179fc753f8e0d1a6f23ac9b340a26a42ebad7a4f774e7dc3df2de80b31a3e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gab21179fc753f8e0d1a6f23ac9b340a26a42ebad7a4f774e7dc3df2de80b31a3e0" kindref="member">miopenBNSpatial</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="489"><highlight class="normal">}<sp/><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497" refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a3a85417a19911daeecf6e9e5f8952d3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a3a85417a19911daeecf6e9e5f8952d3b" kindref="member">miopenActivationPASTHRU</ref><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="498" refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a4a7e7a529bed5bc42fc4966d47ea29b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a4a7e7a529bed5bc42fc4966d47ea29b4" kindref="member">miopenActivationLOGISTIC</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="499" refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6aebc2804e6806816dc8db6554d0c670b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6aebc2804e6806816dc8db6554d0c670b2" kindref="member">miopenActivationTANH</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="500" refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a66fb3d3c74e40e1e1a460fb409be62c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a66fb3d3c74e40e1e1a460fb409be62c0" kindref="member">miopenActivationRELU</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="501" refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6ad022a217df2f21174c4d515294f0e727" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6ad022a217df2f21174c4d515294f0e727" kindref="member">miopenActivationSOFTRELU</ref><sp/>=<sp/>4,<sp/></highlight></codeline>
<codeline lineno="502" refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a481c9203a79996016e88e0b1baee55b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a481c9203a79996016e88e0b1baee55b5" kindref="member">miopenActivationABS</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>5,<sp/></highlight></codeline>
<codeline lineno="503" refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a7dbe18fe7783fcf9bb4e46d34b8e1d51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a7dbe18fe7783fcf9bb4e46d34b8e1d51" kindref="member">miopenActivationPOWER</ref><sp/>=<sp/>6,<sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a5ac41058b9593346704ed86235228f4b" kindref="member">miopenActivationCLIPPEDRELU</ref><sp/>=</highlight></codeline>
<codeline lineno="505" refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a5ac41058b9593346704ed86235228f4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7,<sp/></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a03c0f145db198f95b49b372470e64f29" kindref="member">miopenActivationLEAKYRELU</ref><sp/>=</highlight></codeline>
<codeline lineno="507" refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6a03c0f145db198f95b49b372470e64f29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,<sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga5fd27264d844b20dd8d63ab678f09af6ac95a28635391882b82df5d1a9dcbc0a3" kindref="member">miopenActivationELU</ref><sp/>=</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9,<sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal">}<sp/><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519" refid="miopen_8h_1gaf2376aefd82e3d6e08df6da4810ffdfea7d462f643547b89ea8460c3b1d58b8d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gaf2376aefd82e3d6e08df6da4810ffdfea7d462f643547b89ea8460c3b1d58b8d8" kindref="member">MIOPEN_SOFTMAX_FAST</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="520" refid="miopen_8h_1gaf2376aefd82e3d6e08df6da4810ffdfeacd866d881145ad1a323c4a589986cf5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gaf2376aefd82e3d6e08df6da4810ffdfeacd866d881145ad1a323c4a589986cf5e" kindref="member">MIOPEN_SOFTMAX_ACCURATE</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="521" refid="miopen_8h_1gaf2376aefd82e3d6e08df6da4810ffdfead27f321be1aa13300ebb2d175a3666c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gaf2376aefd82e3d6e08df6da4810ffdfead27f321be1aa13300ebb2d175a3666c5" kindref="member">MIOPEN_SOFTMAX_LOG</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal">}<sp/><ref refid="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfe" kindref="member">miopenSoftmaxAlgorithm_t</ref>;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="group__softmax_1gaea670eae33cee9aee53d48624cf28d7d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530" refid="miopen_8h_1gaea670eae33cee9aee53d48624cf28d7dabab93ef42b0ec7744b4fb8ab83d700a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gaea670eae33cee9aee53d48624cf28d7dabab93ef42b0ec7744b4fb8ab83d700a3" kindref="member">MIOPEN_SOFTMAX_MODE_INSTANCE</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1gaea670eae33cee9aee53d48624cf28d7daf5c13b390d4b6132b51976a92f0f3029" kindref="member">MIOPEN_SOFTMAX_MODE_CHANNEL</ref><sp/>=</highlight></codeline>
<codeline lineno="532" refid="miopen_8h_1gaea670eae33cee9aee53d48624cf28d7daf5c13b390d4b6132b51976a92f0f3029" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal">}<sp/><ref refid="group__softmax_1gaea670eae33cee9aee53d48624cf28d7d" kindref="member">miopenSoftmaxMode_t</ref>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="group___tensor_reduce_1gab4f973d3f1f731ca1f0c1ca3ae225e7c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIOPEN_API_VERSION_REDUCE_TENSOR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550" refid="miopen_8h_1ga70e205d9a10688c29474cd8795521dddae88d3f61f4d036c581d47d2242011edb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga70e205d9a10688c29474cd8795521dddae88d3f61f4d036c581d47d2242011edb" kindref="member">MIOPEN_REDUCE_TENSOR_ADD</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga70e205d9a10688c29474cd8795521ddda509f2659e4d54a99d17844ee8de19130" kindref="member">MIOPEN_REDUCE_TENSOR_MUL</ref><sp/>=</highlight></codeline>
<codeline lineno="552" refid="miopen_8h_1ga70e205d9a10688c29474cd8795521ddda509f2659e4d54a99d17844ee8de19130" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga70e205d9a10688c29474cd8795521dddae1af9483b548971223d29c8f12862820" kindref="member">MIOPEN_REDUCE_TENSOR_MIN</ref><sp/>=</highlight></codeline>
<codeline lineno="554" refid="miopen_8h_1ga70e205d9a10688c29474cd8795521dddae1af9483b548971223d29c8f12862820" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga70e205d9a10688c29474cd8795521ddda6c82f5dec443a93777291a68de6709fe" kindref="member">MIOPEN_REDUCE_TENSOR_MAX</ref><sp/>=</highlight></codeline>
<codeline lineno="556" refid="miopen_8h_1ga70e205d9a10688c29474cd8795521ddda6c82f5dec443a93777291a68de6709fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga70e205d9a10688c29474cd8795521dddac956caf0ac6e9ffbf647eca0bb3c13ab" kindref="member">MIOPEN_REDUCE_TENSOR_AMAX</ref><sp/>=</highlight></codeline>
<codeline lineno="558" refid="miopen_8h_1ga70e205d9a10688c29474cd8795521dddac956caf0ac6e9ffbf647eca0bb3c13ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga70e205d9a10688c29474cd8795521ddda7088afde0cec574d45add46d4f1d5534" kindref="member">MIOPEN_REDUCE_TENSOR_AVG</ref><sp/>=</highlight></codeline>
<codeline lineno="560" refid="miopen_8h_1ga70e205d9a10688c29474cd8795521ddda7088afde0cec574d45add46d4f1d5534" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,<sp/></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga70e205d9a10688c29474cd8795521ddda9df43ac0efb3c7061e2a131c337050b8" kindref="member">MIOPEN_REDUCE_TENSOR_NORM1</ref><sp/>=</highlight></codeline>
<codeline lineno="562" refid="miopen_8h_1ga70e205d9a10688c29474cd8795521ddda9df43ac0efb3c7061e2a131c337050b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6,<sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga70e205d9a10688c29474cd8795521dddae8a5d817789938ae4cf77d0496b7122f" kindref="member">MIOPEN_REDUCE_TENSOR_NORM2</ref><sp/>=<sp/>7,<sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MIOPEN_REDUCE_TENSOR_MUL_NO_ZEROS<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>8,<sp/>/*!&lt;<sp/>the<sp/>operation<sp/>is<sp/>same<sp/>as<sp/>MUL,<sp/>but<sp/>does<sp/>not<sp/>have<sp/>the<sp/>zero<sp/>values<sp/>considered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">}<sp/><ref refid="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddd" kindref="member">miopenReduceTensorOp_t</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575" refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89adb89d9f86661677eba6f1fb0078bb9b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89adb89d9f86661677eba6f1fb0078bb9b0" kindref="member">MIOPEN_NOT_PROPAGATE_NAN</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="576" refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89a79c9620aa9ab26af969cb5c78cf8ac77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89a79c9620aa9ab26af969cb5c78cf8ac77" kindref="member">MIOPEN_PROPAGATE_NAN</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal">}<sp/><ref refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89" kindref="member">miopenNanPropagation_t</ref>;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="583" refid="group___tensor_reduce_1ga4dd527c6b506c34ec06d641551d78b7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585" refid="miopen_8h_1ga4dd527c6b506c34ec06d641551d78b7ca630bd9b0b0f29fdd4acd7f1428c9e112" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4dd527c6b506c34ec06d641551d78b7ca630bd9b0b0f29fdd4acd7f1428c9e112" kindref="member">MIOPEN_REDUCE_TENSOR_NO_INDICES</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="586" refid="miopen_8h_1ga4dd527c6b506c34ec06d641551d78b7ca04e405c32e661195b6af8a3c8d1fdf24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga4dd527c6b506c34ec06d641551d78b7ca04e405c32e661195b6af8a3c8d1fdf24" kindref="member">MIOPEN_REDUCE_TENSOR_FLATTENED_INDICES</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal">}<sp/><ref refid="group___tensor_reduce_1ga4dd527c6b506c34ec06d641551d78b7c" kindref="member">miopenReduceTensorIndices_t</ref>;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="595" refid="miopen_8h_1ga8c58d2c6bd149d6140ea81e88374d82babe4c1ddd72f1a427a032ed9ccff8a8bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8c58d2c6bd149d6140ea81e88374d82babe4c1ddd72f1a427a032ed9ccff8a8bb" kindref="member">MIOPEN_32BIT_INDICES</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="596" refid="miopen_8h_1ga8c58d2c6bd149d6140ea81e88374d82bafd7b2202fcf90028f49773fde1b11435" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8c58d2c6bd149d6140ea81e88374d82bafd7b2202fcf90028f49773fde1b11435" kindref="member">MIOPEN_64BIT_INDICES</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="597" refid="miopen_8h_1ga8c58d2c6bd149d6140ea81e88374d82badf88480d0cc300ddba2b326b78e68d84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8c58d2c6bd149d6140ea81e88374d82badf88480d0cc300ddba2b326b78e68d84" kindref="member">MIOPEN_16BIT_INDICES</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="598" refid="miopen_8h_1ga8c58d2c6bd149d6140ea81e88374d82babae5e385da771a86da08f2873630cf33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga8c58d2c6bd149d6140ea81e88374d82babae5e385da771a86da08f2873630cf33" kindref="member">MIOPEN_8BIT_INDICES</ref><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal">}<sp/><ref refid="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82b" kindref="member">miopenIndicesType_t</ref>;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="605" refid="group__convolutions_1ga784559bf30977ad39cbc491727eae485" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga784559bf30977ad39cbc491727eae485ae736f64b13f2adec7f2a6f1202abb5b2" kindref="member">MIOPEN_CONVOLUTION_ATTRIB_FP16_ALT_IMPL</ref><sp/>=</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga784559bf30977ad39cbc491727eae485a1fe1be172f9231f2a251d048b4cbbe40" kindref="member">MIOPEN_CONVOLUTION_ATTRIB_DETERMINISTIC</ref><sp/>=</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga784559bf30977ad39cbc491727eae485a33f92e9eb6d42b8da1c774fcbad24625" kindref="member">MIOPEN_CONVOLUTION_ATTRIB_FP8_ROUNDING_MODE</ref><sp/>=</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>miopenReserved1<sp/>=<sp/>2,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">}<sp/><ref refid="group__convolutions_1ga784559bf30977ad39cbc491727eae485" kindref="member">miopenConvolutionAttrib_t</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="group__tensor_1ga57867b185d47a1f10ddc50d642df784b" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga57867b185d47a1f10ddc50d642df784b" kindref="member">miopenCreateTensorDescriptor</ref>(miopenTensorDescriptor_t*<sp/>tensorDesc);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="650" refid="group__tensor_1ga7a9ed6faa48edc69f6d68cce68eaf8a1" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga7a9ed6faa48edc69f6d68cce68eaf8a1" kindref="member">miopenSet4dTensorDescriptor</ref>(</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>tensorDesc,<sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dataType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="664" refid="group__tensor_1ga1ca0a412a2de95e5f1cfb041cc045410" refkind="member"><highlight class="normal"><ref refid="group__tensor_1ga1ca0a412a2de95e5f1cfb041cc045410" kindref="member">miopenSetNdTensorDescriptorWithLayout</ref>(miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dataType,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga4997f98fa2256f41736a184fa1574f8c" kindref="member">miopenTensorLayout_t</ref><sp/>tensorLayout,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>lens,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_lens);</highlight></codeline>
<codeline lineno="688" refid="group__tensor_1ga8539b92c3aa163b90717fca82f7583c9" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga8539b92c3aa163b90717fca82f7583c9" kindref="member">miopenSet4dTensorDescriptorEx</ref>(miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dataType,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nStride,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cStride,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hStride,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wStride);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="group__tensor_1ga422ba168412b4b5ae7df9a27e008870e" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga422ba168412b4b5ae7df9a27e008870e" kindref="member">miopenGet4dTensorDescriptor</ref>(miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref>*<sp/>dataType,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>c,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>h,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>nStride,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>cStride,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>hStride,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>wStride);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="group__tensor_1gae57f3c7b71aed10691abc2ac2a5f8f27" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1gae57f3c7b71aed10691abc2ac2a5f8f27" kindref="member">miopenSetTensorDescriptor</ref>(miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dataType,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbDims,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dimsA,</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>stridesA);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="group__tensor_1ga68f03f27b4afafdc7606178307a5b2a5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga68f03f27b4afafdc7606178307a5b2a5" kindref="member">miopenSetTensorCastType</ref>(miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>cast_type);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="group__tensor_1gaa6907ccd3f4ebaeef047af1819d5cf05" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1gaa6907ccd3f4ebaeef047af1819d5cf05" kindref="member">miopenGetTensorDescriptorSize</ref>(miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>size);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="775" refid="group__tensor_1ga0ac6a668ed3b2e580b45c39b2dbf8b8c" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga0ac6a668ed3b2e580b45c39b2dbf8b8c" kindref="member">miopenGetTensorDescriptor</ref>(miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref>*<sp/>dataType,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dimsA,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>stridesA);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="785" refid="group__tensor_1gaab76aa1181416bea57840e67cdbe1934" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1gaab76aa1181416bea57840e67cdbe1934" kindref="member">miopenDestroyTensorDescriptor</ref>(miopenTensorDescriptor_t<sp/>tensorDesc);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="794" refid="group__tensor_1ga924b379598666fd19496f8cb597a9eab" refkind="member"><highlight class="normal"><ref refid="group__tensor_1ga924b379598666fd19496f8cb597a9eab" kindref="member">miopenCreateSeqTensorDescriptor</ref>(miopenSeqTensorDescriptor_t*<sp/>tensorDesc);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="802" refid="group__tensor_1ga0a66a800ae274f35c1bd5b9182bc5e33" refkind="member"><highlight class="normal"><ref refid="group__tensor_1ga0a66a800ae274f35c1bd5b9182bc5e33" kindref="member">miopenDestroySeqTensorDescriptor</ref>(miopenSeqTensorDescriptor_t<sp/>tensorDesc);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="823" refid="group__tensor_1ga35d61860e1413ff6023b391fff70b7c0" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga35d61860e1413ff6023b391fff70b7c0" kindref="member">miopenOpTensor</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198" kindref="member">miopenTensorOp_t</ref><sp/>tensorOp,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha1,</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>aDesc,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>A,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha2,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>bDesc,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>B,</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cDesc,</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>C);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="845" refid="group__tensor_1ga24fd91d999f4b4479b187ce20bcbb930" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga24fd91d999f4b4479b187ce20bcbb930" kindref="member">miopenSetTensor</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="860" refid="group__tensor_1ga5e1f5d98a1c4499c3209cb4ea9d01e12" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga5e1f5d98a1c4499c3209cb4ea9d01e12" kindref="member">miopenScaleTensor</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="871" refid="group__tensor_1ga3727427906d20e31009071ff4d058357" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga3727427906d20e31009071ff4d058357" kindref="member">miopenGetTensorNumBytes</ref>(miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>numBytes);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="group__tensor_1ga49a729b5c718cff326e57fca6397399c" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__tensor_1ga49a729b5c718cff326e57fca6397399c" kindref="member">miopenTransformTensor</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>TENSOR<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="913" refid="group__convolutions_1ga6a31011f7c0719726a73d8f5bea388dc" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga6a31011f7c0719726a73d8f5bea388dc" kindref="member">miopenCreateConvolutionDescriptor</ref>(miopenConvolutionDescriptor_t*<sp/>convDesc);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="930" refid="group__convolutions_1ga37d3fbee7a7cd36ecb22d9ab23c80ce3" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1ga37d3fbee7a7cd36ecb22d9ab23c80ce3" kindref="member">miopenInitConvolutionDescriptor</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" kindref="member">miopenConvolutionMode_t</ref><sp/>c_mode,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pad_h,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pad_w,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_h,</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_w,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dilation_h,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dilation_w);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="950" refid="group__convolutions_1ga06f1ca4633a112373f4d353ed819bf10" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga06f1ca4633a112373f4d353ed819bf10" kindref="member">miopenInitConvolutionNdDescriptor</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spatialDim,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>padA,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>strideA,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dilationA,</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" kindref="member">miopenConvolutionMode_t</ref><sp/>c_mode);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="group__convolutions_1gab9c592d2e21e2841fb4e120ebd46a2d1" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1gab9c592d2e21e2841fb4e120ebd46a2d1" kindref="member">miopenGetConvolutionSpatialDim</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>spatialDim);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="group__convolutions_1gaf59a6be12730a207c15d068a0b1fe52f" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1gaf59a6be12730a207c15d068a0b1fe52f" kindref="member">miopenGetConvolutionDescriptor</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" kindref="member">miopenConvolutionMode_t</ref>*<sp/>c_mode,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pad_h,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pad_w,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>stride_h,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>stride_w,</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dilation_h,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dilation_w);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1002" refid="group__convolutions_1ga7288233f65445ca372a3d86c75449294" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga7288233f65445ca372a3d86c75449294" kindref="member">miopenGetConvolutionNdDescriptor</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>requestedSpatialDim,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>spatialDim,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>padA,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>strideA,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dilationA,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga91bcbdad0e53c07078287a74799c88cd" kindref="member">miopenConvolutionMode_t</ref>*<sp/>c_mode);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016" refid="group__convolutions_1ga245126fedf3a5c7abdd9cf6dcb959692" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1ga245126fedf3a5c7abdd9cf6dcb959692" kindref="member">miopenGetConvolutionGroupCount</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>groupCount);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032" refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1gad1bdda28a9f5a4a8ea9b718681ac72c2" kindref="member">miopenSetConvolutionGroupCount</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupCount);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1048" refid="group__convolutions_1gab17d87360f1931c8dc01baea31cfe412" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gab17d87360f1931c8dc01baea31cfe412" kindref="member">miopenSetTransposeConvOutputPadding</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adj_h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adj_w);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062" refid="group__convolutions_1gaad7d8adb6d907646ba23de7e506c5e5b" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1gaad7d8adb6d907646ba23de7e506c5e5b" kindref="member">miopenSetTransposeConvNdOutputPadding</ref>(</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spatialDim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>adjA);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1083" refid="group__convolutions_1ga5aae8bdb57c4b48263cdeba2f9f76ef0" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga5aae8bdb57c4b48263cdeba2f9f76ef0" kindref="member">miopenGetConvolutionForwardOutputDim</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>inputTensorDesc,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>filterDesc,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>c,</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>h,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>w);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1105" refid="group__convolutions_1ga4b71519741fb242c14b8e92f104301ee" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga4b71519741fb242c14b8e92f104301ee" kindref="member">miopenGetConvolutionNdForwardOutputDim</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>inputTensorDesc,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>filterDesc,</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>nDim,</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outputTensorDimA);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1117" refid="group__convolutions_1gacd21e57581808b98458dfa93c41a4ce3" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gacd21e57581808b98458dfa93c41a4ce3" kindref="member">miopenDestroyConvolutionDescriptor</ref>(miopenConvolutionDescriptor_t<sp/>convDesc);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125" refid="group__convolutions_1ga92f38ddd274388a05d77001dac71e7c0" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1ga92f38ddd274388a05d77001dac71e7c0" kindref="member">miopenSetConvolutionAttribute</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__convolutions_1ga784559bf30977ad39cbc491727eae485" kindref="member">miopenConvolutionAttrib_t</ref><sp/>attr,</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135" refid="group__convolutions_1ga41c95d7e368391df4e63539c88c53047" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1ga41c95d7e368391df4e63539c88c53047" kindref="member">miopenGetConvolutionAttribute</ref>(miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__convolutions_1ga784559bf30977ad39cbc491727eae485" kindref="member">miopenConvolutionAttrib_t</ref><sp/>attr,</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>value);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143" refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1145" refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a61b89a58eb19fea2207a17531e8205f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a61b89a58eb19fea2207a17531e8205f7" kindref="member">miopenConvolutionFwdAlgoGEMM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1146" refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3ade2d29687c9fb8bf450d3c8b946e25b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3ade2d29687c9fb8bf450d3c8b946e25b5" kindref="member">miopenConvolutionFwdAlgoDirect</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="1147" refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a154a04348f01564eff432c6432242f34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a154a04348f01564eff432c6432242f34" kindref="member">miopenConvolutionFwdAlgoFFT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="1148" refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a9e831d6f4b3ab127f370c3a3e55b2abf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a9e831d6f4b3ab127f370c3a3e55b2abf" kindref="member">miopenConvolutionFwdAlgoWinograd</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="1149" refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a5595e274c4012d54d83a9582e35ab2a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga5dd59dc3df4bcf9da4797c6169ad99c3a5595e274c4012d54d83a9582e35ab2a1" kindref="member">miopenConvolutionFwdAlgoImplicitGEMM</ref><sp/>=<sp/>5,<sp/></highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}<sp/><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref>;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155" refid="group__convolutions_1gaba316771c206839e54419b135027cbee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1157" refid="group__convolutions_1ggaba316771c206839e54419b135027cbeea4302eada3444370b4f5a516c9352c19e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ggaba316771c206839e54419b135027cbeea4302eada3444370b4f5a516c9352c19e" kindref="member">miopenConvolutionBwdWeightsAlgoGEMM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1158" refid="group__convolutions_1ggaba316771c206839e54419b135027cbeeacd485d0cbd7838b89bcbaa86add7fd44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ggaba316771c206839e54419b135027cbeeacd485d0cbd7838b89bcbaa86add7fd44" kindref="member">miopenConvolutionBwdWeightsAlgoDirect</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="1159" refid="group__convolutions_1ggaba316771c206839e54419b135027cbeea7eda3bac3601384c44f6390d66ded524" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ggaba316771c206839e54419b135027cbeea7eda3bac3601384c44f6390d66ded524" kindref="member">miopenConvolutionBwdWeightsAlgoWinograd</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="1160" refid="group__convolutions_1ggaba316771c206839e54419b135027cbeeaef65e6751c5dcd90eba6d7d198627698" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ggaba316771c206839e54419b135027cbeeaef65e6751c5dcd90eba6d7d198627698" kindref="member">miopenConvolutionBwdWeightsAlgoImplicitGEMM</ref><sp/>=<sp/>5,<sp/></highlight></codeline>
<codeline lineno="1161"><highlight class="normal">}<sp/><ref refid="group__convolutions_1gaba316771c206839e54419b135027cbee" kindref="member">miopenConvBwdWeightsAlgorithm_t</ref>;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166" refid="group__convolutions_1ga774e44db42d175d73c0d87272f6cdc05" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1168" refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a1ea94b2548956ecbb6d6aaead535a38a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a1ea94b2548956ecbb6d6aaead535a38a" kindref="member">miopenConvolutionBwdDataAlgoGEMM</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1169" refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a123132561c7ebe6a6d022016bc395658" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a123132561c7ebe6a6d022016bc395658" kindref="member">miopenConvolutionBwdDataAlgoDirect</ref><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="1170" refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a3c26d3cccb4763cc3370b72f71f11f72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a3c26d3cccb4763cc3370b72f71f11f72" kindref="member">miopenConvolutionBwdDataAlgoFFT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="1171" refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05ae4f98a414a6b1be0e14a9912b0459f54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05ae4f98a414a6b1be0e14a9912b0459f54" kindref="member">miopenConvolutionBwdDataAlgoWinograd</ref><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a0259649d7b2d71a88231257add330ea1" kindref="member">miopenTransposeBwdDataAlgoGEMM</ref><sp/>=</highlight></codeline>
<codeline lineno="1173" refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05a0259649d7b2d71a88231257add330ea1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/></highlight></codeline>
<codeline lineno="1174" refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05af68c8086106d6dd9c70be60e519e4a0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga774e44db42d175d73c0d87272f6cdc05af68c8086106d6dd9c70be60e519e4a0e" kindref="member">miopenConvolutionBwdDataAlgoImplicitGEMM</ref><sp/>=<sp/>5,<sp/></highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}<sp/><ref refid="group__convolutions_1ga774e44db42d175d73c0d87272f6cdc05" kindref="member">miopenConvBwdDataAlgorithm_t</ref>;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180" refid="group__convolutions_1ga3ba938002b32a963925c7cfce51ce15a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1182" refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aafbc6bee0271b18b1c38a47b6bfc71490" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aafbc6bee0271b18b1c38a47b6bfc71490" kindref="member">miopenConvolutionAlgoGEMM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1183" refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aa4ed1617fee46c3c345707f4111b42155" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aa4ed1617fee46c3c345707f4111b42155" kindref="member">miopenConvolutionAlgoDirect</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="1184" refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aa9e67d70ca65f50b5b2f10c9b60399f68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aa9e67d70ca65f50b5b2f10c9b60399f68" kindref="member">miopenConvolutionAlgoFFT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="1185" refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aa9b50ef38f49608a9f07658920923308c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aa9b50ef38f49608a9f07658920923308c" kindref="member">miopenConvolutionAlgoWinograd</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="1186" refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aaf3f2d5dd07e440e069264469c04c2168" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gga3ba938002b32a963925c7cfce51ce15aaf3f2d5dd07e440e069264469c04c2168" kindref="member">miopenConvolutionAlgoImplicitGEMM</ref><sp/>=<sp/>5,<sp/></highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}<sp/><ref refid="group__convolutions_1ga3ba938002b32a963925c7cfce51ce15a" kindref="member">miopenConvAlgorithm_t</ref>;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195" refid="structmiopen_conv_algo_perf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1199" refid="structmiopen_conv_algo_perf__t_1a486ab07b59bb35d3b5c9a5fc91113848" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref><sp/><ref refid="structmiopen_conv_algo_perf__t_1a486ab07b59bb35d3b5c9a5fc91113848" kindref="member">fwd_algo</ref>;<sp/></highlight></codeline>
<codeline lineno="1200" refid="structmiopen_conv_algo_perf__t_1a85b22349e9f06690e5de6dfa91e78af2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gaba316771c206839e54419b135027cbee" kindref="member">miopenConvBwdWeightsAlgorithm_t</ref><sp/><ref refid="structmiopen_conv_algo_perf__t_1a85b22349e9f06690e5de6dfa91e78af2" kindref="member">bwd_weights_algo</ref>;<sp/></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga774e44db42d175d73c0d87272f6cdc05" kindref="member">miopenConvBwdDataAlgorithm_t</ref></highlight></codeline>
<codeline lineno="1203" refid="structmiopen_conv_algo_perf__t_1a4c4911f1fcbe6e1a189213b577aaec57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmiopen_conv_algo_perf__t_1a4c4911f1fcbe6e1a189213b577aaec57" kindref="member">bwd_data_algo</ref>;<sp/></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206" refid="structmiopen_conv_algo_perf__t_1a8bb195c7e7d6254048e91646897bdf30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmiopen_conv_algo_perf__t_1a8bb195c7e7d6254048e91646897bdf30" kindref="member">time</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1207" refid="structmiopen_conv_algo_perf__t_1a5fc53268011f327751ea0384e0486034" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structmiopen_conv_algo_perf__t_1a5fc53268011f327751ea0384e0486034" kindref="member">memory</ref>;<sp/></highlight></codeline>
<codeline lineno="1209"><highlight class="normal">}<sp/><ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref>;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219" refid="structmiopen_conv_solution__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1221" refid="structmiopen_conv_solution__t_1acaa5c3a144d37d4e2a5216154f9ffa59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmiopen_conv_solution__t_1acaa5c3a144d37d4e2a5216154f9ffa59" kindref="member">time</ref>;<sp/></highlight></codeline>
<codeline lineno="1224" refid="structmiopen_conv_solution__t_1a884db41bf1a99e248c60c083158f8ae7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structmiopen_conv_solution__t_1a884db41bf1a99e248c60c083158f8ae7" kindref="member">workspace_size</ref>;<sp/></highlight></codeline>
<codeline lineno="1226" refid="structmiopen_conv_solution__t_1a3e658d77c459c10fad5b33b9d350a468" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structmiopen_conv_solution__t_1a3e658d77c459c10fad5b33b9d350a468" kindref="member">solution_id</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="1227" refid="structmiopen_conv_solution__t_1a142ac7ce088639c58f995ed59f79e5db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga3ba938002b32a963925c7cfce51ce15a" kindref="member">miopenConvAlgorithm_t</ref><sp/><ref refid="structmiopen_conv_solution__t_1a142ac7ce088639c58f995ed59f79e5db" kindref="member">algorithm</ref>;<sp/></highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}<sp/><ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref>;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1247" refid="group__convolutions_1gaf9dbf5fdad1bc5faf1a9184ab2099439" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gaf9dbf5fdad1bc5faf1a9184ab2099439" kindref="member">miopenConvolutionForwardGetSolutionCount</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>solutionCount);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1278" refid="group__convolutions_1gaf0c92cab22c81d632d596d30757dcba5" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gaf0c92cab22c81d632d596d30757dcba5" kindref="member">miopenConvolutionForwardGetSolution</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxSolutionCount,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>solutionCount,</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref>*<sp/>solutions);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1305" refid="group__convolutions_1ga1960157add7bdd508dc345ea98801912" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga1960157add7bdd508dc345ea98801912" kindref="member">miopenConvolutionForwardGetSolutionWorkspaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>solution_id,</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1331" refid="group__convolutions_1gabacb81f250e154b92c628defe53a1a6b" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gabacb81f250e154b92c628defe53a1a6b" kindref="member">miopenConvolutionForwardCompileSolution</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>solution_id);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1356" refid="group__convolutions_1ga14fe027d4bb473a448eb26fe79e61002" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga14fe027d4bb473a448eb26fe79e61002" kindref="member">miopenConvolutionForwardImmediate</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize,</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>solution_id);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1386" refid="group__convolutions_1gac245152e4fe078d089f2ac9247aed048" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gac245152e4fe078d089f2ac9247aed048" kindref="member">miopenConvolutionBackwardDataGetSolutionCount</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>solutionCount);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1418" refid="group__convolutions_1ga8c7f4bfae33e8d489c75c5e3717321f8" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga8c7f4bfae33e8d489c75c5e3717321f8" kindref="member">miopenConvolutionBackwardDataGetSolution</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxSolutionCount,</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>solutionCount,</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref>*<sp/>solutions);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1445" refid="group__convolutions_1gafdf6485c7f4ca08822feb918f5078f09" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gafdf6485c7f4ca08822feb918f5078f09" kindref="member">miopenConvolutionBackwardDataGetSolutionWorkspaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>solution_id,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1472" refid="group__convolutions_1ga16cd48938728e81468a1e80ccd07822f" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga16cd48938728e81468a1e80ccd07822f" kindref="member">miopenConvolutionBackwardDataCompileSolution</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>solution_id);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1497" refid="group__convolutions_1gaacefbf47cf57a6ade413ae23bbf5cabc" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gaacefbf47cf57a6ade413ae23bbf5cabc" kindref="member">miopenConvolutionBackwardDataImmediate</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize,</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>solution_id);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1527" refid="group__convolutions_1gacf0d3225d92394cf8aad48da3902b64c" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gacf0d3225d92394cf8aad48da3902b64c" kindref="member">miopenConvolutionBackwardWeightsGetSolutionCount</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dwDesc,</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>solutionCount);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1558" refid="group__convolutions_1ga720035aea137cd8b2fb5ea22afd08ea4" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga720035aea137cd8b2fb5ea22afd08ea4" kindref="member">miopenConvolutionBackwardWeightsGetSolution</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dwDesc,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxSolutionCount,</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>solutionCount,</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmiopen_conv_solution__t" kindref="compound">miopenConvSolution_t</ref>*<sp/>solutions);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584" refid="group__convolutions_1gaecbba471182df8fa973a95d5dedd7259" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1gaecbba471182df8fa973a95d5dedd7259" kindref="member">miopenConvolutionBackwardWeightsGetSolutionWorkspaceSize</ref>(</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dwDesc,</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>solution_id,</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1611" refid="group__convolutions_1ga4df568848733b9d49a416813df1249d7" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga4df568848733b9d49a416813df1249d7" kindref="member">miopenConvolutionBackwardWeightsCompileSolution</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dwDesc,</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>solution_id);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1637" refid="group__convolutions_1ga816e7586b740e8ad652aac31f9efe9da" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga816e7586b740e8ad652aac31f9efe9da" kindref="member">miopenConvolutionBackwardWeightsImmediate</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dwDesc,</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dw,</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize,</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>solution_id);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1669" refid="group__convolutions_1ga625028c7ac3e3aeccbaea277096cca08" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga625028c7ac3e3aeccbaea277096cca08" kindref="member">miopenConvolutionForwardGetWorkSpaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1716" refid="group__convolutions_1gaca2f3b99b04393beebaee41e3d990f68" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gaca2f3b99b04393beebaee41e3d990f68" kindref="member">miopenFindConvolutionForwardAlgorithm</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>requestAlgoCount,</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>returnedAlgoCount,</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref>*<sp/>perfResults,</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize,</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exhaustiveSearch);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765" refid="group__convolutions_1ga1de4638ae8f3330f3c777f91a67889ea" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1ga1de4638ae8f3330f3c777f91a67889ea" kindref="member">miopenConvolutionForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref><sp/>algo,</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794" refid="group__convolutions_1ga8e445590bd57cd0038324943791a9b4a" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1ga8e445590bd57cd0038324943791a9b4a" kindref="member">miopenConvolutionForwardBias</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>bDesc,</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>b,</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1822" refid="group__convolutions_1gac94e84d34972a135648c94b89d92f9cf" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gac94e84d34972a135648c94b89d92f9cf" kindref="member">miopenConvolutionBackwardDataGetWorkSpaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1869" refid="group__convolutions_1ga87840a99d86f888f4f3356adf7a15df0" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga87840a99d86f888f4f3356adf7a15df0" kindref="member">miopenFindConvolutionBackwardDataAlgorithm</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>requestAlgoCount,</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>returnedAlgoCount,</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref>*<sp/>perfResults,</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize,</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exhaustiveSearch);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1918" refid="group__convolutions_1ga3fb51da4c191c70727c09a1560d38ddd" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga3fb51da4c191c70727c09a1560d38ddd" kindref="member">miopenConvolutionBackwardData</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga774e44db42d175d73c0d87272f6cdc05" kindref="member">miopenConvBwdDataAlgorithm_t</ref><sp/>algo,</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="1954" refid="group__convolutions_1ga7eb4416db9701236648ba2b60d91cc1a" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga7eb4416db9701236648ba2b60d91cc1a" kindref="member">miopenConvolutionBackwardWeightsGetWorkSpaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dwDesc,</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2001" refid="group__convolutions_1ga57dda8a3c4ecddb988dbba421151e761" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1ga57dda8a3c4ecddb988dbba421151e761" kindref="member">miopenFindConvolutionBackwardWeightsAlgorithm</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dwDesc,</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dw,</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>requestAlgoCount,</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>returnedAlgoCount,</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmiopen_conv_algo_perf__t" kindref="compound">miopenConvAlgoPerf_t</ref>*<sp/>perfResults,</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize,</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exhaustiveSearch);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2050" refid="group__convolutions_1gac651a5c2fe903191bb6a383b1890ea0d" refkind="member"><highlight class="normal"><ref refid="group__convolutions_1gac651a5c2fe903191bb6a383b1890ea0d" kindref="member">miopenConvolutionBackwardWeights</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1gaba316771c206839e54419b135027cbee" kindref="member">miopenConvBwdWeightsAlgorithm_t</ref><sp/>algo,</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dwDesc,</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dw,</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079" refid="group__convolutions_1gafe46a24bd8eba36fe34dbf0162ada0d2" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__convolutions_1gafe46a24bd8eba36fe34dbf0162ada0d2" kindref="member">miopenConvolutionBackwardBias</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dbDesc,</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>db);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>CONVOLUTIONS<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pooling<sp/>APIs</highlight></codeline>
<codeline lineno="2101" refid="group__pooling_1gabd7d9b79e9164e8a3c91855c015cc43d" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1gabd7d9b79e9164e8a3c91855c015cc43d" kindref="member">miopenCreatePoolingDescriptor</ref>(miopenPoolingDescriptor_t*<sp/>poolDesc);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111" refid="group__pooling_1gac31ae1c8976de3929adaf898c033f8e8" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1gac31ae1c8976de3929adaf898c033f8e8" kindref="member">miopenSetPoolingIndexType</ref>(miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547" kindref="member">miopenIndexType_t</ref><sp/>index_type);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121" refid="group__pooling_1ga8f2bc026ee75ccac3aaaf18b4f2791dd" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1ga8f2bc026ee75ccac3aaaf18b4f2791dd" kindref="member">miopenGetPoolingIndexType</ref>(miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pooling_1ga8428bfacfbe899245b707fa7a6b95547" kindref="member">miopenIndexType_t</ref>*<sp/>index_type);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131" refid="group__pooling_1ga05ef9d8e8b8127e468efe2a4310b180f" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1ga05ef9d8e8b8127e468efe2a4310b180f" kindref="member">miopenSetPoolingWorkSpaceIndexMode</ref>(</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/>miopenPoolingDescriptor_t<sp/>poolDesc,<sp/><ref refid="group__pooling_1ga8f69978be75d6d32dbc172d3a99695e7" kindref="member">miopenPoolingWorkspaceIndexMode_t</ref><sp/>workspace_index);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140" refid="group__pooling_1ga6beeb9aba269f016cfeda70390db77b5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1ga6beeb9aba269f016cfeda70390db77b5" kindref="member">miopenGetPoolingWorkSpaceIndexMode</ref>(</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>miopenPoolingDescriptor_t<sp/>poolDesc,<sp/><ref refid="group__pooling_1ga8f69978be75d6d32dbc172d3a99695e7" kindref="member">miopenPoolingWorkspaceIndexMode_t</ref>*<sp/>workspace_index);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157" refid="group__pooling_1ga03b3553e6cc0162c9a31f47cf9cdd4f0" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1ga03b3553e6cc0162c9a31f47cf9cdd4f0" kindref="member">miopenSet2dPoolingDescriptor</ref>(miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" kindref="member">miopenPoolingMode_t</ref><sp/>mode,</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowHeight,</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowWidth,</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pad_h,</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pad_w,</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_h,</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_w);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2180" refid="group__pooling_1gad72feef4d7d5e37044b61c221bd1e2a9" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1gad72feef4d7d5e37044b61c221bd1e2a9" kindref="member">miopenGet2dPoolingDescriptor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" kindref="member">miopenPoolingMode_t</ref>*<sp/>mode,</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>windowHeight,</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>windowWidth,</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pad_h,</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pad_w,</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>stride_h,</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>stride_w);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2204" refid="group__pooling_1ga1198df51381b094021aee5b1a1a05e3a" refkind="member"><highlight class="normal"><ref refid="group__pooling_1ga1198df51381b094021aee5b1a1a05e3a" kindref="member">miopenGetPoolingForwardOutputDim</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n,</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>c,</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>h,</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>w);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226" refid="group__pooling_1ga2c3fa7681fe3535180eaa89ba48eea3b" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1ga2c3fa7681fe3535180eaa89ba48eea3b" kindref="member">miopenSetNdPoolingDescriptor</ref>(miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" kindref="member">miopenPoolingMode_t</ref><sp/>mode,</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbDims,</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>windowDimA,</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>padA,</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>stridesA);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249" refid="group__pooling_1gabc760e40557710fe52cafde0cbfdfcf3" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1gabc760e40557710fe52cafde0cbfdfcf3" kindref="member">miopenGetNdPoolingDescriptor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbDimsRequested,</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pooling_1ga4243bc20d51988902e2e22a5d2b6bb5c" kindref="member">miopenPoolingMode_t</ref>*<sp/>mode,</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>nbDims,</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>windowDimA,</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>padA,</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>stridesA);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2270" refid="group__pooling_1gab70ecbdc8d96942b78b0f3ca785114d6" refkind="member"><highlight class="normal"><ref refid="group__pooling_1gab70ecbdc8d96942b78b0f3ca785114d6" kindref="member">miopenGetPoolingNdForwardOutputDim</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>tensorDesc,</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dims,</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>tensorDimArr);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287" refid="group__pooling_1ga23a4bf9e5cf91da0765c2c386b8aaab6" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1ga23a4bf9e5cf91da0765c2c386b8aaab6" kindref="member">miopenPoolingGetWorkSpaceSize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2303" refid="group__pooling_1ga5a8b1812384cb03b5eb4437950e2f334" refkind="member"><highlight class="normal"><ref refid="group__pooling_1ga5a8b1812384cb03b5eb4437950e2f334" kindref="member">miopenPoolingGetWorkSpaceSizeV2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327" refid="group__pooling_1ga2f64eee5653500719bfd0badb98aad86" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1ga2f64eee5653500719bfd0badb98aad86" kindref="member">miopenPoolingForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_backward,</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359" refid="group__pooling_1gaf0f319af071fe15254d800bb3e452f20" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1gaf0f319af071fe15254d800bb3e452f20" kindref="member">miopenPoolingBackward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenPoolingDescriptor_t<sp/>poolDesc,</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378" refid="group__pooling_1gae7ea63b05752da3fba82a6dca1de65b4" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__pooling_1gae7ea63b05752da3fba82a6dca1de65b4" kindref="member">miopenDestroyPoolingDescriptor</ref>(miopenPoolingDescriptor_t<sp/>poolDesc);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>POOLING<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LRN<sp/>APIs</highlight></codeline>
<codeline lineno="2393" refid="group___l_r_n_1ga41f093f397f886f31fe905e50167cac1" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___l_r_n_1ga41f093f397f886f31fe905e50167cac1" kindref="member">miopenCreateLRNDescriptor</ref>(miopenLRNDescriptor_t*<sp/>lrnDesc);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2408" refid="group___l_r_n_1ga322f5ee2751280378ca6756219052334" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___l_r_n_1ga322f5ee2751280378ca6756219052334" kindref="member">miopenSetLRNDescriptor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenLRNDescriptor_t<sp/>lrnDesc,</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___l_r_n_1gae8c4f5513e59a0c2870013504f9b5c4d" kindref="member">miopenLRNMode_t</ref><sp/>mode,</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lrnN,</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lrnAlpha,</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lrnBeta,</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lrnK);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight></codeline>
<codeline lineno="2427" refid="group___l_r_n_1ga48c74e2a652a14083de6687b812153e2" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___l_r_n_1ga48c74e2a652a14083de6687b812153e2" kindref="member">miopenGetLRNDescriptor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenLRNDescriptor_t<sp/>lrnDesc,</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___l_r_n_1gae8c4f5513e59a0c2870013504f9b5c4d" kindref="member">miopenLRNMode_t</ref>*<sp/>mode,</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>lrnN,</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>lrnAlpha,</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>lrnBeta,</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>lrnK);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443" refid="group___l_r_n_1ga9be3e08ec25eaf2b99cf0b8f88711f39" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___l_r_n_1ga9be3e08ec25eaf2b99cf0b8f88711f39" kindref="member">miopenLRNGetWorkSpaceSize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464" refid="group___l_r_n_1gaf5ec38b9a11b7fa584bf8a635d03c68e" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___l_r_n_1gaf5ec38b9a11b7fa584bf8a635d03c68e" kindref="member">miopenLRNForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenLRNDescriptor_t<sp/>lrnDesc,</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_backward,</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2492" refid="group___l_r_n_1ga637b624c1a29d5f0b9c5a4bfcee353a5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___l_r_n_1ga637b624c1a29d5f0b9c5a4bfcee353a5" kindref="member">miopenLRNBackward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenLRNDescriptor_t<sp/>lrnDesc,</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511" refid="group___l_r_n_1gaf73f4948c1e487621773ea5286cc8843" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___l_r_n_1gaf73f4948c1e487621773ea5286cc8843" kindref="member">miopenDestroyLRNDescriptor</ref>(miopenLRNDescriptor_t<sp/>lrnDesc);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>LRN<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LayerNorm<sp/>APIs</highlight></codeline>
<codeline lineno="2542" refid="group__layernorm_1ga167bb1f70a5625e10295132444bab39d" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__layernorm_1ga167bb1f70a5625e10295132444bab39d" kindref="member">miopenLayerNormForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__layernorm_1ga996bace523abc82c6847984c34b60d5b" kindref="member">miopenNormMode_t</ref><sp/>mode,</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>weightDesc,</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>weight,</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>biasDesc,</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bias,</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon,</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>normalized_dim,</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>meanDesc,</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mean,</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>rstdDesc,</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>rstd);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>LAYERNORM<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cat<sp/>APIs</highlight></codeline>
<codeline lineno="2580" refid="group__cat_1ga1d94a26be667c754a8ab5cce29524d29" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__cat_1ga1d94a26be667c754a8ab5cce29524d29" kindref="member">miopenCatForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>xCount,</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>xDescs,</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>xs,</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>dim);</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>CAT<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Batch-Normalization<sp/>APIs</highlight></codeline>
<codeline lineno="2614" refid="group__batchnorm_1gaf2aef2cbd792e82b32b305039d6e4662" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__batchnorm_1gaf2aef2cbd792e82b32b305039d6e4662" kindref="member">miopenDeriveBNTensorDescriptor</ref>(miopenTensorDescriptor_t<sp/>derivedBnDesc,</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref><sp/>bn_mode);</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2657" refid="group__batchnorm_1ga343969e08d276e480a2fa3b14151f287" refkind="member"><highlight class="normal"><ref refid="group__batchnorm_1ga343969e08d276e480a2fa3b14151f287" kindref="member">miopenBatchNormalizationForwardTraining</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref><sp/>bn_mode,</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>bnScaleBiasMeanVarDesc,</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnScale,</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnBias,</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expAvgFactor,</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>resultRunningMean,</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>resultRunningVariance,</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon,</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>resultSaveMean,</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>resultSaveInvVariance);</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2705" refid="group__batchnorm_1ga076386cb1c1bf692f1883c3d1a013a45" refkind="member"><highlight class="normal"><ref refid="group__batchnorm_1ga076386cb1c1bf692f1883c3d1a013a45" kindref="member">miopenBatchNormalizationForwardInference</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref><sp/>bn_mode,</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>bnScaleBiasMeanVarDesc,</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnScale,</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnBias,</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>estimatedMean,</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>estimatedVariance,</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2755" refid="group__batchnorm_1gaae2f39675310df613802dcf8cfd446a5" refkind="member"><highlight class="normal"><ref refid="group__batchnorm_1gaae2f39675310df613802dcf8cfd446a5" kindref="member">miopenBatchNormalizationBackward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref><sp/>bn_mode,</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alphaDataDiff,</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>betaDataDiff,</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alphaParamDiff,</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>betaParamDiff,</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>bnScaleBiasDiffDesc,</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnScale,</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>resultBnScaleDiff,</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>resultBnBiasDiff,</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon,</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>savedMean,</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>savedInvVariance);</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>BATCHNORM<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Activation<sp/>APIs</highlight></codeline>
<codeline lineno="2788"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2789" refid="group__activation_1ga92c0d5c8719120d3ade6a83f9c35c4af" refkind="member"><highlight class="normal"><ref refid="group__activation_1ga92c0d5c8719120d3ade6a83f9c35c4af" kindref="member">miopenCreateActivationDescriptor</ref>(miopenActivationDescriptor_t*<sp/>activDesc);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2803" refid="group__activation_1ga91813317a3b87f4b6aaaa960a2cfc58a" refkind="member"><highlight class="normal"><ref refid="group__activation_1ga91813317a3b87f4b6aaaa960a2cfc58a" kindref="member">miopenSetActivationDescriptor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenActivationDescriptor_t<sp/>activDesc,</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref><sp/>mode,</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>activAlpha,</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>activBeta,</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>activGamma);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2821" refid="group__activation_1gac2a4025376e08329662ebb982e037def" refkind="member"><highlight class="normal"><ref refid="group__activation_1gac2a4025376e08329662ebb982e037def" kindref="member">miopenGetActivationDescriptor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenActivationDescriptor_t<sp/>activDesc,</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref>*<sp/>mode,</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>activAlpha,</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>activBeta,</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>activGamma);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839" refid="group__activation_1ga33971a83fd4a33df97f790421c208d49" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__activation_1ga33971a83fd4a33df97f790421c208d49" kindref="member">miopenActivationForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenActivationDescriptor_t<sp/>activDesc,</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y);</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight></codeline>
<codeline lineno="2864" refid="group__activation_1ga4f43724d9ab601a14d1355cc3e4ba8ce" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__activation_1ga4f43724d9ab601a14d1355cc3e4ba8ce" kindref="member">miopenActivationBackward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenActivationDescriptor_t<sp/>activDesc,</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx);</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="2883" refid="group__activation_1gae281c7cc4e97934b57cbedd6c73c3133" refkind="member"><highlight class="normal"><ref refid="group__activation_1gae281c7cc4e97934b57cbedd6c73c3133" kindref="member">miopenDestroyActivationDescriptor</ref>(miopenActivationDescriptor_t<sp/>activDesc);</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>ACTIVATION<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Softmax<sp/>APIs</highlight></codeline>
<codeline lineno="2906" refid="group__softmax_1ga3b2ad480ed94ab0f39a3d0e9c2bf1ef8" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__softmax_1ga3b2ad480ed94ab0f39a3d0e9c2bf1ef8" kindref="member">miopenSoftmaxForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight></codeline>
<codeline lineno="2929" refid="group__softmax_1ga86f410cedb58f1849e507436036d8329" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__softmax_1ga86f410cedb58f1849e507436036d8329" kindref="member">miopenSoftmaxBackward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx);</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight></codeline>
<codeline lineno="2952" refid="group__softmax_1ga71e476f60294b1dae6aa80ff773804b5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__softmax_1ga71e476f60294b1dae6aa80ff773804b5" kindref="member">miopenSoftmaxForward_V2</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfe" kindref="member">miopenSoftmaxAlgorithm_t</ref><sp/>algorithm,</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__softmax_1gaea670eae33cee9aee53d48624cf28d7d" kindref="member">miopenSoftmaxMode_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2977" refid="group__softmax_1ga35e023988554fd30579fd6c8b205983a" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__softmax_1ga35e023988554fd30579fd6c8b205983a" kindref="member">miopenSoftmaxBackward_V2</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__softmax_1gaf2376aefd82e3d6e08df6da4810ffdfe" kindref="member">miopenSoftmaxAlgorithm_t</ref><sp/>algorithm,</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__softmax_1gaea670eae33cee9aee53d48624cf28d7d" kindref="member">miopenSoftmaxMode_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>SOFTMAX<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2995" refid="group___f_u_s_i_o_n_1ga66a35ee58b7bae6400997b70c60d6579" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenFusionPlanDescriptor);</highlight></codeline>
<codeline lineno="2996" refid="miopen_8h_1ab7b2d0b6d40df1f72c66432d5b743bc2" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenOperatorDescriptor);</highlight></codeline>
<codeline lineno="2997" refid="miopen_8h_1af0ec2e8f14b734074be71321165e69ea" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenOperatorArgs);</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight></codeline>
<codeline lineno="3007" refid="group___f_u_s_i_o_n_1ga774d5d8b0c1ca371d920e78387100858" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3009" refid="group___f_u_s_i_o_n_1gga774d5d8b0c1ca371d920e78387100858a558bb4e68777056ebba6ee78ae7e0ad8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___f_u_s_i_o_n_1gga774d5d8b0c1ca371d920e78387100858a558bb4e68777056ebba6ee78ae7e0ad8" kindref="member">miopenVerticalFusion</ref><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="3010" refid="group___f_u_s_i_o_n_1gga774d5d8b0c1ca371d920e78387100858a54a662450548ccf631bd635eecb1f092" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___f_u_s_i_o_n_1gga774d5d8b0c1ca371d920e78387100858a54a662450548ccf631bd635eecb1f092" kindref="member">miopenHorizontalFusion</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="3011"><highlight class="normal">}<sp/><ref refid="group___f_u_s_i_o_n_1ga774d5d8b0c1ca371d920e78387100858" kindref="member">miopenFusionDirection_t</ref>;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020" refid="group___f_u_s_i_o_n_1gad6221c451528eac3d9592842f1df2f71" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1gad6221c451528eac3d9592842f1df2f71" kindref="member">miopenCreateFusionPlan</ref>(miopenFusionPlanDescriptor_t*<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___f_u_s_i_o_n_1ga774d5d8b0c1ca371d920e78387100858" kindref="member">miopenFusionDirection_t</ref><sp/>fuseDirection,</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>inputDesc);</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029" refid="group___f_u_s_i_o_n_1ga72b408c1034c7c934c26cb86fde84e9b" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1ga72b408c1034c7c934c26cb86fde84e9b" kindref="member">miopenDestroyFusionPlan</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc);</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3037" refid="group___f_u_s_i_o_n_1ga9cbffb2ba55ade895a5fcb005a03c9e5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1ga9cbffb2ba55ade895a5fcb005a03c9e5" kindref="member">miopenCompileFusionPlan</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionPlanDescriptor_t<sp/>fusePlanDesc);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050" refid="group___f_u_s_i_o_n_1ga6f35ee49f5a6fcd81f3b4cb82f60f830" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1ga6f35ee49f5a6fcd81f3b4cb82f60f830" kindref="member">miopenFusionPlanGetOp</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op_idx,</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionOpDescriptor_t*<sp/>op);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3062" refid="group___f_u_s_i_o_n_1ga3afcf7d3325e8b251eb7b74da8bdc13c" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1ga3afcf7d3325e8b251eb7b74da8bdc13c" kindref="member">miopenFusionPlanGetWorkSpaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize,</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref><sp/>algo);</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3085" refid="group___f_u_s_i_o_n_1ga305370335f4a926f2a2b1cf1c72727f7" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1ga305370335f4a926f2a2b1cf1c72727f7" kindref="member">miopenFusionPlanConvolutionGetAlgo</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>requestAlgoCount,</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>returnedAlgoCount,</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref>*<sp/>returnedAlgos);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight></codeline>
<codeline lineno="3099" refid="group___f_u_s_i_o_n_1ga45b767f63622636b63f5ad453358cfc9" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1ga45b767f63622636b63f5ad453358cfc9" kindref="member">miopenFusionPlanConvolutionSetAlgo</ref>(</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/>miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,<sp/><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref><sp/>algo);</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3110" refid="group___f_u_s_i_o_n_1ga5ce93b3bd99720da807a3bfb8f778821" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1ga5ce93b3bd99720da807a3bfb8f778821" kindref="member">miopenCreateOpConvForward</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionOpDescriptor_t*<sp/>convOp,</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc);</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Activation<sp/>forward<sp/>create<sp/>ops<sp/>---</highlight></codeline>
<codeline lineno="3125"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3126" refid="group___f_u_s_i_o_n_1ga733b3205944e4707ce9b9565927be47d" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1ga733b3205944e4707ce9b9565927be47d" kindref="member">miopenCreateOpActivationForward</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionOpDescriptor_t*<sp/>activFwdOp,</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Activation<sp/>backward<sp/>create<sp/>ops<sp/>---</highlight></codeline>
<codeline lineno="3138"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3139" refid="group___f_u_s_i_o_n_1ga1181e44c0d111616642fffe0c323e21e" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1ga1181e44c0d111616642fffe0c323e21e" kindref="member">miopenCreateOpActivationBackward</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionOpDescriptor_t*<sp/>activBwdOp,</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__activation_1ga5fd27264d844b20dd8d63ab678f09af6" kindref="member">miopenActivationMode_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bias<sp/>create<sp/>ops<sp/>---</highlight></codeline>
<codeline lineno="3151" refid="group___f_u_s_i_o_n_1gafe82043e423cc3af83f0a86683c2faa4" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1gafe82043e423cc3af83f0a86683c2faa4" kindref="member">miopenCreateOpBiasForward</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionOpDescriptor_t*<sp/>biasOp,</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>bDesc);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Batch<sp/>normalization<sp/>create<sp/>ops<sp/>---</highlight></codeline>
<codeline lineno="3164"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3165" refid="group___f_u_s_i_o_n_1ga493ad077910d796d4391f40032983da4" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1ga493ad077910d796d4391f40032983da4" kindref="member">miopenCreateOpBatchNormInference</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionOpDescriptor_t*<sp/>bnOp,</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref><sp/>bn_mode,</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>bnScaleBiasMeanVarDesc);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3180" refid="group___f_u_s_i_o_n_1ga2c8f42b324b568ea2f9e1678cca809b0" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1ga2c8f42b324b568ea2f9e1678cca809b0" kindref="member">miopenCreateOpBatchNormForward</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionOpDescriptor_t*<sp/>bnFwdOp,</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref><sp/>bn_mode,</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>runningMeanVariance);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3193" refid="group___f_u_s_i_o_n_1gab536f8a2157852540dd2a2fcff5e90c3" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1gab536f8a2157852540dd2a2fcff5e90c3" kindref="member">miopenCreateOpBatchNormBackward</ref>(miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFusionOpDescriptor_t*<sp/>bnBwdOp,</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__batchnorm_1gab21179fc753f8e0d1a6f23ac9b340a26" kindref="member">miopenBatchNormMode_t</ref><sp/>bn_mode);</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight><highlight class="comment">//---</highlight></codeline>
<codeline lineno="3203" refid="group___f_u_s_i_o_n_1gab7c88a2676231b3e9d1a623616ea9053" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1gab7c88a2676231b3e9d1a623616ea9053" kindref="member">miopenCreateOperatorArgs</ref>(miopenOperatorArgs_t*<sp/>args);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210" refid="group___f_u_s_i_o_n_1gab395e7ca41f74ed5deda61bc173e3db1" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1gab395e7ca41f74ed5deda61bc173e3db1" kindref="member">miopenDestroyOperatorArgs</ref>(miopenOperatorArgs_t<sp/>args);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convolution<sp/>set<sp/>arguments<sp/>---</highlight></codeline>
<codeline lineno="3222" refid="group___f_u_s_i_o_n_1gabc13e846bf2934371aa914d05d727b31" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1gabc13e846bf2934371aa914d05d727b31" kindref="member">miopenSetOpArgsConvForward</ref>(miopenOperatorArgs_t<sp/>args,</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenFusionOpDescriptor_t<sp/>convOp,</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Activation<sp/>set<sp/>arguments<sp/>---</highlight></codeline>
<codeline lineno="3239"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3240" refid="group___f_u_s_i_o_n_1gaaa5188cbdbf34f68ba2fc02be21ffb7c" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1gaaa5188cbdbf34f68ba2fc02be21ffb7c" kindref="member">miopenSetOpArgsActivForward</ref>(miopenOperatorArgs_t<sp/>args,</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenFusionOpDescriptor_t<sp/>activFwdOp,</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>activAlpha,</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>activBeta,</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>activGamma);</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3262" refid="group___f_u_s_i_o_n_1ga85bc81886a81df6b3610276674fe3562" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1ga85bc81886a81df6b3610276674fe3562" kindref="member">miopenSetOpArgsActivBackward</ref>(miopenOperatorArgs_t<sp/>args,</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenFusionOpDescriptor_t<sp/>activBwdOp,</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserved,</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>activAlpha,</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>activBeta,</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>activGamma);</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Batch<sp/>Normalization<sp/>set<sp/>arguments<sp/>---</highlight></codeline>
<codeline lineno="3286"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3287" refid="group___f_u_s_i_o_n_1ga671c3d981cd6f5f149adf4421b00fcea" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1ga671c3d981cd6f5f149adf4421b00fcea" kindref="member">miopenSetOpArgsBatchNormInference</ref>(miopenOperatorArgs_t<sp/>args,</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenFusionOpDescriptor_t<sp/>bnOp,</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnScale,</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnBias,</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>estimatedMean,</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>estimatedVariance,</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"></highlight></codeline>
<codeline lineno="3313" refid="group___f_u_s_i_o_n_1ga6754e3fce005f9b9d352211cc1430b1b" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1ga6754e3fce005f9b9d352211cc1430b1b" kindref="member">miopenSetOpArgsBatchNormForward</ref>(miopenOperatorArgs_t<sp/>args,</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenFusionOpDescriptor_t<sp/>bnOp,</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnScale,</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnBias,</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>savedMean,</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>savedInvVariance,</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>runningMean,</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>runningVariance,</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expAvgFactor,</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3341" refid="group___f_u_s_i_o_n_1gaa7f311a862d10ff2e4d771072f6ad54a" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1gaa7f311a862d10ff2e4d771072f6ad54a" kindref="member">miopenSetOpArgsBatchNormBackward</ref>(miopenOperatorArgs_t<sp/>args,</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenFusionOpDescriptor_t<sp/>bnOp,</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnScale,</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bnBias,</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>resultBnScaleDiff,</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>resultBnBiasDiff,</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>savedMean,</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>savedInvVariance);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bias<sp/>forward<sp/>set<sp/>arguments<sp/>---</highlight></codeline>
<codeline lineno="3363" refid="group___f_u_s_i_o_n_1ga5cddc46abf5c9ea46bc0bbcc161f6eaa" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___f_u_s_i_o_n_1ga5cddc46abf5c9ea46bc0bbcc161f6eaa" kindref="member">miopenSetOpArgsBiasForward</ref>(miopenOperatorArgs_t<sp/>args,</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenFusionOpDescriptor_t<sp/>biasOp,</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bias);</highlight></codeline>
<codeline lineno="3380"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3381" refid="group___f_u_s_i_o_n_1ga6dae1b3552cbd88138544937b014cd5e" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1ga6dae1b3552cbd88138544937b014cd5e" kindref="member">miopenExecuteFusionPlan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenFusionPlanDescriptor_t<sp/>fusePlanDesc,</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>inputDesc,</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>input,</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>outputDesc,</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>output,</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenOperatorArgs_t<sp/>args);</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3413" refid="group___f_u_s_i_o_n_1gad2e1ed4cfbdd05c244e407933ed8541b" refkind="member"><highlight class="normal"><ref refid="group___f_u_s_i_o_n_1gad2e1ed4cfbdd05c244e407933ed8541b" kindref="member">miopenConvolutionBiasActivationForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha1,</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenConvolutionDescriptor_t<sp/>convDesc,</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga5dd59dc3df4bcf9da4797c6169ad99c3" kindref="member">miopenConvFwdAlgorithm_t</ref><sp/>algo,</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workspace,</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workspaceSizeInBytes,</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha2,</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>zDesc,</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>z,</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>biasDesc,</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bias,</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenActivationDescriptor_t<sp/>activationDesc,</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>FUSION<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3442" refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3444" refid="group___r_n_n_1gga016f266507f199def908fe39c43d7877af714eb36c96ca365b643e7e8417c10cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga016f266507f199def908fe39c43d7877af714eb36c96ca365b643e7e8417c10cc" kindref="member">miopenRNNRELU</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="3445" refid="group___r_n_n_1gga016f266507f199def908fe39c43d7877a1d43e2e3151aa1266cc10e8623c0a32b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga016f266507f199def908fe39c43d7877a1d43e2e3151aa1266cc10e8623c0a32b" kindref="member">miopenRNNTANH</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="3446" refid="group___r_n_n_1gga016f266507f199def908fe39c43d7877a97804b8e078f16b327e50e5554df970c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga016f266507f199def908fe39c43d7877a97804b8e078f16b327e50e5554df970c" kindref="member">miopenLSTM</ref><sp/><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="3447" refid="group___r_n_n_1gga016f266507f199def908fe39c43d7877aa13bc340d91e98e610e92b75e5928a66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga016f266507f199def908fe39c43d7877aa13bc340d91e98e610e92b75e5928a66" kindref="member">miopenGRU</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="3448"><highlight class="normal">}<sp/><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref>;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"></highlight></codeline>
<codeline lineno="3453" refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3455" refid="group___r_n_n_1gga11808e1b616d9b9d7e6c701986783af7a168f261ee3dc35ea3fe636c644610c2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga11808e1b616d9b9d7e6c701986783af7a168f261ee3dc35ea3fe636c644610c2f" kindref="member">miopenRNNlinear</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="3456" refid="group___r_n_n_1gga11808e1b616d9b9d7e6c701986783af7a99c1caff2a69fb37d964fb3692c989da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga11808e1b616d9b9d7e6c701986783af7a99c1caff2a69fb37d964fb3692c989da" kindref="member">miopenRNNskip</ref><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="3457"><highlight class="normal">}<sp/><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref>;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight></codeline>
<codeline lineno="3462" refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga6bca6bf2c239cb387d99a07cb6b331c4aee4782e7cebfb009314cdd6c695a5b90" kindref="member">miopenRNNdefault</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga6bca6bf2c239cb387d99a07cb6b331c4a2dfd71a22376cd8b11bd1a1b4fe46996" kindref="member">miopenRNNfundamental</ref><sp/>=</highlight></codeline>
<codeline lineno="3467" refid="group___r_n_n_1gga6bca6bf2c239cb387d99a07cb6b331c4a2dfd71a22376cd8b11bd1a1b4fe46996" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/></highlight></codeline>
<codeline lineno="3468"><highlight class="normal">}<sp/><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref>;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight></codeline>
<codeline lineno="3473" refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3475" refid="group___r_n_n_1gga3c7adae8941033d266f1d5e029504c38a78752802fd2c7248fd4fdddbf613264b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga3c7adae8941033d266f1d5e029504c38a78752802fd2c7248fd4fdddbf613264b" kindref="member">miopenRNNunidirection</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="3476" refid="group___r_n_n_1gga3c7adae8941033d266f1d5e029504c38a2f0f99690655d0df5ca16bd5011908ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga3c7adae8941033d266f1d5e029504c38a2f0f99690655d0df5ca16bd5011908ea" kindref="member">miopenRNNbidirection</ref><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="3477"><highlight class="normal">}<sp/><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref>;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight></codeline>
<codeline lineno="3482" refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3484" refid="group___r_n_n_1gga47b037e570937a567de38e8898a99f37a2eb8172730ba33866564865fe4e2d7ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga47b037e570937a567de38e8898a99f37a2eb8172730ba33866564865fe4e2d7ea" kindref="member">miopenRNNNoBias</ref><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="3485" refid="group___r_n_n_1gga47b037e570937a567de38e8898a99f37a14fd5be6ddb03ef2d81d27ff8a868d10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga47b037e570937a567de38e8898a99f37a14fd5be6ddb03ef2d81d27ff8a868d10" kindref="member">miopenRNNwithBias</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="3486"><highlight class="normal">}<sp/><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref>;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight></codeline>
<codeline lineno="3491" refid="group___r_n_n_1gac7f800028b5634cb08aa191fa6ee0d2a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3493" refid="group___r_n_n_1ggac7f800028b5634cb08aa191fa6ee0d2aa5803419df2c12a2ea02b7560a54ebee7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ggac7f800028b5634cb08aa191fa6ee0d2aa5803419df2c12a2ea02b7560a54ebee7" kindref="member">miopenRNNAlgoGEMM</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="3494"><highlight class="normal">}<sp/><ref refid="group___r_n_n_1gac7f800028b5634cb08aa191fa6ee0d2a" kindref="member">miopenRNNGEMMalgoMode_t</ref>;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"></highlight></codeline>
<codeline lineno="3499" refid="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3501" refid="group___r_n_n_1ggaeb0b6dbeefb776e9b663c66a247a7121a280a03179097c1c96d3b26f4f25543e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ggaeb0b6dbeefb776e9b663c66a247a7121a280a03179097c1c96d3b26f4f25543e2" kindref="member">miopenRNNIONotPadded</ref><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="3502" refid="group___r_n_n_1ggaeb0b6dbeefb776e9b663c66a247a7121a0d1f9de9cb101771b9bb572ddfa2f2ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ggaeb0b6dbeefb776e9b663c66a247a7121a0d1f9de9cb101771b9bb572ddfa2f2ef" kindref="member">miopenRNNIOWithPadding</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="3503"><highlight class="normal">}<sp/><ref refid="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" kindref="member">miopenRNNPaddingMode_t</ref>;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"></highlight></codeline>
<codeline lineno="3508" refid="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3510" refid="group___r_n_n_1gga9e0d9408f321de068cc30ad5a7de778ba2a424459293f8f7a74ab45b70a902f4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga9e0d9408f321de068cc30ad5a7de778ba2a424459293f8f7a74ab45b70a902f4e" kindref="member">miopenRNNTraining</ref><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="3511" refid="group___r_n_n_1gga9e0d9408f321de068cc30ad5a7de778ba2e5ed4c109920976110cdc7c7fd4cefc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga9e0d9408f321de068cc30ad5a7de778ba2e5ed4c109920976110cdc7c7fd4cefc" kindref="member">miopenRNNInference</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="3512"><highlight class="normal">}<sp/><ref refid="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" kindref="member">miopenRNNFWDMode_t</ref>;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight></codeline>
<codeline lineno="3517" refid="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3519" refid="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fae9bb9aaef77070d408758f4d2dbef44d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fae9bb9aaef77070d408758f4d2dbef44d" kindref="member">miopenRNNDataUnknownLayout</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="3520" refid="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fa956d8d35f87c4aa06a4f9d5561aef5f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fa956d8d35f87c4aa06a4f9d5561aef5f1" kindref="member">miopenRNNDataSeqMajorNotPadded</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="3521" refid="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fa04fbe3dee060a5d78eb007028468134f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fa04fbe3dee060a5d78eb007028468134f" kindref="member">miopenRNNDataSeqMajorPadded</ref><sp/><sp/><sp/><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="3522" refid="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fad5db52f1c42231b13de635892872c931" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fad5db52f1c42231b13de635892872c931" kindref="member">miopenRNNDataBatchMajorPadded</ref><sp/><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="3523"><highlight class="normal">}<sp/><ref refid="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" kindref="member">miopenRNNBaseLayout_t</ref>;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight></codeline>
<codeline lineno="3531" refid="group___r_n_n_1gab6af15d94b2e0932873142d55aa239b4" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gab6af15d94b2e0932873142d55aa239b4" kindref="member">miopenCreateRNNDescriptor</ref>(miopenRNNDescriptor_t*<sp/>rnnDesc);</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight></codeline>
<codeline lineno="3545" refid="group___r_n_n_1ga6ac11f7ee823327d80e1b0ebc6774b3f" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga6ac11f7ee823327d80e1b0ebc6774b3f" kindref="member">miopenGetRNNDescriptor</ref>(miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref>*<sp/>rnnMode,</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref>*<sp/>algoMode,</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref>*<sp/>inputMode,</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref>*<sp/>dirMode,</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref>*<sp/>biasMode,</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>hiddenSize,</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>layer);</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight></codeline>
<codeline lineno="3570" refid="group___r_n_n_1ga102a6710811b4662eee1c3f2858b3498" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga102a6710811b4662eee1c3f2858b3498" kindref="member">miopenGetRNNDescriptor_V2</ref>(miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>hiddenSize,</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>layer,</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenDropoutDescriptor_t*<sp/>dropoutDesc,</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref>*<sp/>inputMode,</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref>*<sp/>dirMode,</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref>*<sp/>rnnMode,</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref>*<sp/>biasMode,</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref>*<sp/>algoMode,</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref>*<sp/>dataType);</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight></codeline>
<codeline lineno="3586" refid="group___r_n_n_1gaf5675f82ade15ca38b890f6ea4d035b5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gaf5675f82ade15ca38b890f6ea4d035b5" kindref="member">miopenDestroyRNNDescriptor</ref>(miopenRNNDescriptor_t<sp/>rnnDesc);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight></codeline>
<codeline lineno="3603" refid="group___r_n_n_1ga609253972613b2dc6ea2e9d07697f665" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga609253972613b2dc6ea2e9d07697f665" kindref="member">miopenSetRNNDescriptor</ref>(miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hsize,</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlayers,</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref><sp/>inMode,</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref><sp/>direction,</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref><sp/>rnnMode,</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref><sp/>biasMode,</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref><sp/>algo,</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dataType);</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight></codeline>
<codeline lineno="3631" refid="group___r_n_n_1gaf02ff9a9c328099753d9244eae95c5d6" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gaf02ff9a9c328099753d9244eae95c5d6" kindref="member">miopenSetRNNDescriptor_V2</ref>(miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hsize,</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlayers,</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenDropoutDescriptor_t<sp/>dropoutDesc,</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref><sp/>inMode,</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref><sp/>direction,</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref><sp/>rnnMode,</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref><sp/>biasMode,</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref><sp/>algo,</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dataType);</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3656"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3657" refid="group___r_n_n_1gadaf0448f9d4ee351183c7e83d2b5f520" refkind="member"><highlight class="normal"><ref refid="group___r_n_n_1gadaf0448f9d4ee351183c7e83d2b5f520" kindref="member">miopenSetRNNDataSeqTensorDescriptor</ref>(miopenSeqTensorDescriptor_t<sp/>seqTensorDesc,</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dataType,</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" kindref="member">miopenRNNBaseLayout_t</ref><sp/>layout,</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSequenceLen,</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batchSize,</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vectorSize,</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sequenceLenArray,</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>paddingMarker);</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="3685" refid="group___r_n_n_1ga90c8af014044546749e8dfd68a074ac3" refkind="member"><highlight class="normal"><ref refid="group___r_n_n_1ga90c8af014044546749e8dfd68a074ac3" kindref="member">miopenGetRNNDataSeqTensorDescriptor</ref>(miopenSeqTensorDescriptor_t<sp/>seqTensorDesc,</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref>*<sp/>dataType,</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" kindref="member">miopenRNNBaseLayout_t</ref>*<sp/>layout,</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>maxSequenceLen,</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>batchSize,</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>vectorSize,</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequenceLenArrayLimit,</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sequenceLenArray,</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>paddingMarker);</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3711" refid="group___r_n_n_1gad2f8db58662277452612e0b3381123fe" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gad2f8db58662277452612e0b3381123fe" kindref="member">miopenGetRNNWorkspaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequenceLen,</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>xDesc,</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>numBytes);</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight></codeline>
<codeline lineno="3733" refid="group___r_n_n_1ga59b770093f4ab10d72126436b1d0395a" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga59b770093f4ab10d72126436b1d0395a" kindref="member">miopenGetRNNTrainingReserveSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequenceLen,</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>xDesc,</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>numBytes);</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight></codeline>
<codeline lineno="3755" refid="group___r_n_n_1ga82cf9678664959b494765e56f06f87c3" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga82cf9678664959b494765e56f06f87c3" kindref="member">miopenGetRNNTempSpaceSizes</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenSeqTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" kindref="member">miopenRNNFWDMode_t</ref><sp/>fwdMode,</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize,</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>reserveSpaceSize);</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774" refid="group___r_n_n_1ga2394f4629b6da29bf2145f0e0220810c" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga2394f4629b6da29bf2145f0e0220810c" kindref="member">miopenGetRNNParamsSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>numBytes,</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dtype);</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3792" refid="group___r_n_n_1gadf75eb328f82b81ddc83d4230b0c54af" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gadf75eb328f82b81ddc83d4230b0c54af" kindref="member">miopenGetRNNParamsDescriptor</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dtype);</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815" refid="group___r_n_n_1ga97b8a45e7925826423dd5e2795a5f8cd" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga97b8a45e7925826423dd5e2795a5f8cd" kindref="member">miopenGetRNNInputTensorSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seqLen,</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t*<sp/>xDesc,</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>numBytes);</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight></codeline>
<codeline lineno="3833" refid="group___r_n_n_1gaf5d51f866c74ce07a6cc4286fa06200c" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gaf5d51f866c74ce07a6cc4286fa06200c" kindref="member">miopenGetRNNHiddenTensorSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seqLen,</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t*<sp/>xDesc,</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>numBytes);</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3879" refid="group___r_n_n_1gab082ab70bd71d3d5a248b76bf96def6b" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gab082ab70bd71d3d5a248b76bf96def6b" kindref="member">miopenGetRNNLayerParamSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paramID,</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>numBytes);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923" refid="group___r_n_n_1ga5ed3d73c243de909de9ebf58a1d3d5d8" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga5ed3d73c243de909de9ebf58a1d3d5d8" kindref="member">miopenGetRNNLayerBiasSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>biasID,</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>numBytes);</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight></codeline>
<codeline lineno="3987" refid="group___r_n_n_1gacd0730d483c86d3f9f047658a58f5695" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gacd0730d483c86d3f9f047658a58f5695" kindref="member">miopenGetRNNLayerParam</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paramID,</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>paramDesc,</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>layerParam);</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight></codeline>
<codeline lineno="4054" refid="group___r_n_n_1ga4f27d46b80c043ef254fbc2caf481423" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga4f27d46b80c043ef254fbc2caf481423" kindref="member">miopenGetRNNLayerBias</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>biasID,</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>biasDesc,</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>layerBias);</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight></codeline>
<codeline lineno="4118" refid="group___r_n_n_1ga2c445114d21ef806585c4de8fe777b70" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga2c445114d21ef806585c4de8fe777b70" kindref="member">miopenGetRNNLayerParamOffset</ref>(miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paramID,</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>paramDesc,</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>layerParamOffset);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4175" refid="group___r_n_n_1ga24389ba4b784d7211f06b6fe4c94c8d7" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga24389ba4b784d7211f06b6fe4c94c8d7" kindref="member">miopenGetRNNLayerBiasOffset</ref>(miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>biasID,</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>biasDesc,</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>layerBiasOffset);</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234" refid="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" kindref="member">miopenSetRNNLayerParam</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paramID,</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>paramDesc,</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>layerParam);</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"></highlight></codeline>
<codeline lineno="4294" refid="group___r_n_n_1ga1991ee70fba68f8de643c1a4aa183bf7" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga1991ee70fba68f8de643c1a4aa183bf7" kindref="member">miopenSetRNNLayerBias</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>biasID,</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t<sp/>biasDesc,</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>layerBias);</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"></highlight></codeline>
<codeline lineno="4315" refid="group___r_n_n_1gaf9f746d7c62bfbf62ff8663e54360771" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gaf9f746d7c62bfbf62ff8663e54360771" kindref="member">miopenSetRNNPaddingMode</ref>(miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" kindref="member">miopenRNNPaddingMode_t</ref><sp/>paddingMode);</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325" refid="group___r_n_n_1ga86fc04d775ab501c0ab829703b2cf738" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga86fc04d775ab501c0ab829703b2cf738" kindref="member">miopenGetRNNPaddingMode</ref>(miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" kindref="member">miopenRNNPaddingMode_t</ref>*<sp/>paddingMode);</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight></codeline>
<codeline lineno="4378" refid="group___r_n_n_1ga8d5b72681258d9cd7f50ba03ab6215e5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga8d5b72681258d9cd7f50ba03ab6215e5" kindref="member">miopenRNNForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" kindref="member">miopenRNNFWDMode_t</ref><sp/>fwdMode,</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenSeqTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>hDesc,</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hx,</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hy,</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cDesc,</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cx,</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cy,</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenSeqTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>weightSpaceSize,</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceNumBytes,</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserveSpace,</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserveSpaceNumBytes);</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"></highlight></codeline>
<codeline lineno="4447" refid="group___r_n_n_1ga44ac8be6fceea4aa1e755958960be862" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga44ac8be6fceea4aa1e755958960be862" kindref="member">miopenRNNBackwardSeqData</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenSeqTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>hDesc,</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hx,</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dhy,</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dhx,</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cDesc,</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cx,</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dcy,</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dcx,</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenSeqTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>weightSpaceSize,</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceNumBytes,</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserveSpace,</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserveSpaceNumBytes);</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="4503" refid="group___r_n_n_1ga1ff33e5279bfca3ed08d59bfa8069a9d" refkind="member"><highlight class="normal"><ref refid="group___r_n_n_1ga1ff33e5279bfca3ed08d59bfa8069a9d" kindref="member">miopenRNNBackwardWeightsSeqTensor</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenSeqTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>hDesc,</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hx,</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenSeqTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dw,</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>weightSpaceSize,</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceNumBytes,</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserveSpace,</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserveSpaceNumBytes);</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"></highlight></codeline>
<codeline lineno="4575" refid="group___r_n_n_1gae7844191464b02e0343af135904413ab" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gae7844191464b02e0343af135904413ab" kindref="member">miopenRNNForwardTraining</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequenceLen,</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>xDesc,</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>hxDesc,</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hx,</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cxDesc,</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cx,</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>yDesc,</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>hyDesc,</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hy,</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cyDesc,</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cy,</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceNumBytes,</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserveSpace,</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserveSpaceNumBytes);</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"></highlight></codeline>
<codeline lineno="4669" refid="group___r_n_n_1ga6ac03fa91d038feb1206b4f8a770af97" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga6ac03fa91d038feb1206b4f8a770af97" kindref="member">miopenRNNBackwardData</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequenceLen,</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>yDesc,</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>dyDesc,</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dhyDesc,</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dhy,</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dcyDesc,</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dcy,</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>hxDesc,</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hx,</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cxDesc,</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cx,</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>dxDesc,</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dhxDesc,</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dhx,</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dcxDesc,</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dcx,</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceNumBytes,</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserveSpace,</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserveSpaceNumBytes);</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight></codeline>
<codeline lineno="4733" refid="group___r_n_n_1ga55040b58e6820d21f58957d356715739" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1ga55040b58e6820d21f58957d356715739" kindref="member">miopenRNNBackwardWeights</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequenceLen,</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>xDesc,</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>hxDesc,</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hx,</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>yDesc,</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dwDesc,</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dw,</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceNumBytes,</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserveSpace,</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserveSpaceNumBytes);</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight></codeline>
<codeline lineno="4804" refid="group___r_n_n_1gafd8f2c43d92a7baf7de2e431bbcf7199" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___r_n_n_1gafd8f2c43d92a7baf7de2e431bbcf7199" kindref="member">miopenRNNForwardInference</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenRNNDescriptor_t<sp/>rnnDesc,</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequenceLen,</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>xDesc,</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>hxDesc,</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hx,</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cxDesc,</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cx,</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>wDesc,</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>w,</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t*<sp/>yDesc,</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>hyDesc,</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hy,</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cyDesc,</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cy,</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceNumBytes);</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"></highlight></codeline>
<codeline lineno="4825"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>RNN<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight></codeline>
<codeline lineno="4835" refid="group___loss_function_1ga3a791761ce6a39c117116a1f0075b2c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4837" refid="group___loss_function_1gga3a791761ce6a39c117116a1f0075b2c6ad74fca207ff5f01cc77f0d50efc155a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___loss_function_1gga3a791761ce6a39c117116a1f0075b2c6ad74fca207ff5f01cc77f0d50efc155a1" kindref="member">MIOPEN_CTC_LOSS_ALGO_DETERMINISTIC</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="4838"><highlight class="normal">}<sp/><ref refid="group___loss_function_1ga3a791761ce6a39c117116a1f0075b2c6" kindref="member">miopenCTCLossAlgo_t</ref>;</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight></codeline>
<codeline lineno="4846" refid="group___loss_function_1ga514750d47eedc6069c1c6fa5aa696bf4" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___loss_function_1ga514750d47eedc6069c1c6fa5aa696bf4" kindref="member">miopenCreateCTCLossDescriptor</ref>(miopenCTCLossDescriptor_t*<sp/>ctcLossDesc);</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"></highlight></codeline>
<codeline lineno="4857" refid="group___loss_function_1ga50fa7cf5fca14cc1b9181d004b90e10f" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___loss_function_1ga50fa7cf5fca14cc1b9181d004b90e10f" kindref="member">miopenGetCTCLossDescriptor</ref>(miopenCTCLossDescriptor_t<sp/>ctcLossDesc,</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref>*<sp/>dataType,</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>blank_label_id,</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>apply_softmax_layer);</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"></highlight></codeline>
<codeline lineno="4867" refid="group___loss_function_1gae3a6a39b1a961c9342674fa62342393a" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___loss_function_1gae3a6a39b1a961c9342674fa62342393a" kindref="member">miopenDestroyCTCLossDescriptor</ref>(miopenCTCLossDescriptor_t<sp/>ctcLossDesc);</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"></highlight></codeline>
<codeline lineno="4878" refid="group___loss_function_1ga4cf2c0ac1a30f13c3503be5a98cdccd3" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___loss_function_1ga4cf2c0ac1a30f13c3503be5a98cdccd3" kindref="member">miopenSetCTCLossDescriptor</ref>(miopenCTCLossDescriptor_t<sp/>ctcLossDesc,</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>dataType,</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blank_label_id,</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>apply_softmax_layer);</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"></highlight></codeline>
<codeline lineno="4899"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="4900" refid="group___loss_function_1ga0b277cfacf38a158bf753d8edc609dc1" refkind="member"><highlight class="normal"><ref refid="group___loss_function_1ga0b277cfacf38a158bf753d8edc609dc1" kindref="member">miopenGetCTCLossWorkspaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>probsDesc,</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>gradientsDesc,</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>labels,</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>labelLengths,</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>inputLengths,</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___loss_function_1ga3a791761ce6a39c117116a1f0075b2c6" kindref="member">miopenCTCLossAlgo_t</ref><sp/>algo,</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenCTCLossDescriptor_t<sp/>ctcLossDesc,</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"></highlight></codeline>
<codeline lineno="4929" refid="group___loss_function_1ga4d8ec531689521616491dad2e3ae7c43" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group___loss_function_1ga4d8ec531689521616491dad2e3ae7c43" kindref="member">miopenCTCLoss</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>probsDesc,</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>probs,</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>labels,</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>labelLengths,</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>inputLengths,</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>losses,</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>gradientsDesc,</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>gradients,</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___loss_function_1ga3a791761ce6a39c117116a1f0075b2c6" kindref="member">miopenCTCLossAlgo_t</ref><sp/>algo,</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenCTCLossDescriptor_t<sp/>ctcLossDesc,</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workSpace,</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workSpaceSize);</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>LossFunction<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dropout<sp/>APIs</highlight></codeline>
<codeline lineno="4955" refid="group__dropout_1ga283a437b36e9ed35ce7b80490de4d15d" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4957" refid="group__dropout_1gga283a437b36e9ed35ce7b80490de4d15daeda0fbe383a397b303a6ab43efa5967e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__dropout_1gga283a437b36e9ed35ce7b80490de4d15daeda0fbe383a397b303a6ab43efa5967e" kindref="member">MIOPEN_RNG_PSEUDO_XORWOW</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="4958"><highlight class="normal">}<sp/><ref refid="group__dropout_1ga283a437b36e9ed35ce7b80490de4d15d" kindref="member">miopenRNGType_t</ref>;</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"></highlight></codeline>
<codeline lineno="4965" refid="group__dropout_1gabd41a45a7c2f7785eb124080071e9e69" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__dropout_1gabd41a45a7c2f7785eb124080071e9e69" kindref="member">miopenCreateDropoutDescriptor</ref>(miopenDropoutDescriptor_t*<sp/>dropoutDesc);</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight></codeline>
<codeline lineno="4972" refid="group__dropout_1ga053288f154f85d8695f3825853d7b44e" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__dropout_1ga053288f154f85d8695f3825853d7b44e" kindref="member">miopenDestroyDropoutDescriptor</ref>(miopenDropoutDescriptor_t<sp/>dropoutDesc);</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight></codeline>
<codeline lineno="4982" refid="group__dropout_1ga7a1ea2d1245dd07eaf7ec2c59e19e842" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__dropout_1ga7a1ea2d1245dd07eaf7ec2c59e19e842" kindref="member">miopenDropoutGetReserveSpaceSize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>reserveSpaceSizeInBytes);</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"></highlight></codeline>
<codeline lineno="4993" refid="group__dropout_1ga323bbd149e25ef334cb4b52ef4e57a1c" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__dropout_1ga323bbd149e25ef334cb4b52ef4e57a1c" kindref="member">miopenDropoutGetStatesSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>stateSizeInBytes);</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight></codeline>
<codeline lineno="5012" refid="group__dropout_1gaabb82ee87a6e073d3acfc95b242fdbb8" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__dropout_1gaabb82ee87a6e073d3acfc95b242fdbb8" kindref="member">miopenGetDropoutDescriptor</ref>(miopenDropoutDescriptor_t<sp/>dropoutDesc,</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dropout,</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>states,</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>seed,</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>use_mask,</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>state_evo,</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__dropout_1ga283a437b36e9ed35ce7b80490de4d15d" kindref="member">miopenRNGType_t</ref>*<sp/>rng_mode);</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight></codeline>
<codeline lineno="5043" refid="group__dropout_1gad0b1c52d5641f0fb09f6baf17b7d051f" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__dropout_1gad0b1c52d5641f0fb09f6baf17b7d051f" kindref="member">miopenRestoreDropoutDescriptor</ref>(miopenDropoutDescriptor_t<sp/>dropoutDesc,</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dropout,</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>states,</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stateSizeInBytes,</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed,</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_mask,</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state_evo,</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__dropout_1ga283a437b36e9ed35ce7b80490de4d15d" kindref="member">miopenRNGType_t</ref><sp/>rng_mode);</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072" refid="group__dropout_1gae60f56b35fd49b562141d8e00b1a20e7" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__dropout_1gae60f56b35fd49b562141d8e00b1a20e7" kindref="member">miopenSetDropoutDescriptor</ref>(miopenDropoutDescriptor_t<sp/>dropoutDesc,</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dropout,</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>states,</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stateSizeInBytes,</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed,</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_mask,</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state_evo,</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__dropout_1ga283a437b36e9ed35ce7b80490de4d15d" kindref="member">miopenRNGType_t</ref><sp/>rng_mode);</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight></codeline>
<codeline lineno="5099" refid="group__dropout_1gaa695ad520fe252a47102bb49c56b52a5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__dropout_1gaa695ad520fe252a47102bb49c56b52a5" kindref="member">miopenDropoutForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenDropoutDescriptor_t<sp/>dropoutDesc,</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>noise_shape,</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserveSpace,</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserveSpaceSizeInBytes);</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight></codeline>
<codeline lineno="5126" refid="group__dropout_1gac0a6cf12640c7a959a27412b8304954b" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__dropout_1gac0a6cf12640c7a959a27412b8304954b" kindref="member">miopenDropoutBackward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenDropoutDescriptor_t<sp/>dropoutDesc,</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>noise_shape,</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dyDesc,</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dy,</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>dxDesc,</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dx,</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserveSpace,</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserveSpaceSizeInBytes);</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight></codeline>
<codeline lineno="5137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>DROPOUT<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TensorReduce<sp/>APIs</highlight></codeline>
<codeline lineno="5150"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="5151" refid="group___tensor_reduce_1ga5f77b41324cbed4284d00b2e80140c6e" refkind="member"><highlight class="normal"><ref refid="group___tensor_reduce_1ga5f77b41324cbed4284d00b2e80140c6e" kindref="member">miopenCreateReduceTensorDescriptor</ref>(miopenReduceTensorDescriptor_t*<sp/>reduceTensorDesc);</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"></highlight></codeline>
<codeline lineno="5158"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="5159" refid="group___tensor_reduce_1gac17bc3081a6e585c993d4c26e67f5c30" refkind="member"><highlight class="normal"><ref refid="group___tensor_reduce_1gac17bc3081a6e585c993d4c26e67f5c30" kindref="member">miopenDestroyReduceTensorDescriptor</ref>(miopenReduceTensorDescriptor_t<sp/>reduceTensorDesc);</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"></highlight></codeline>
<codeline lineno="5173"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="5174" refid="group___tensor_reduce_1ga5dfa99bd883f588f29d1b927917e6ad4" refkind="member"><highlight class="normal"><ref refid="group___tensor_reduce_1ga5dfa99bd883f588f29d1b927917e6ad4" kindref="member">miopenSetReduceTensorDescriptor</ref>(miopenReduceTensorDescriptor_t<sp/>reduceTensorDesc,</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddd" kindref="member">miopenReduceTensorOp_t</ref><sp/>reduceTensorOp,</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref><sp/>reduceTensorCompType,</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89" kindref="member">miopenNanPropagation_t</ref><sp/>reduceTensorNanOpt,</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___tensor_reduce_1ga4dd527c6b506c34ec06d641551d78b7c" kindref="member">miopenReduceTensorIndices_t</ref><sp/>reduceTensorIndices,</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82b" kindref="member">miopenIndicesType_t</ref><sp/>reduceTensorIndicesType);</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"></highlight></codeline>
<codeline lineno="5196"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="5197" refid="group___tensor_reduce_1gafd5a88ef7c4bc12f0cb57e8ea20365d2" refkind="member"><highlight class="normal"><ref refid="group___tensor_reduce_1gafd5a88ef7c4bc12f0cb57e8ea20365d2" kindref="member">miopenGetReduceTensorDescriptor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenReduceTensorDescriptor_t<sp/>reduceTensorDesc,</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___tensor_reduce_1ga70e205d9a10688c29474cd8795521ddd" kindref="member">miopenReduceTensorOp_t</ref>*<sp/>reduceTensorOp,</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref>*<sp/>reduceTensorCompType,</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1adfa716b919ff5919780b47334bbb1d89" kindref="member">miopenNanPropagation_t</ref>*<sp/>reduceTensorNanOpt,</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___tensor_reduce_1ga4dd527c6b506c34ec06d641551d78b7c" kindref="member">miopenReduceTensorIndices_t</ref>*<sp/>reduceTensorIndices,</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___tensor_reduce_1ga8c58d2c6bd149d6140ea81e88374d82b" kindref="member">miopenIndicesType_t</ref>*<sp/>reduceTensorIndicesType);</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="5214" refid="group___tensor_reduce_1gaad36391f9ef26c3404b57d6881a45341" refkind="member"><highlight class="normal"><ref refid="group___tensor_reduce_1gaad36391f9ef26c3404b57d6881a45341" kindref="member">miopenGetReductionIndicesSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenReduceTensorDescriptor_t<sp/>reduceTensorDesc,</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>aDesc,</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cDesc,</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>sizeInBytes);</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight></codeline>
<codeline lineno="5229"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="5230" refid="group___tensor_reduce_1gae6168e1d701ab82cb44fed031c93d699" refkind="member"><highlight class="normal"><ref refid="group___tensor_reduce_1gae6168e1d701ab82cb44fed031c93d699" kindref="member">miopenGetReductionWorkspaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenReduceTensorDescriptor_t<sp/>reduceTensorDesc,</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>aDesc,</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cDesc,</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>sizeInBytes);</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight></codeline>
<codeline lineno="5259"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="5260" refid="group___tensor_reduce_1gaac1654ff051edc15a3bc17f99bf96736" refkind="member"><highlight class="normal"><ref refid="group___tensor_reduce_1gaac1654ff051edc15a3bc17f99bf96736" kindref="member">miopenReduceTensor</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenReduceTensorDescriptor_t<sp/>reduceTensorDesc,</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>indices,</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>indicesSizeInBytes,</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workspace,</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workspaceSizeInBytes,</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>alpha,</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>aDesc,</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>A,</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>beta,</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>cDesc,</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>C);</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"></highlight></codeline>
<codeline lineno="5274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>TensorReduce<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Find<sp/>2.0<sp/>API</highlight></codeline>
<codeline lineno="5287" refid="group__find2_1ga7bd14eca1cfc4b80b3099365fd341c50" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenProblem);</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight></codeline>
<codeline lineno="5292" refid="group__find2_1gab7565f4a33ed5b4f7fa1793a7dad6337" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5294" refid="group__find2_1ggab7565f4a33ed5b4f7fa1793a7dad6337abc2dbfdc4ef1b83119c3777e7e80de44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1ggab7565f4a33ed5b4f7fa1793a7dad6337abc2dbfdc4ef1b83119c3777e7e80de44" kindref="member">miopenProblemDirectionForward</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="5295" refid="group__find2_1ggab7565f4a33ed5b4f7fa1793a7dad6337af99443bbae30b51588521c921a858f99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1ggab7565f4a33ed5b4f7fa1793a7dad6337af99443bbae30b51588521c921a858f99" kindref="member">miopenProblemDirectionBackward</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="5296" refid="group__find2_1ggab7565f4a33ed5b4f7fa1793a7dad6337a7c23676cb2177e581995e740475afd79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1ggab7565f4a33ed5b4f7fa1793a7dad6337a7c23676cb2177e581995e740475afd79" kindref="member">miopenProblemDirectionBackwardWeights</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="5297"><highlight class="normal">}<sp/><ref refid="group__find2_1gab7565f4a33ed5b4f7fa1793a7dad6337" kindref="member">miopenProblemDirection_t</ref>;</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight></codeline>
<codeline lineno="5302" refid="group__find2_1ga9aadaf9e83bdc5303cfb58955514502c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5304" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cac707682d5986bbade17817928e00d06f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cac707682d5986bbade17817928e00d06f" kindref="member">miopenTensorArgumentIdInvalid</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="5305" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca2fc5c7f9a98eb6976f6d38d7db896db2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca2fc5c7f9a98eb6976f6d38d7db896db2" kindref="member">miopenTensorConvolutionX</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="5306" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cad407972fb41ab847593d4353388dce22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cad407972fb41ab847593d4353388dce22" kindref="member">miopenTensorConvolutionW</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="5307" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca9d50f1debc571d38ed1709912c9c5774" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca9d50f1debc571d38ed1709912c9c5774" kindref="member">miopenTensorConvolutionY</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5309" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca6c6f3d3a9c2c618da7b1c43fa33f67f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca6c6f3d3a9c2c618da7b1c43fa33f67f0" kindref="member">miopenTensorActivationX</ref><sp/><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="5310" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502caf5eab1e565bf6f3d30f425e9ca34337f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502caf5eab1e565bf6f3d30f425e9ca34337f" kindref="member">miopenTensorActivationY</ref><sp/><sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="5311" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca60c93134ee0f45d7b77e92f214a93553" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca60c93134ee0f45d7b77e92f214a93553" kindref="member">miopenTensorActivationDX</ref><sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="5312" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca202338b34064b12cd5750268a562df7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502ca202338b34064b12cd5750268a562df7e" kindref="member">miopenTensorActivationDY</ref><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="5313" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cafa54dfab241618980f8a69d3b21b6e0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cafa54dfab241618980f8a69d3b21b6e0b" kindref="member">miopenTensorBiasX</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="5314" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cade8d8f0207aa2246f2b7f4ca2434c74f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502cade8d8f0207aa2246f2b7f4ca2434c74f" kindref="member">miopenTensorBiasY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="5315" refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502caf36be3d67213320a22999ed32c62a90a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga9aadaf9e83bdc5303cfb58955514502caf36be3d67213320a22999ed32c62a90a" kindref="member">miopenTensorBias</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal">}<sp/><ref refid="group__find2_1ga9aadaf9e83bdc5303cfb58955514502c" kindref="member">miopenTensorArgumentId_t</ref>;</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5322" refid="group__find2_1ga10ba204b05e13c25e81b70abd6b3cd69" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5324" refid="group__find2_1gga10ba204b05e13c25e81b70abd6b3cd69aed134126adf8e75b11f27bd485869ade" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga10ba204b05e13c25e81b70abd6b3cd69aed134126adf8e75b11f27bd485869ade" kindref="member">miopenFindResultsOrderByTime</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="5325" refid="group__find2_1gga10ba204b05e13c25e81b70abd6b3cd69a165b3ee97cc1daa65fbdb22fdcb2a81f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1gga10ba204b05e13c25e81b70abd6b3cd69a165b3ee97cc1daa65fbdb22fdcb2a81f" kindref="member">miopenFindResultsOrderByWorkspaceSize</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="5326"><highlight class="normal">}<sp/><ref refid="group__find2_1ga10ba204b05e13c25e81b70abd6b3cd69" kindref="member">miopenFindResultsOrder_t</ref>;</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"></highlight></codeline>
<codeline lineno="5335" refid="group__find2_1gaeb7ab171928f07c4fd02a96b23c3cd02" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gaeb7ab171928f07c4fd02a96b23c3cd02" kindref="member">miopenCreateConvProblem</ref>(miopenProblem_t*<sp/>problem,</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenConvolutionDescriptor_t<sp/>operatorDesc,</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__find2_1gab7565f4a33ed5b4f7fa1793a7dad6337" kindref="member">miopenProblemDirection_t</ref><sp/>direction);</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight></codeline>
<codeline lineno="5344" refid="group__find2_1gadd378dce1c7c8686c492decaada8a8bc" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gadd378dce1c7c8686c492decaada8a8bc" kindref="member">miopenDestroyProblem</ref>(miopenProblem_t<sp/>problem);</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="5354" refid="group__find2_1gafbaf96e05f4c8ff0ab0b5081ec909cdf" refkind="member"><highlight class="normal"><ref refid="group__find2_1gafbaf96e05f4c8ff0ab0b5081ec909cdf" kindref="member">miopenSetProblemTensorDescriptor</ref>(miopenProblem_t<sp/>problem,</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__find2_1ga9aadaf9e83bdc5303cfb58955514502c" kindref="member">miopenTensorArgumentId_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>descriptor);</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"></highlight></codeline>
<codeline lineno="5360" refid="group__find2_1ga9d8376fb648ff974f91757f882fd665f" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenFindOptions);</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"></highlight></codeline>
<codeline lineno="5367" refid="group__find2_1gae336156fdf21e987155101879d78cb75" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gae336156fdf21e987155101879d78cb75" kindref="member">miopenCreateFindOptions</ref>(miopenFindOptions_t*<sp/>options);</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight></codeline>
<codeline lineno="5374" refid="group__find2_1ga860acc71b6724dbbefbad2006e3c9248" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1ga860acc71b6724dbbefbad2006e3c9248" kindref="member">miopenDestroyFindOptions</ref>(miopenFindOptions_t<sp/>options);</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight></codeline>
<codeline lineno="5382" refid="group__find2_1gaa3dee344f811055f5c95dc88cd18abd1" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gaa3dee344f811055f5c95dc88cd18abd1" kindref="member">miopenSetFindOptionTuning</ref>(miopenFindOptions_t<sp/>options,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight></codeline>
<codeline lineno="5390" refid="group__find2_1gaaba2c9d169a0b79ebbbc15a3ac573a09" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gaaba2c9d169a0b79ebbbc15a3ac573a09" kindref="member">miopenSetFindOptionResultsOrder</ref>(miopenFindOptions_t<sp/>options,</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__find2_1ga10ba204b05e13c25e81b70abd6b3cd69" kindref="member">miopenFindResultsOrder_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight></codeline>
<codeline lineno="5400" refid="group__find2_1ga7237650148d17d93cc357327bb363893" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1ga7237650148d17d93cc357327bb363893" kindref="member">miopenSetFindOptionWorkspaceLimit</ref>(miopenFindOptions_t<sp/>options,</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"></highlight></codeline>
<codeline lineno="5410" refid="group__find2_1gad1654e888fff200be7639bf16bdcbc3c" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gad1654e888fff200be7639bf16bdcbc3c" kindref="member">miopenSetFindOptionPreallocatedWorkspace</ref>(miopenFindOptions_t<sp/>options,</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buffer,</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"></highlight></codeline>
<codeline lineno="5422" refid="group__find2_1ga7265f2f86c90158c3c9bafc516908214" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1ga7265f2f86c90158c3c9bafc516908214" kindref="member">miopenSetFindOptionPreallocatedTensor</ref>(miopenFindOptions_t<sp/>options,</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__find2_1ga9aadaf9e83bdc5303cfb58955514502c" kindref="member">miopenTensorArgumentId_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buffer);</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight></codeline>
<codeline lineno="5428" refid="group__find2_1ga8cca5ef400a6ddb430fe618769f5a6d7" refkind="member"><highlight class="normal"><ref refid="miopen_8h_1a979ba09aedec9037aa1a0b90ed3153e9" kindref="member">MIOPEN_DECLARE_OBJECT</ref>(miopenSolution);</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"></highlight></codeline>
<codeline lineno="5441" refid="group__find2_1gaa3c5212a8cfb8913e3536cff5df7de7d" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gaa3c5212a8cfb8913e3536cff5df7de7d" kindref="member">miopenFindSolutions</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenProblem_t<sp/>problem,</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenFindOptions_t<sp/>options,</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenSolution_t*<sp/>solutions,</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>numSolutions,</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxSolutions);</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"></highlight></codeline>
<codeline lineno="5450" refid="structmiopen_tensor_argument__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmiopen_tensor_argument__t" kindref="compound">miopenTensorArgument_t</ref></highlight></codeline>
<codeline lineno="5451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>@brief<sp/>Identifier<sp/>of<sp/>the<sp/>tensor<sp/>argument.</highlight></codeline>
<codeline lineno="5453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5454" refid="structmiopen_tensor_argument__t_1a139891645dcfb2960e7387cd53615b2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__find2_1ga9aadaf9e83bdc5303cfb58955514502c" kindref="member">miopenTensorArgumentId_t</ref><sp/><ref refid="structmiopen_tensor_argument__t_1a139891645dcfb2960e7387cd53615b2f" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>@brief<sp/>Tensor<sp/>descriptor<sp/>to<sp/>override<sp/>the<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>solution.</highlight></codeline>
<codeline lineno="5456"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5457"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Some<sp/>solvers<sp/>may<sp/>support<sp/>overriding<sp/>input<sp/>and<sp/>output<sp/>tensor<sp/>descriptors,<sp/>but<sp/>right<sp/>now<sp/>there</highlight></codeline>
<codeline lineno="5458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>no<sp/>way<sp/>to<sp/>tell<sp/>from<sp/>the<sp/>API.<sp/>Intended<sp/>for<sp/>the<sp/>future<sp/>use.</highlight></codeline>
<codeline lineno="5459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5460" refid="structmiopen_tensor_argument__t_1adff7d1c55a579d4181c9c07d941a10b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>miopenTensorDescriptor_t*<sp/><ref refid="structmiopen_tensor_argument__t_1adff7d1c55a579d4181c9c07d941a10b5" kindref="member">descriptor</ref>;</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>@brief<sp/>Pointer<sp/>to<sp/>the<sp/>device<sp/>memory<sp/>buffer<sp/>to<sp/>use<sp/>for<sp/>the<sp/>operation.</highlight></codeline>
<codeline lineno="5462"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5463" refid="structmiopen_tensor_argument__t_1ad009cbec445ff4b67be61ab4331670e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structmiopen_tensor_argument__t_1ad009cbec445ff4b67be61ab4331670e7" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="5464"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"></highlight></codeline>
<codeline lineno="5477" refid="group__find2_1gab63fa12d932b163facc83c64d9e24cc1" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gab63fa12d932b163facc83c64d9e24cc1" kindref="member">miopenRunSolution</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenSolution_t<sp/>solution,</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nInputs,</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmiopen_tensor_argument__t" kindref="compound">miopenTensorArgument_t</ref>*<sp/>tensors,</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workspace,</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workspaceSize);</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"></highlight></codeline>
<codeline lineno="5489" refid="group__find2_1gac049412a8595cb334890d907d0816f1a" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gac049412a8595cb334890d907d0816f1a" kindref="member">miopenDestroySolution</ref>(miopenSolution_t<sp/>solution);</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"></highlight></codeline>
<codeline lineno="5498" refid="group__find2_1gac48d517c378b83f1c6c4648b18405f97" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gac48d517c378b83f1c6c4648b18405f97" kindref="member">miopenLoadSolution</ref>(miopenSolution_t*<sp/>solution,</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"></highlight></codeline>
<codeline lineno="5508" refid="group__find2_1gac7125760ca7876ae28fdd6817fcb5841" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gac7125760ca7876ae28fdd6817fcb5841" kindref="member">miopenSaveSolution</ref>(miopenSolution_t<sp/>solution,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"></highlight></codeline>
<codeline lineno="5516" refid="group__find2_1ga9978589af89369b8bba9af932985b29d" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1ga9978589af89369b8bba9af932985b29d" kindref="member">miopenGetSolutionSize</ref>(miopenSolution_t<sp/>solution,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>size);</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"></highlight></codeline>
<codeline lineno="5524" refid="group__find2_1gaa94f17f9ac9ffe58a80d02e2d09e2b15" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gaa94f17f9ac9ffe58a80d02e2d09e2b15" kindref="member">miopenGetSolutionWorkspaceSize</ref>(miopenSolution_t<sp/>solution,</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>workspaceSize);</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"></highlight></codeline>
<codeline lineno="5533" refid="group__find2_1ga3f109a28f79a609f733b1c832c1e52b7" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1ga3f109a28f79a609f733b1c832c1e52b7" kindref="member">miopenGetSolutionTime</ref>(miopenSolution_t<sp/>solution,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>time);</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"></highlight></codeline>
<codeline lineno="5541" refid="group__find2_1ga27761e9b6c870fe094e2d3a5a40fac79" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1ga27761e9b6c870fe094e2d3a5a40fac79" kindref="member">miopenGetSolutionSolverId</ref>(miopenSolution_t<sp/>solution,</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>solverId);</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"></highlight></codeline>
<codeline lineno="5550" refid="group__find2_1gacc4d666af80bb7e661bb13cdfbdbf9e5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gacc4d666af80bb7e661bb13cdfbdbf9e5" kindref="member">miopenGetSolverIdConvAlgorithm</ref>(uint64_t<sp/>solverId,</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__convolutions_1ga3ba938002b32a963925c7cfce51ce15a" kindref="member">miopenConvAlgorithm_t</ref>*<sp/>result);</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"></highlight></codeline>
<codeline lineno="5553"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5554"><highlight class="normal"></highlight></codeline>
<codeline lineno="5563"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></highlight></codeline>
<codeline lineno="5564" refid="group__find2_1gadc3adb3d81d376bc016950fbcf59c636" refkind="member"><highlight class="normal"><ref refid="group__find2_1gadc3adb3d81d376bc016950fbcf59c636" kindref="member">miopenCreateActivationProblem</ref>(miopenProblem_t*<sp/>problem,</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miopenActivationDescriptor_t<sp/>operatorDesc,</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__find2_1gab7565f4a33ed5b4f7fa1793a7dad6337" kindref="member">miopenProblemDirection_t</ref><sp/>direction);</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"></highlight></codeline>
<codeline lineno="5587" refid="group__find2_1ga97cbacdb934a4a9477043e9e8ead4d92" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1ga97cbacdb934a4a9477043e9e8ead4d92" kindref="member">miopenFuseProblems</ref>(miopenProblem_t<sp/>problem1,<sp/>miopenProblem_t<sp/>problem2);</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"></highlight></codeline>
<codeline lineno="5596" refid="group__find2_1gaef75c299c6a5d68c95d4eb9d6bbd5606" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__find2_1gaef75c299c6a5d68c95d4eb9d6bbd5606" kindref="member">miopenCreateBiasProblem</ref>(miopenProblem_t*<sp/>problem,</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__find2_1gab7565f4a33ed5b4f7fa1793a7dad6337" kindref="member">miopenProblemDirection_t</ref><sp/>direction);</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"></highlight></codeline>
<codeline lineno="5599"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal"></highlight></codeline>
<codeline lineno="5602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>find2<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5603"><highlight class="normal"></highlight></codeline>
<codeline lineno="5604"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5605"><highlight class="normal"></highlight></codeline>
<codeline lineno="5610" refid="group__sum_1ga9bc32feb2d65228d0bd5d30f8a1e44d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5611"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5612" refid="miopen_8h_1ga9bc32feb2d65228d0bd5d30f8a1e44d2a035c8debf2781021fab9377bc926de23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga9bc32feb2d65228d0bd5d30f8a1e44d2a035c8debf2781021fab9377bc926de23" kindref="member">MIOPEN_SUM_NOT_PROPAGATE_NAN</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="5613" refid="miopen_8h_1ga9bc32feb2d65228d0bd5d30f8a1e44d2ad8fd8eb57469847c5d3768e00fe9cc72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miopen_8h_1ga9bc32feb2d65228d0bd5d30f8a1e44d2ad8fd8eb57469847c5d3768e00fe9cc72" kindref="member">MIOPEN_SUM_PROPAGATE_NAN</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="5614"><highlight class="normal">}<sp/><ref refid="group__sum_1ga9bc32feb2d65228d0bd5d30f8a1e44d2" kindref="member">miopenSumNanPropagation_t</ref>;</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"></highlight></codeline>
<codeline lineno="5616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sum<sp/>APIs</highlight></codeline>
<codeline lineno="5631" refid="group__sum_1gaaedf9fa469c2305481ba2a7138691238" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__sum_1gaaedf9fa469c2305481ba2a7138691238" kindref="member">miopenGetSumWorkspaceSize</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>dim,</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>sizeInBytes);</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"></highlight></codeline>
<codeline lineno="5650" refid="group__sum_1ga792e22dc02c7a8a5c7296ef35bf6f0e5" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__sum_1ga792e22dc02c7a8a5c7296ef35bf6f0e5" kindref="member">miopenSumForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sum_1ga9bc32feb2d65228d0bd5d30f8a1e44d2" kindref="member">miopenSumNanPropagation_t</ref><sp/>nanPropagation,</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>workspace,</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>workspaceSizeInBytes,</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>dim,</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y);</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"></highlight></codeline>
<codeline lineno="5661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>SUM<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5662"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5663"><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5665"><highlight class="normal"></highlight></codeline>
<codeline lineno="5677" refid="miopen_8h_1ad71682910a5370d8a7a8f0d62b55a6de" refkind="member"><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="miopen_8h_1ad71682910a5370d8a7a8f0d62b55a6de" kindref="member">miopenArgmaxForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>dim,</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y);</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"></highlight></codeline>
<codeline lineno="5684"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5685"><highlight class="normal"></highlight></codeline>
<codeline lineno="5686"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MIOPEN_BETA_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GroupNorm<sp/>APIs</highlight></codeline>
<codeline lineno="5712" refid="group__groupnorm_1ga78187f1ce6f0529b0e66b2bcb0d42037" refkind="member"><highlight class="comment"></highlight><highlight class="normal">MIOPEN_EXPORT<sp/><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref><sp/><ref refid="group__groupnorm_1ga78187f1ce6f0529b0e66b2bcb0d42037" kindref="member">miopenGroupNormForward</ref>(miopenHandle_t<sp/>handle,</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__layernorm_1ga996bace523abc82c6847984c34b60d5b" kindref="member">miopenNormMode_t</ref><sp/>mode,</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>xDesc,</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>weightDesc,</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>weight,</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>biasDesc,</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bias,</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>num_groups,</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon,</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>yDesc,</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y,</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>meanDesc,</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mean,</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>miopenTensorDescriptor_t<sp/>rstdDesc,</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>rstd);</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"></highlight></codeline>
<codeline lineno="5730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOSEOUT<sp/>groupnorm<sp/>DOXYGEN<sp/>GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5732"><highlight class="normal"></highlight></codeline>
<codeline lineno="5733"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight></codeline>
<codeline lineno="5737"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5739"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5740"><highlight class="normal"></highlight></codeline>
<codeline lineno="5741"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>MIOPEN_GUARD_MIOPEN_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h"/>
  </compounddef>
</doxygen>
