<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group___r_n_n" kind="group">
    <compoundname>RNN</compoundname>
    <title>RNN</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___r_n_n_1ga016f266507f199def908fe39c43d7877" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNMode_t</name>
        <enumvalue id="group___r_n_n_1gga016f266507f199def908fe39c43d7877af714eb36c96ca365b643e7e8417c10cc" prot="public">
          <name>miopenRNNRELU</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RNN with ReLU activation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga016f266507f199def908fe39c43d7877a1d43e2e3151aa1266cc10e8623c0a32b" prot="public">
          <name>miopenRNNTANH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RNN with tanh activation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga016f266507f199def908fe39c43d7877a97804b8e078f16b327e50e5554df970c" prot="public">
          <name>miopenLSTM</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LSTM </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga016f266507f199def908fe39c43d7877aa13bc340d91e98e610e92b75e5928a66" prot="public">
          <name>miopenGRU</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRU </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RNN mode selection for rnn layer preference </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3442" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3443" bodyend="3448"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNInputMode_t</name>
        <enumvalue id="group___r_n_n_1gga11808e1b616d9b9d7e6c701986783af7a168f261ee3dc35ea3fe636c644610c2f" prot="public">
          <name>miopenRNNlinear</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Matrix multiplication at the input of the first layer </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga11808e1b616d9b9d7e6c701986783af7a99c1caff2a69fb37d964fb3692c989da" prot="public">
          <name>miopenRNNskip</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No operation is performed at the input of the first layer. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network layer initial input mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3453" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3454" bodyend="3457"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNAlgo_t</name>
        <enumvalue id="group___r_n_n_1gga6bca6bf2c239cb387d99a07cb6b331c4aee4782e7cebfb009314cdd6c695a5b90" prot="public">
          <name>miopenRNNdefault</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use dedicated gate-operation kernel for LSTM and fundamental algorithm for vanilla RNN &amp; GRU </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga6bca6bf2c239cb387d99a07cb6b331c4a2dfd71a22376cd8b11bd1a1b4fe46996" prot="public">
          <name>miopenRNNfundamental</name>
          <initializer>=
        1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Function by basic tesnsor operations, supported for vanilla RNN, LSTM, GRU </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network algorithm mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3462" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3463" bodyend="3468"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNDirectionMode_t</name>
        <enumvalue id="group___r_n_n_1gga3c7adae8941033d266f1d5e029504c38a78752802fd2c7248fd4fdddbf613264b" prot="public">
          <name>miopenRNNunidirection</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Forward in time only. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga3c7adae8941033d266f1d5e029504c38a2f0f99690655d0df5ca16bd5011908ea" prot="public">
          <name>miopenRNNbidirection</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Forward and backwards in time. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network bi-directional behavior </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3473" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3474" bodyend="3477"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNBiasMode_t</name>
        <enumvalue id="group___r_n_n_1gga47b037e570937a567de38e8898a99f37a2eb8172730ba33866564865fe4e2d7ea" prot="public">
          <name>miopenRNNNoBias</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No Biases will be applied to GEMM operations </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga47b037e570937a567de38e8898a99f37a14fd5be6ddb03ef2d81d27ff8a868d10" prot="public">
          <name>miopenRNNwithBias</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Biases will be applied to GEMM operations </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network add on bias </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3482" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3483" bodyend="3486"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1gac7f800028b5634cb08aa191fa6ee0d2a" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNGEMMalgoMode_t</name>
        <enumvalue id="group___r_n_n_1ggac7f800028b5634cb08aa191fa6ee0d2aa5803419df2c12a2ea02b7560a54ebee7" prot="public">
          <name>miopenRNNAlgoGEMM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network add on bias </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3491" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3492" bodyend="3494"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNPaddingMode_t</name>
        <enumvalue id="group___r_n_n_1ggaeb0b6dbeefb776e9b663c66a247a7121a280a03179097c1c96d3b26f4f25543e2" prot="public">
          <name>miopenRNNIONotPadded</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Not padded data at RNN input/output </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1ggaeb0b6dbeefb776e9b663c66a247a7121a0d1f9de9cb101771b9bb572ddfa2f2ef" prot="public">
          <name>miopenRNNIOWithPadding</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Padded data at RNN input/output </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network input/output data padding mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3499" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3500" bodyend="3503"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNFWDMode_t</name>
        <enumvalue id="group___r_n_n_1gga9e0d9408f321de068cc30ad5a7de778ba2a424459293f8f7a74ab45b70a902f4e" prot="public">
          <name>miopenRNNTraining</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FWD, BWD, WRW </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga9e0d9408f321de068cc30ad5a7de778ba2e5ed4c109920976110cdc7c7fd4cefc" prot="public">
          <name>miopenRNNInference</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Only FWD-inference no back-propagation </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recurrent Neural Network Training/Inference mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3508" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3509" bodyend="3512"/>
      </memberdef>
      <memberdef kind="enum" id="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenRNNBaseLayout_t</name>
        <enumvalue id="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fae9bb9aaef77070d408758f4d2dbef44d" prot="public">
          <name>miopenRNNDataUnknownLayout</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fa956d8d35f87c4aa06a4f9d5561aef5f1" prot="public">
          <name>miopenRNNDataSeqMajorNotPadded</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fa04fbe3dee060a5d78eb007028468134f" prot="public">
          <name>miopenRNNDataSeqMajorPadded</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_n_n_1gga637e3f078445cce6869966a46e1a486fad5db52f1c42231b13de635892872c931" prot="public">
          <name>miopenRNNDataBatchMajorPadded</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data layouts for RNN operations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3517" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="3518" bodyend="3523"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___r_n_n_1ga781cb4cafc3e631e189a0ec014a2729f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenRNNDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenRNNDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenRNNDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="332" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="332" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gab6af15d94b2e0932873142d55aa239b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateRNNDescriptor</definition>
        <argsstring>(miopenRNNDescriptor_t *rnnDesc)</argsstring>
        <name>miopenCreateRNNDescriptor</name>
        <param>
          <type>miopenRNNDescriptor_t *</type>
          <declname>rnnDesc</declname>
        </param>
        <briefdescription>
<para>Create a RNN layer Descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>API for creating an uninitialized RNN layer descriptor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a tensor descriptor type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3531" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3531" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga6ac11f7ee823327d80e1b0ebc6774b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNDescriptor</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, miopenRNNMode_t *rnnMode, miopenRNNAlgo_t *algoMode, miopenRNNInputMode_t *inputMode, miopenRNNDirectionMode_t *dirMode, miopenRNNBiasMode_t *biasMode, int *hiddenSize, int *layer)</argsstring>
        <name>miopenGetRNNDescriptor</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref> *</type>
          <declname>rnnMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref> *</type>
          <declname>algoMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref> *</type>
          <declname>inputMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref> *</type>
          <declname>dirMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref> *</type>
          <declname>biasMode</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hiddenSize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Retrieves a RNN layer descriptor&apos;s details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algoMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN algorithm mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN data input mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dirMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Uni or bi direction mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Bias used (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hiddenSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of hidden state (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of stacked layers (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3545" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3545" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga102a6710811b4662eee1c3f2858b3498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNDescriptor_V2</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, int *hiddenSize, int *layer, miopenDropoutDescriptor_t *dropoutDesc, miopenRNNInputMode_t *inputMode, miopenRNNDirectionMode_t *dirMode, miopenRNNMode_t *rnnMode, miopenRNNBiasMode_t *biasMode, miopenRNNAlgo_t *algoMode, miopenDataType_t *dataType)</argsstring>
        <name>miopenGetRNNDescriptor_V2</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hiddenSize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenDropoutDescriptor_t *</type>
          <declname>dropoutDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref> *</type>
          <declname>inputMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref> *</type>
          <declname>dirMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref> *</type>
          <declname>rnnMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref> *</type>
          <declname>biasMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref> *</type>
          <declname>algoMode</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>dataType</declname>
        </param>
        <briefdescription>
<para>Retrieves a RNN layer descriptor&apos;s details version 2. This version enables retrieving information of the dropout descriptor of the rnn descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hiddenSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of hidden state (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of stacked layers (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-configured dropout descriptor for dropout layer in between RNN layers (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN data input mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dirMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Uni or bi direction mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Bias used (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algoMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN algorithm mode (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type of RNN (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3570" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3570" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaf5675f82ade15ca38b890f6ea4d035b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyRNNDescriptor</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc)</argsstring>
        <name>miopenDestroyRNNDescriptor</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the tensor descriptor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN tensor descriptor type (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3586" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3586" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga609253972613b2dc6ea2e9d07697f665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNDescriptor</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, const int hsize, const int nlayers, miopenRNNInputMode_t inMode, miopenRNNDirectionMode_t direction, miopenRNNMode_t rnnMode, miopenRNNBiasMode_t biasMode, miopenRNNAlgo_t algo, miopenDataType_t dataType)</argsstring>
        <name>miopenSetRNNDescriptor</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>hsize</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nlayers</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref></type>
          <declname>inMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref></type>
          <declname>rnnMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref></type>
          <declname>biasMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <briefdescription>
<para>Set the details of the RNN descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting the values of the RNN descriptor object. This function requires specific algorithm selection. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Hidden layer size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nlayers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of layers (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN first layer input mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN direction (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN model type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN bias included (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN algorithm selected (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3603" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3603" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaf02ff9a9c328099753d9244eae95c5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNDescriptor_V2</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, const int hsize, const int nlayers, miopenDropoutDescriptor_t dropoutDesc, miopenRNNInputMode_t inMode, miopenRNNDirectionMode_t direction, miopenRNNMode_t rnnMode, miopenRNNBiasMode_t biasMode, miopenRNNAlgo_t algo, miopenDataType_t dataType)</argsstring>
        <name>miopenSetRNNDescriptor_V2</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>hsize</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nlayers</declname>
        </param>
        <param>
          <type>miopenDropoutDescriptor_t</type>
          <declname>dropoutDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga11808e1b616d9b9d7e6c701986783af7" kindref="member">miopenRNNInputMode_t</ref></type>
          <declname>inMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga3c7adae8941033d266f1d5e029504c38" kindref="member">miopenRNNDirectionMode_t</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga016f266507f199def908fe39c43d7877" kindref="member">miopenRNNMode_t</ref></type>
          <declname>rnnMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga47b037e570937a567de38e8898a99f37" kindref="member">miopenRNNBiasMode_t</ref></type>
          <declname>biasMode</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga6bca6bf2c239cb387d99a07cb6b331c4" kindref="member">miopenRNNAlgo_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <briefdescription>
<para>Set the details of the RNN descriptor version 2. This version enables the use of dropout in rnn. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting the values of the RNN descriptor object. This function requires specific algorithm selection. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Hidden layer size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nlayers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of layers (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dropoutDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-initialized dropout descriptor for dropout layer in between RNN layers (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN first layer input mode (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN direction (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN model type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN bias included (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN algorithm selected (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3631" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3631" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gadaf0448f9d4ee351183c7e83d2b5f520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNDataSeqTensorDescriptor</definition>
        <argsstring>(miopenSeqTensorDescriptor_t seqTensorDesc, miopenDataType_t dataType, miopenRNNBaseLayout_t layout, int maxSequenceLen, int batchSize, int vectorSize, const int *sequenceLenArray, void *paddingMarker)</argsstring>
        <name>miopenSetRNNDataSeqTensorDescriptor</name>
        <param>
          <type>miopenSeqTensorDescriptor_t</type>
          <declname>seqTensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" kindref="member">miopenRNNBaseLayout_t</ref></type>
          <declname>layout</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSequenceLen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vectorSize</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>sequenceLenArray</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>paddingMarker</declname>
        </param>
        <briefdescription>
<para>Set shape of RNN seqData tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting tensor shape to be used as RNN input data</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seqTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the main supported layouts for RNN data(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence length limit within this SeqTensor(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of sequences within this SeqTensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vectorSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLenArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the length of each sequence in the SeqTensor(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paddingMarker</parametername>
</parameternamelist>
<parameterdescription>
<para>Not used, should be NULL (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3657" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3657" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga90c8af014044546749e8dfd68a074ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNDataSeqTensorDescriptor</definition>
        <argsstring>(miopenSeqTensorDescriptor_t seqTensorDesc, miopenDataType_t *dataType, miopenRNNBaseLayout_t *layout, int *maxSequenceLen, int *batchSize, int *vectorSize, int sequenceLenArrayLimit, int *sequenceLenArray, void *paddingMarker)</argsstring>
        <name>miopenGetRNNDataSeqTensorDescriptor</name>
        <param>
          <type>miopenSeqTensorDescriptor_t</type>
          <declname>seqTensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga637e3f078445cce6869966a46e1a486f" kindref="member">miopenRNNBaseLayout_t</ref> *</type>
          <declname>layout</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>maxSequenceLen</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vectorSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sequenceLenArrayLimit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sequenceLenArray</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>paddingMarker</declname>
        </param>
        <briefdescription>
<para>Get shape of RNN seqData tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting tensor shape to be used as RNN input data</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seqTensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the main supported layouts for RNN data(output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence length limit within this SeqTensor(output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of sequences within this SeqTensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vectorSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLenArrayLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit for number of elements that can be returned to user by sequenceLenArray (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLenArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the length of each sequence in the SeqTensor. This is allowed to be a NULL pointer if sequenceLenArrayLimit is 0 (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paddingMarker</parametername>
</parameternamelist>
<parameterdescription>
<para>Not used, should be NULL (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3685" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3685" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gad2f8db58662277452612e0b3381123fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNWorkspaceSize</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, size_t *numBytes)</argsstring>
        <name>miopenGetRNNWorkspaceSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Query the amount of memory required to execute the RNN layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the amount of memory required to run the RNN layer given an RNN descriptor and a tensor descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iteration unrolls (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3711" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3711" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga59b770093f4ab10d72126436b1d0395a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNTrainingReserveSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, size_t *numBytes)</argsstring>
        <name>miopenGetRNNTrainingReserveSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Query the amount of memory required for RNN training. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the amount of memory required to train the RNN layer given an RNN descriptor and a tensor descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iteration unrolls (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3733" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3733" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga82cf9678664959b494765e56f06f87c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNTempSpaceSizes</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, miopenSeqTensorDescriptor_t xDesc, miopenRNNFWDMode_t fwdMode, size_t *workSpaceSize, size_t *reserveSpaceSize)</argsstring>
        <name>miopenGetRNNTempSpaceSizes</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>miopenSeqTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" kindref="member">miopenRNNFWDMode_t</ref></type>
          <declname>fwdMode</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>workSpaceSize</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>reserveSpaceSize</declname>
        </param>
        <briefdescription>
<para>Query the amount of additional memory required for this RNN layer execution. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the size of extra buffers, depending on the layer configuration, which is determined by: RNN descriptor, isInference, and data descriptor. If isInference is True, reserve_space_size is always zero, because the reserve_space buffer is not used in Inference computation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence data tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fwdMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies in which mode the buffers will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum WorkSpace buffer size required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum ReserveSpaceSize buffer size required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3755" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3755" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga2394f4629b6da29bf2145f0e0220810c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNParamsSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, miopenTensorDescriptor_t xDesc, size_t *numBytes, miopenDataType_t dtype)</argsstring>
        <name>miopenGetRNNParamsSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
<para>Query the amount of parameter memory required for RNN training. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the amount of parameter memory required to train the RNN layer given an RNN descriptor and a tensor descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for RNN layer execution (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen data type enum (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3774" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3774" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gadf75eb328f82b81ddc83d4230b0c54af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNParamsDescriptor</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, miopenDataType_t dtype)</argsstring>
        <name>miopenGetRNNParamsDescriptor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
<para>Obtain a weight tensor descriptor for RNNs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function populates a weight descriptor that describes the memory layout of the weight matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Fully populated RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A previously populated tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A previously allocated tensor descriptor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen data type enum (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3792" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3792" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga97b8a45e7925826423dd5e2795a5f8cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNInputTensorSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int seqLen, miopenTensorDescriptor_t *xDesc, size_t *numBytes)</argsstring>
        <name>miopenGetRNNInputTensorSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>seqLen</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Obtain a the size in bytes of the RNN input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines the size in bytes of the allocation needed for the input data tensor for an RNN layer. The number of bytes is derived from the array of tensor descriptors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Fully populated RNN layer descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seqLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iteration unrolls (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for input tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3815" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3815" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaf5d51f866c74ce07a6cc4286fa06200c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNHiddenTensorSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int seqLen, miopenTensorDescriptor_t *xDesc, size_t *numBytes)</argsstring>
        <name>miopenGetRNNHiddenTensorSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>seqLen</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Obtain a the size in bytes of the RNN hidden tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines the size in bytes of the allocation needed for the hidden tensor over all layers</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Fully populated RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seqLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iteration unrolls (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of previously populated tensor descriptors (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes required for input tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3833" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3833" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gab082ab70bd71d3d5a248b76bf96def6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerParamSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, const int paramID, size_t *numBytes)</argsstring>
        <name>miopenGetRNNLayerParamSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>paramID</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Gets the number of bytes of a parameter matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, paramID == 0 retrieves the weight matrix associated with the in input GEMM, while paramID == 1 retrieves the weight matrix associated with the hidden state GEMM.</para>
<para>For miopenLSTM paramID 0 to 3 refer to the weight matrices associated with the input GEMM, 4-7 are associated with matrices associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>paramID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>paramID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>paramID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU paramID 0 to 2 refer to the weight matrix offset associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>paramID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>paramID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes of the layer&apos;s parameter matrix (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3879" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3879" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga5ed3d73c243de909de9ebf58a1d3d5d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerBiasSize</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, const int biasID, size_t *numBytes)</argsstring>
        <name>miopenGetRNNLayerBiasSize</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>biasID</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Gets the number of bytes of a bias. </para>
        </briefdescription>
        <detaileddescription>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, biasID == 0 retrieves the weight matrix associated with the in input GEMM, while biasID == 1 retrieves the bias associated with the hidden state GEMM.</para>
<para>For miopenLSTM biasID 0 to 3 refer to the biases associated with the input GEMM, 4-7 are associated with biases associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>biasID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>biasID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>biasID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU biasID 0 to 2 refer to the biases associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>biasID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>biasID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes of the layer&apos;s bias (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3923" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3923" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gacd0730d483c86d3f9f047658a58f5695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerParam</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, const void *w, const int paramID, miopenTensorDescriptor_t paramDesc, void *layerParam)</argsstring>
        <name>miopenGetRNNLayerParam</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>paramID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>paramDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>layerParam</declname>
        </param>
        <briefdescription>
<para>Gets a weight matrix for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the weight matrix data for a specific layer and parameter ID and copies the data into previously allocated device memory.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, paramID == 0 retrieves the weight matrix associated with the in input GEMM, while paramID == 1 retrieves the weight matrix associated with the hidden state GEMM.</para>
<para>For miopenLSTM paramID 0 to 3 refer to the weight matrices associated with the input GEMM, 4-7 are associated with matrices associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>paramID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>paramID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>paramID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU paramID 0 to 2 refer to the weight matrix offset associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>paramID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>paramID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The output argument paramDesc is a previously created tensor descriptor that is populated to describe the memory layout of the parameter matrix. It is full packed and is used when calling to <ref refid="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" kindref="member">miopenSetRNNLayerParam()</ref></para>
<para>The argument layerParam should either be nullptr, or have device memory allocated to allow copying of the entire layer parameter matrix into it. If layerParam is nullptr then only the paramDesc is populated and returned. The size in bytes of the layer parameter matrix can be determined by using <ref refid="group___r_n_n_1gab082ab70bd71d3d5a248b76bf96def6b" kindref="member">miopenGetRNNLayerParamSize()</ref>.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1gacd0730d483c86d3f9f047658a58f5695" kindref="member">miopenGetRNNLayerParam()</ref> will return a error status miopenStatusBadParm for input paramID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory containing parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for the fully packed output parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerParam</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="3987" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="3987" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga4f27d46b80c043ef254fbc2caf481423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerBias</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, const void *w, const int biasID, miopenTensorDescriptor_t biasDesc, void *layerBias)</argsstring>
        <name>miopenGetRNNLayerBias</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>biasID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>layerBias</declname>
        </param>
        <briefdescription>
<para>Gets a bias for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the bias data for a specific layer and bias ID and copies the data into previously allocated device memory.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, biasID == 0 retrieves the bias associated with the in input GEMM, while biasID == 1 retrieves the bias associated with the hidden state GEMM.</para>
<para>For miopenLSTM biasID 0 to 3 refer to the biases associated with the input GEMM, 4-7 are associated with biases associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>biasID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>biasID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>biasID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU biasID 0 to 2 refer to the biases associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>biasID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>biasID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The output argument biasDesc is a previously created tensor descriptor that is populated to describe the memory layout of the bias. It is full packed and is used when calling to <ref refid="group___r_n_n_1ga1991ee70fba68f8de643c1a4aa183bf7" kindref="member">miopenSetRNNLayerBias()</ref></para>
<para>The argument layerBias should either be nullptr, or have device memory allocated to allow copying of the entire layer bias into it. If layerBias is nullptr then only the biasDesc is populated and returned. The size in bytes of the layer bias can be determined by using <ref refid="group___r_n_n_1ga5ed3d73c243de909de9ebf58a1d3d5d8" kindref="member">miopenGetRNNLayerBiasSize()</ref>.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1ga4f27d46b80c043ef254fbc2caf481423" kindref="member">miopenGetRNNLayerBias()</ref> will return a error status miopenStatusBadParm for input biasID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory containing parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the bias tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4054" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4054" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga2c445114d21ef806585c4de8fe777b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerParamOffset</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, const int paramID, miopenTensorDescriptor_t paramDesc, size_t *layerParamOffset)</argsstring>
        <name>miopenGetRNNLayerParamOffset</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>paramID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>paramDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>layerParamOffset</declname>
        </param>
        <briefdescription>
<para>Gets an index offset for a specific weight matrix for a layer in the RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the index offset for a weight matrix in a layer.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, paramID == 0 retrieves the weight matrix offset associated with the in input GEMM, while paramID == 1 retrieves the weight matrix offset associated with the hidden state GEMM.</para>
<para>For miopenLSTM paramID 0 to 3 refer to the weight matrix offsets associated with the input GEMM, 4-7 are associated with matrix offset associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>paramID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>paramID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>paramID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU paramID 0 to 2 refer to the weight matrix offset associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>paramID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>paramID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The output argument paramDesc is a previously created tensor descriptor that is populated to describe the memory layout of the parameter matrix. It is full packed and is used when calling to <ref refid="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" kindref="member">miopenSetRNNLayerParam()</ref>.</para>
<para>The argument layerParamOffset should either be nullptr, or an address to place the offset. If layerParamOffset is nullptr then only the paramDesc is populated and returned.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1ga2c445114d21ef806585c4de8fe777b70" kindref="member">miopenGetRNNLayerParamOffset()</ref> will return a error status miopenStatusBadParm for input paramID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for the fully packed output parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerParamOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Location for the parameter offset (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4118" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4118" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga24389ba4b784d7211f06b6fe4c94c8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNLayerBiasOffset</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, const int biasID, miopenTensorDescriptor_t biasDesc, size_t *layerBiasOffset)</argsstring>
        <name>miopenGetRNNLayerBiasOffset</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>biasID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>layerBiasOffset</declname>
        </param>
        <briefdescription>
<para>Gets a bias index offset for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the bias index offset for a specific layer and bias ID.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, biasID == 0 retrieves the bias associated with the in input GEMM, while biasID == 1 retrieves the weight matrix associated with the hidden state GEMM.</para>
<para>For miopenLSTM biasID 0 to 3 refer to the bias offset associated with the input GEMM, 4-7 are the bias offsets associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>biasID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>biasID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>biasID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU biasID 0 to 2 refer to the biases associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>biasID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>biasID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The output argument biasDesc is a previously created tensor descriptor that is populated to describe the memory layout of the bias. It is full packed and is used when calling to <ref refid="group___r_n_n_1ga1991ee70fba68f8de643c1a4aa183bf7" kindref="member">miopenSetRNNLayerBias()</ref></para>
<para>The argument layerBiasOffset should either be nullptr, or point to an output address. If layerBias is nullptr then only the biasDesc is populated and returned.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1ga24389ba4b784d7211f06b6fe4c94c8d7" kindref="member">miopenGetRNNLayerBiasOffset()</ref> will return a error status miopenStatusBadParm for input biasID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the parameter tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerBiasOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the bias tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4175" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4175" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNLayerParam</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, void *w, const int paramID, miopenTensorDescriptor_t paramDesc, const void *layerParam)</argsstring>
        <name>miopenSetRNNLayerParam</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>paramID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>paramDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>layerParam</declname>
        </param>
        <briefdescription>
<para>Sets a weight matrix for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the weight matrix data for a specific layer and parameter ID.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, paramID == 0 sets the weight matrix associated with the in input GEMM, while paramID == 1 sets the weight matrix associated with the hidden state GEMM.</para>
<para>For miopenLSTM paramID 0 to 3 refer to the weight matrices associated with the input GEMM, 4-7 are associated with matrices associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>paramID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>paramID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>paramID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU paramID 0 to 2 refer to the weight matrix offset associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>paramID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>paramID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>paramID 2 and 5 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The input argument paramDesc is a previously populated tensor descriptor typically by first calling <ref refid="group___r_n_n_1gacd0730d483c86d3f9f047658a58f5695" kindref="member">miopenGetRNNLayerParam()</ref>.</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case <ref refid="group___r_n_n_1gaa13b97d4ebe9960126140e7838701e13" kindref="member">miopenSetRNNLayerParam()</ref> will return a error status miopenStatusBadParm for input paramID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory containing parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerParam</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the parameter tensor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4234" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4234" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga1991ee70fba68f8de643c1a4aa183bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNLayerBias</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int layer, miopenTensorDescriptor_t xDesc, miopenTensorDescriptor_t wDesc, void *w, const int biasID, miopenTensorDescriptor_t biasDesc, const void *layerBias)</argsstring>
        <name>miopenSetRNNLayerBias</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>biasID</declname>
        </param>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>biasDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>layerBias</declname>
        </param>
        <briefdescription>
<para>Sets a bias for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the bias data for a specific layer and bias ID.</para>
<para>For RNN vanilla miopenRNNRELU and miopenRNNTANH, biasID == 0 retrieves the weight matrix associated with the in input GEMM, while biasID == 1 retrieves the bias associated with the hidden state GEMM.</para>
<para>For miopenLSTM biasID 0 to 3 refer to the biases associated with the input GEMM, 4-7 are associated with the biases associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 4 are for the input gate.</para>
</listitem><listitem><para>biasID 1 and 5 are for the forget gate.</para>
</listitem><listitem><para>biasID 2 and 6 are for the output gate.</para>
</listitem><listitem><para>biasID 3 and 7 are for the new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For miopenGRU biasID 0 to 2 refer to the biases associated with the input GEMM, while 3 through 5 are associated with the hidden state GEMM.</para>
<para><itemizedlist>
<listitem><para>biasID 0 and 3 are for the update gate.</para>
</listitem><listitem><para>biasID 1 and 4 are for the reset gate.</para>
</listitem><listitem><para>biasID 2 and 5 are for the new new memory gate.</para>
</listitem></itemizedlist>
</para>
<para>For bi-directional RNNs the backwards in time direction is numbered as the layer directly after the forward in time direction.</para>
<para>The input argument biasDesc is a previously populated tensor descriptor typically by first calling miopenGetRNNLayeBias().</para>
<para>Note: When inputSkip mode is selected there is no input layer matrix operation, and therefore no associated memory. In this case miopenSetRNNLayerBias will return a error status miopenStatusBadParm for input biasID associated with the input GEMM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>The layer number in the RNN stack (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to input (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor to the bias tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory containing bias tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the internal bias tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the bias tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layerBias</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory location of the bias tensor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4294" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4294" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gaf9f746d7c62bfbf62ff8663e54360771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetRNNPaddingMode</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, miopenRNNPaddingMode_t paddingMode)</argsstring>
        <name>miopenSetRNNPaddingMode</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" kindref="member">miopenRNNPaddingMode_t</ref></type>
          <declname>paddingMode</declname>
        </param>
        <briefdescription>
<para>Sets a bias for a specific layer in an RNN stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function changes padidng mode at previously created and initialized RNN descriptor. This function must be called before using <ref refid="group___r_n_n_1gad2f8db58662277452612e0b3381123fe" kindref="member">miopenGetRNNWorkspaceSize()</ref> and <ref refid="group___r_n_n_1ga59b770093f4ab10d72126436b1d0395a" kindref="member">miopenGetRNNTrainingReserveSize()</ref> functions. By default, not padded data is expected at the RNN input/output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paddingMode</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN input/output data padding mode (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4315" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4315" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga86fc04d775ab501c0ab829703b2cf738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetRNNPaddingMode</definition>
        <argsstring>(miopenRNNDescriptor_t rnnDesc, miopenRNNPaddingMode_t *paddingMode)</argsstring>
        <name>miopenGetRNNPaddingMode</name>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1gaeb0b6dbeefb776e9b663c66a247a7121" kindref="member">miopenRNNPaddingMode_t</ref> *</type>
          <declname>paddingMode</declname>
        </param>
        <briefdescription>
<para>This function retrieves the RNN padding mode from the RNN descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paddingMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RNN padding mode (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4325" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4325" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga8d5b72681258d9cd7f50ba03ab6215e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNForward</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, miopenRNNFWDMode_t fwdMode, const miopenSeqTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t hDesc, const void *hx, void *hy, const miopenTensorDescriptor_t cDesc, const void *cx, void *cy, const miopenSeqTensorDescriptor_t yDesc, void *y, const void *w, size_t weightSpaceSize, void *workSpace, size_t workSpaceNumBytes, void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNForward</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type><ref refid="group___r_n_n_1ga9e0d9408f321de068cc30ad5a7de778b" kindref="member">miopenRNNFWDMode_t</ref></type>
          <declname>fwdMode</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>weightSpaceSize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute forward training for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the forward training / inference pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fwdMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies in which mode the buffers will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer output tensor. If hy is NULL, then the final hidden state will not be saved. (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If hy is NULL, then the final cell state will not be saved. (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to output tensor (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the weights tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for hidden states used durning training (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4378" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4378" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga44ac8be6fceea4aa1e755958960be862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNBackwardSeqData</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const miopenSeqTensorDescriptor_t yDesc, const void *y, const void *dy, const miopenTensorDescriptor_t hDesc, const void *hx, const void *dhy, void *dhx, const miopenTensorDescriptor_t cDesc, const void *cx, const void *dcy, void *dcx, const miopenSeqTensorDescriptor_t xDesc, void *dx, const void *w, size_t weightSpaceSize, void *workSpace, size_t workSpaceNumBytes, void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNBackwardSeqData</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dcy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dcx</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>weightSpaceSize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute backward data for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the backward data pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An output tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the delta hidden layer output tensor. If dhx is NULL the hidden gradient will not ouput. (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A input cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If dcy is NULL, then the initial delta cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If dcx is NULL the cell gradient will not ouput. (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor (output)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the weights tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4447" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4447" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga1ff33e5279bfca3ed08d59bfa8069a9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNBackwardWeightsSeqTensor</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const miopenSeqTensorDescriptor_t xDesc, const void *x, const miopenTensorDescriptor_t hDesc, const void *hx, const miopenSeqTensorDescriptor_t yDesc, const void *y, void *dw, size_t weightSpaceSize, void *workSpace, size_t workSpaceNumBytes, const void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNBackwardWeightsSeqTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenSeqTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>weightSpaceSize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute backward weights for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the backward weights pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An output tensor descriptor for sequenced RNN data. This miopenSeqTensorDescriptor_t should be initialyzed by <computeroutput>miopenSetRNNDataSeqTensorDescriptor</computeroutput> function.(input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output tensor (input)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dw</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightSpaceSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the weights tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4503" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4503" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gae7844191464b02e0343af135904413ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNForwardTraining</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, const void *x, const miopenTensorDescriptor_t hxDesc, const void *hx, const miopenTensorDescriptor_t cxDesc, const void *cx, const miopenTensorDescriptor_t wDesc, const void *w, const miopenTensorDescriptor_t *yDesc, void *y, const miopenTensorDescriptor_t hyDesc, void *hy, const miopenTensorDescriptor_t cyDesc, void *cy, void *workSpace, size_t workSpaceNumBytes, void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNForwardTraining</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hyDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cyDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute forward training for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the forward training pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporal iterations to unroll (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A weights tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to output tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer output tensor. If hy is NULL, then the final hidden state will not be saved. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If hy is NULL, then the final cell state will not be saved. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4575" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4575" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga6ac03fa91d038feb1206b4f8a770af97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNBackwardData</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *yDesc, const void *y, const miopenTensorDescriptor_t *dyDesc, const void *dy, const miopenTensorDescriptor_t dhyDesc, const void *dhy, const miopenTensorDescriptor_t dcyDesc, const void *dcy, const miopenTensorDescriptor_t wDesc, const void *w, const miopenTensorDescriptor_t hxDesc, const void *hx, const miopenTensorDescriptor_t cxDesc, const void *cx, const miopenTensorDescriptor_t *dxDesc, void *dx, const miopenTensorDescriptor_t dhxDesc, void *dhx, const miopenTensorDescriptor_t dcxDesc, void *dcx, void *workSpace, size_t workSpaceNumBytes, void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNBackwardData</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>dyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dhyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dcyDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dcy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>dxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dhxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dcxDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dcx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute backward data for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the backward data pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporal iterations to unroll (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If dcy is NULL, then the initial delta cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A weights tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An input hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A input cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the delta hidden layer output tensor. If dhx is NULL the hidden gradient will not ouput. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If dcx is NULL the cell gradient will not ouput. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4669" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4669" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1ga55040b58e6820d21f58957d356715739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNBackwardWeights</definition>
        <argsstring>(miopenHandle_t handle, const miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, const void *x, const miopenTensorDescriptor_t hxDesc, const void *hx, const miopenTensorDescriptor_t *yDesc, const void *y, const miopenTensorDescriptor_t dwDesc, void *dw, void *workSpace, size_t workSpaceNumBytes, const void *reserveSpace, size_t reserveSpaceNumBytes)</argsstring>
        <name>miopenRNNBackwardWeights</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>dwDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>reserveSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserveSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute backward weights for recurrent layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the backward weights pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporal iterations to unroll (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A weights tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dw</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input / output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for random states (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserveSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for use in the forward (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4733" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4733" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group___r_n_n_1gafd8f2c43d92a7baf7de2e431bbcf7199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenRNNForwardInference</definition>
        <argsstring>(miopenHandle_t handle, miopenRNNDescriptor_t rnnDesc, const int sequenceLen, const miopenTensorDescriptor_t *xDesc, const void *x, const miopenTensorDescriptor_t hxDesc, const void *hx, const miopenTensorDescriptor_t cxDesc, const void *cx, const miopenTensorDescriptor_t wDesc, const void *w, const miopenTensorDescriptor_t *yDesc, void *y, const miopenTensorDescriptor_t hyDesc, void *hy, const miopenTensorDescriptor_t cyDesc, void *cy, void *workSpace, size_t workSpaceNumBytes)</argsstring>
        <name>miopenRNNForwardInference</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>miopenRNNDescriptor_t</type>
          <declname>rnnDesc</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sequenceLen</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cxDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>wDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t *</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>hyDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hy</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cyDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>workSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>workSpaceNumBytes</declname>
        </param>
        <briefdescription>
<para>Execute forward inference for RNN layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for executing the forward inference pass on a RNN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnnDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>RNN layer descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequenceLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporal iterations to unroll (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tensor descriptors. These are the input descriptors to each time step. The first dimension of each descriptor is the batch size and may decrease from element n to element n+1 and not increase in size. The second dimension is the same for all descriptors in the array and is the input vector length. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer input tensor. If hx is NULL, then the initial hidden state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cxDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer input tensor. If cx is NULL, then the initial cell state will be zero initialized. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A weights tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input weights tensor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of fully packed tensor descriptors associated with the output from each time step. The first dimension of the tensor descriptors must equal the first dimension of the first descriptor (batch size) in the xDesc tensor array. The second dimension of the element of the descriptor array depends on the direction mode selected. If the direction mode is unidirectional, the second dimension is the hiddenSize. If direction mode is bidirectional the second dimension is twice the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to output tensor (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A hidden tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hidden layer output tensor. If hy is NULL, then the final hidden state will not be saved. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cyDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>A output cell tensor descriptor that has as its first dimension of the number of layers if the direction mode is unidirectional and twice the number of layers if the direction mode is bidirectional. The second dimension of the descriptor must equal the largest first dimension of the xDesc tensor descriptor array. The third dimension equals the hiddenSize. (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the cell layer output tensor. If cy is NULL, then the final cell state will not be saved. (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory allocated for forward training (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workSpaceNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of allocated bytes in memory for the workspace (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="4804" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="4804" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
