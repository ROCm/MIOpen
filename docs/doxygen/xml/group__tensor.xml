<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__tensor" kind="group">
    <compoundname>tensor</compoundname>
    <title>Tensor</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__tensor_1gaa709f2b37eaf01dc20d0a8c55b9dd91b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenTensorDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenTensorDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenTensorDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
<para>Tensor descriptor is an object that allows the user to specify a layer&apos;s size for each dimension and dimension strides. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="284" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga4a71ec0b8e2e7064ccb76be40ce9b7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MIOPEN_DECLARE_OBJECT</definition>
        <argsstring>(miopenSeqTensorDescriptor)</argsstring>
        <name>MIOPEN_DECLARE_OBJECT</name>
        <param>
          <type>miopenSeqTensorDescriptor</type>
        </param>
        <briefdescription>
<para>Creates the miopenSeqTensorDescriptor_t type. </para>
        </briefdescription>
        <detaileddescription>
<para>SeqTensor descriptor is an object that allows the user to specify tensor with sequence dimension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="292" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga57867b185d47a1f10ddc50d642df784b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t *tensorDesc)</argsstring>
        <name>miopenCreateTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t *</type>
          <declname>tensorDesc</declname>
        </param>
        <briefdescription>
<para>Create a Tensor Descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>API for creating an uninitialized tensor descriptor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a tensor descriptor type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="636" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="636" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga7a9ed6faa48edc69f6d68cce68eaf8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSet4dTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t dataType, int n, int c, int h, int w)</argsstring>
        <name>miopenSet4dTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Set shape of 4D tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting 4-D tensor shape. MIOpen currently implements NCHW and NHWC layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Data height dimension size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Data width dimension size (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="650" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="650" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga1ca0a412a2de95e5f1cfb041cc045410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetNdTensorDescriptorWithLayout</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t dataType, miopenTensorLayout_t tensorLayout, const int *lens, int num_lens)</argsstring>
        <name>miopenSetNdTensorDescriptorWithLayout</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga4997f98fa2256f41736a184fa1574f8c" kindref="member">miopenTensorLayout_t</ref></type>
          <declname>tensorLayout</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lens</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_lens</declname>
        </param>
        <briefdescription>
<para>Set shape of ND tensor with specific layout. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting N-D packed tensor shape. This interface support NHWC, NCHW, NCHWc*, CHWNc* <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensorLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor layout (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lens</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor dimensions (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_lens</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor dimension size (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="664" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="664" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga8539b92c3aa163b90717fca82f7583c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSet4dTensorDescriptorEx</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t dataType, int n, int c, int h, int w, int nStride, int cStride, int hStride, int wStride)</argsstring>
        <name>miopenSet4dTensorDescriptorEx</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nStride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cStride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hStride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wStride</declname>
        </param>
        <briefdescription>
<para>Set shape and stride of 4D tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting 4-D tensor shape and stride. It allows to create the non-packed tensor. A non-packed tensor refers to the tensor where the elements are not compressed or packed in any specific way. Each element in the tensor is stored individually, and there is no special compression applied to the storage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Data height dimension size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Data width dimension size (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch dimension stride (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel dimension stride (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Height dimension stride (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Width dimension stride (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="688" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="688" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga422ba168412b4b5ae7df9a27e008870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGet4dTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t *dataType, int *n, int *c, int *h, int *w, int *nStride, int *cStride, int *hStride, int *wStride)</argsstring>
        <name>miopenGet4dTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nStride</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cStride</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hStride</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>wStride</declname>
        </param>
        <briefdescription>
<para>Get the details of the tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface to query the 4-D tensor shape.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Data height dimension size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Data width dimension size (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Mini-batch dimension stride (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel dimension stride (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Height dimension stride (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wStride</parametername>
</parameternamelist>
<parameterdescription>
<para>Width dimension stride (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="715" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="715" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1gae57f3c7b71aed10691abc2ac2a5f8f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t dataType, int nbDims, const int *dimsA, const int *stridesA)</argsstring>
        <name>miopenSetTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbDims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>dimsA</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>stridesA</declname>
        </param>
        <briefdescription>
<para>Set shape of N-dimensional tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for setting non-packed tensor shape. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input/output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbDims</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions in the dimsA array (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimsA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the size of dimensions (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stridesA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the size of stride (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="736" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="736" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga68f03f27b4afafdc7606178307a5b2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetTensorCastType</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t cast_type)</argsstring>
        <name>miopenSetTensorCastType</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref></type>
          <declname>cast_type</declname>
        </param>
        <briefdescription>
<para>Set the tensor cast type. </para>
        </briefdescription>
        <detaileddescription>
<para>For tensors where the cast_type attribute is set, the tensor elements would be converted to the target type before the target operation is applied. Currently, only supported for convolution operations targeting the FP8 datatype</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor type (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cast_type</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="752" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="752" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1gaa6907ccd3f4ebaeef047af1819d5cf05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetTensorDescriptorSize</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, int *size)</argsstring>
        <name>miopenGetTensorDescriptorSize</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set shape of N-dimensional tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface for querying tensor size. MIOpen has support for 1, 2, 3, 4, 5 dimensional tensor of layout. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in tensor described by the descriptor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="764" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="764" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga0ac6a668ed3b2e580b45c39b2dbf8b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, miopenDataType_t *dataType, int *dimsA, int *stridesA)</argsstring>
        <name>miopenGetTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" kindref="member">miopenDataType_t</ref> *</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dimsA</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stridesA</declname>
        </param>
        <briefdescription>
<para>Get the details of the N-dimensional tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen datatype (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimsA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the size of dimensions (output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stridesA</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the size of stride (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="775" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="775" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1gaab76aa1181416bea57840e67cdbe1934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroyTensorDescriptor</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc)</argsstring>
        <name>miopenDestroyTensorDescriptor</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="785" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="785" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga924b379598666fd19496f8cb597a9eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenCreateSeqTensorDescriptor</definition>
        <argsstring>(miopenSeqTensorDescriptor_t *tensorDesc)</argsstring>
        <name>miopenCreateSeqTensorDescriptor</name>
        <param>
          <type>miopenSeqTensorDescriptor_t *</type>
          <declname>tensorDesc</declname>
        </param>
        <briefdescription>
<para>Create a Tensor Descriptor for sequence data. </para>
        </briefdescription>
        <detaileddescription>
<para>API for creating an uninitialized sequence data tensor descriptor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a sequence data tensor descriptor type (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="794" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="794" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga0a66a800ae274f35c1bd5b9182bc5e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenDestroySeqTensorDescriptor</definition>
        <argsstring>(miopenSeqTensorDescriptor_t tensorDesc)</argsstring>
        <name>miopenDestroySeqTensorDescriptor</name>
        <param>
          <type>miopenSeqTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <briefdescription>
<para>Destroys the sequence data tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="802" column="1" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="802" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga35d61860e1413ff6023b391fff70b7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenOpTensor</definition>
        <argsstring>(miopenHandle_t handle, miopenTensorOp_t tensorOp, const void *alpha1, const miopenTensorDescriptor_t aDesc, const void *A, const void *alpha2, const miopenTensorDescriptor_t bDesc, const void *B, const void *beta, const miopenTensorDescriptor_t cDesc, void *C)</argsstring>
        <name>miopenOpTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198" kindref="member">miopenTensorOp_t</ref></type>
          <declname>tensorOp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha1</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>aDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha2</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>bDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>cDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>Execute element-wise tensor operations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements: <formula id="0">$ C = op ( alpha1[0] * A, alpha2[0] * B ) + beta[0] * C $</formula></para>
<para>For Forward Bias one can also use, <ref refid="group__convolutions_1ga8e445590bd57cd0038324943791a9b4a" kindref="member">miopenConvolutionForwardBias()</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensorOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation from miopenTensorOp_t (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha1</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor A&apos;s floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor A (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor A (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha2</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor B&apos;s floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor B (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor B (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor C&apos;s floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor C (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor C (input and output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="823" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="823" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga24fd91d999f4b4479b187ce20bcbb930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenSetTensor</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t yDesc, void *y, const void *alpha)</argsstring>
        <name>miopenSetTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Fills a tensor with a single value. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported datatypes are fp32, fp16, and bfp16</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to fill value (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="845" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="845" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga5e1f5d98a1c4499c3209cb4ea9d01e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenScaleTensor</definition>
        <argsstring>(miopenHandle_t handle, const miopenTensorDescriptor_t yDesc, void *y, const void *alpha)</argsstring>
        <name>miopenScaleTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Scales all elements in a tensor by a single value. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported datatypes are fp32 and fp16</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor for tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor y (input and output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="860" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="860" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga3727427906d20e31009071ff4d058357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenGetTensorNumBytes</definition>
        <argsstring>(miopenTensorDescriptor_t tensorDesc, size_t *numBytes)</argsstring>
        <name>miopenGetTensorNumBytes</name>
        <param>
          <type>miopenTensorDescriptor_t</type>
          <declname>tensorDesc</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Returns number of bytes associated with tensor descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor descriptor (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes associated with tensor descriptor (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="871" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="871" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__tensor_1ga49a729b5c718cff326e57fca6397399c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__handle_1ga74216ea6ba6c5487d5aceb46eb35f1d6" kindref="member">miopenStatus_t</ref></type>
        <definition>miopenStatus_t miopenTransformTensor</definition>
        <argsstring>(miopenHandle_t handle, const void *alpha, const miopenTensorDescriptor_t xDesc, const void *x, const void *beta, const miopenTensorDescriptor_t yDesc, void *y)</argsstring>
        <name>miopenTransformTensor</name>
        <param>
          <type>miopenHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>xDesc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const miopenTensorDescriptor_t</type>
          <declname>yDesc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Copies one tensor to another tensor with a different layout/scale. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements:<orderedlist>
<listitem><para><formula id="1">$ Y = alpha * X + beta * Y $</formula> for fp32 and fp16 datatype</para>
</listitem><listitem><para>Vectorize/de-vectorize along channel dimension C for int8 datatype</para>
</listitem></orderedlist>
</para>
<para>Currently this is used for transforming from int8 to int8x4 vector datatypes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MIOpen handle (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Source Tensor descriptor for tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Source Tensor x (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point scaling factor, allocated on the host (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination Tensor descriptor for tensor y (input) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination Tensor y (output) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>miopenStatus_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="891" column="17" declfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" declline="891" declcolumn="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenDataType_t</name>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a6e9ac7a764797dde5f1b28d3516ba69f" prot="public">
          <name>miopenHalf</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit floating point (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a33115d427e71a2759a28dfea283d5eeb" prot="public">
          <name>miopenFloat</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit floating point (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a6aa2b89e7e323df62ba76bc62b6d8c0c" prot="public">
          <name>miopenInt32</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit integer (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a6a5fcabf2ddece1384141f68b0bd34cc" prot="public">
          <name>miopenInt8</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit integer (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a656b49db33ff9a982cbcbcfd2710bb43" prot="public">
          <name>miopenBFloat16</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit binary floating point (8-bit exponent, 7-bit fraction) (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a90310ef7026c1f362feb65cdd90a6e44" prot="public">
          <name>miopenDouble</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit floating point (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17af035994430ebff11d40c896fca7624e4" prot="public">
          <name>miopenFloat8</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga8bf94a23997093548ddf866c94c4ac17a785652761965bb5a33008904660dd6bb" prot="public">
          <name>miopenBFloat8</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MIOpen floating point datatypes. Both 32-bit and 16-bit floats are supported in MIOpen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="353" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="354" bodyend="370"/>
      </memberdef>
      <memberdef kind="enum" id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8c" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenTensorLayout_t</name>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca3640618e74eb72dbdfee36f9cbb408bb" prot="public">
          <name>miopenTensorNCHW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCHW memory layout (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca1657aaece7d521bd728632a953e2f55a" prot="public">
          <name>miopenTensorNHWC</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NHWC memory layout (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca05a571279bec2ef5c20eb66c09616a3e" prot="public">
          <name>miopenTensorCHWN</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CHWN memory layout (Not supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8caff0e70e620fa03f6383f666c19977fdd" prot="public">
          <name>miopenTensorNCHWc4</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCHWc4 memory layout (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca4e90e1a30efbe32d6e3854d4bf7c9bc3" prot="public">
          <name>miopenTensorNCHWc8</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCHWc8 memory layout (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca4ca640612b360e10b1e93fa7a89c0741" prot="public">
          <name>miopenTensorCHWNc4</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CHWNc4 memory layout (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca9cf6d72886e9754658d6c511a3c29c44" prot="public">
          <name>miopenTensorCHWNc8</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CHWNc8 memory layout (Partially supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca727b31912781101a907b27391534c1c7" prot="public">
          <name>miopenTensorNCDHW</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCDHW memory layout (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1ga4997f98fa2256f41736a184fa1574f8ca1facc75bcb03d9832c5606151a34795b" prot="public">
          <name>miopenTensorNDHWC</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NCDHW memory layout (Fully supported) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tensor layouts supported by MIOpen. miopenTensorCHWNc4 and miopenTensorCHWNc8 layout only support weight tensor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="377" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="378" bodyend="388"/>
      </memberdef>
      <memberdef kind="enum" id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198" prot="public" static="no" strong="no">
        <type></type>
        <name>miopenTensorOp_t</name>
        <enumvalue id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198ad0cfac2b0c8f5668f62c2b156a7281e0" prot="public">
          <name>miopenTensorOpAdd</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Add tensors element-wise </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198ae20aa1bb8363d01002ce601f9edfdbf2" prot="public">
          <name>miopenTensorOpMul</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Multiply two tensors element-wise </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198a46cb1f291532f6b241b12b76e17ddbef" prot="public">
          <name>miopenTensorOpMin</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Minimum of tensor element pairs </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__tensor_1gaa2498dabff3e75d86471b25a2be9a198aed2a5c869fb47aa3f0aebd9945fa56da" prot="public">
          <name>miopenTensorOpMax</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum of tensor element pairs </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element-wise tensor operation modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ldelaney/MIOpen/include/miopen/miopen.h" line="406" column="1" bodyfile="/home/ldelaney/MIOpen/include/miopen/miopen.h" bodystart="407" bodyend="412"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
