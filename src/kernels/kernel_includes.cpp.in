/*******************************************************************************
 *
 * MIT License
 *
 * Copyright (c) 2021 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *******************************************************************************/
#include <algorithm>
#include <map>
#include <string_view>
#include <miopen/filesystem.hpp>
#include <miopen/kernel.hpp>

#ifndef MIOPEN_USE_CLANG_TIDY // Huge generated source
// clang-format off
${KERNELS_DECLS}
// clang-format on
#endif

namespace miopen {

const std::map<fs::path, std::string_view>& kernel_includes()
{
    static const std::map<fs::path, std::string_view> data{
#ifndef MIOPEN_USE_CLANG_TIDY // Huge generated source
        ${INIT_KERNELS}
#endif
    };
    return data;
}

std::string_view GetKernelInc(const fs::path& name)
{
    auto it = kernel_includes().find(name.filename());
    if(it == kernel_includes().end())
        MIOPEN_THROW("Failed to load kernel source: " + name.filename());

    return it->second;
}

const std::vector<std::reference_wrapper<const fs::path>>& GetKernelIncList()
{
    static const std::vector<std::reference_wrapper<const fs::path>> keys{[]() {
        std::vector<std::reference_wrapper<const fs::path>> ref_keys;
        for(const auto& m : kernel_includes())
        {
            if(m.first.extension() == ".hpp" || m.first.extension() == ".h")
                ref_keys.emplace_back(std::cref(m.first));
        }
        return ref_keys;
    }()};
    return keys;
}

} // namespace miopen
