/*******************************************************************************
 *
 * MIT License
 *
 * Copyright (c) 2020 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *******************************************************************************/
; generated by igemm_codegen.py
;
.set k_p_in, 0
.set k_hi, 8
.set k_wi, 12
.set k_n, 16
.set k_k, 20
.set k_c, 24
.set k_ho, 28
.set k_wo, 32
.set k_stride_h, 36
.set k_stride_w, 40
.set k_dilation_h, 44
.set k_dilation_w, 48
.set k_pad_h, 52
.set k_pad_w, 56
.set k_y, 60
.set k_x, 64
.set k_group, 68
.set k_magic_0, 72
.set k_magic_1, 76
.set k_magic_2, 80
.set k_shift_pack_0, 84
.set k_end, 88

.set s_ka, 0
.set s_bx, 2
.set s_p_in, 4
.set s_hi, 8
.set s_wi, 9
.set s_n, 10
.set s_k, 11
.set s_c, 12
.set s_ho, 13
.set s_wo, 14
.set s_stride_h, 15
.set s_stride_w, 16
.set s_dilation_h, 17
.set s_dilation_w, 18
.set s_pad_h, 19
.set s_pad_w, 20
.set s_y, 21
.set s_x, 22
.set s_group, 23
.set s_magic_0, 24
.set s_magic_1, 25
.set s_magic_2, 26
.set s_shift_pack_0, 27
.set s_step, 28
.set s_in_stride_c, 29
.set s_shift_0, 30
.set s_shift_1, 31
.set s_shift_2, 32
.set s_iy, 33
.set s_ix, 34
.set s_exec_buf, 36
.set s_tmp, 40
.set s_end, 44

.set v_tid, 0
.set v_current_hi, 1
.set v_current_wi, 2
.set v_current_input_valid, 3
.set v_zero, 4
.set v_current_ho, 5
.set v_current_ho_quo, 6
.set v_current_ho_rem, 7
.set v_current_ho_valid, 8
.set v_current_wo, 9
.set v_current_wo_quo, 10
.set v_current_wo_rem, 11
.set v_current_wo_valid, 12
.set v_tmp, 14
.set v_end, 20

.text
.globl igemm_upsampling_clear_nchw_fp16
.p2align 8
.type igemm_upsampling_clear_nchw_fp16,@function
igemm_upsampling_clear_nchw_fp16:
    s_load_dwordx2  s[s_p_in+0:s_p_in+1],    s[s_ka+0:s_ka+1],    0+k_p_in
    s_load_dwordx8 s[s_hi+0:s_hi+7],    s[s_ka+0:s_ka+1],    0+k_hi
    s_load_dwordx8 s[s_stride_w+0:s_stride_w+7],    s[s_ka+0:s_ka+1],    0+k_stride_w
    s_load_dwordx4  s[s_magic_0+0:s_magic_0+3]  s[s_ka+0:s_ka+1],    0+k_magic_0
    s_mov_b32 s[s_p_in+2], 0xffffffff
    s_mov_b32 s[s_p_in+3], 0x27000
    s_mov_b32 s[s_step], 256     ; block_size
    v_mov_b32 v[v_zero], 0x0     ; 0 for fp32/fp16/bf16
    s_waitcnt lgkmcnt(0)

    s_mul_i32 s[s_in_stride_c], s[s_hi], s[s_wi]
    s_lshl_b32 s[s_tmp+3], s[s_bx], 1
    s_mul_i32 s[s_tmp], s[s_in_stride_c], s[s_tmp+3]
    s_mul_hi_u32 s[s_tmp+1], s[s_in_stride_c], s[s_tmp+3]
    s_add_u32 s[s_p_in], s[s_p_in], s[s_tmp]
    s_addc_u32 s[s_p_in+1], s[s_p_in+1], s[s_tmp+1]
    s_bfe_u32 s[s_shift_0], s[s_shift_pack_0], 0x00080000 ; offset:0,  width:8
    s_bfe_u32 s[s_shift_1], s[s_shift_pack_0], 0x00080008 ; offset:8,  width:8
    s_bfe_u32 s[s_shift_2], s[s_shift_pack_0], 0x00080010 ; offset:16, width:8
    v_cmp_gt_u32 vcc, s[s_in_stride_c], v[v_tid]
    s_cbranch_vccz igemm_upsampling_clear_nchw_fp16_end
igemm_upsampling_clear_nchw_fp16_start:
    s_and_saveexec_b64 s[s_exec_buf+0:s_exec_buf+1], vcc
    .mdiv_u32_rem_vs v_current_wi,v_current_hi,v_tid,s_magic_0,s_shift_0,s_wi,v_tmp

    v_mov_b32 v[v_current_ho_valid], 0
    v_mov_b32 v[v_current_wo_valid], 0
    s_mov_b32 s[s_iy], 0
igemm_upsampling_clear_nchw_fp16_y_start:
    s_mul_i32 s[s_tmp], s[s_dilation_h], s[s_iy]
    v_add_i32 v[v_tmp], s[s_pad_h], v[v_current_hi]
    v_sub_i32 v[v_current_ho], v[v_tmp], s[s_tmp]
    .mdiv_u32_rem_vs v_current_ho_rem,v_current_ho_quo,v_current_ho,s_magic_1,s_shift_1,s_stride_h,v_tmp
    v_mov_b32 v[v_tmp], 1
    v_cmp_le_i32 vcc, 0, v[v_current_ho]
    v_cndmask_b32 v[v_tmp], 0, v[v_tmp], vcc
    v_cmp_eq_u32 vcc, 0, v[v_current_ho_rem]
    v_cndmask_b32 v[v_tmp], 0, v[v_tmp], vcc
    v_cmp_gt_u32 vcc, s[s_ho],  v[v_current_ho_quo]
    v_cndmask_b32 v[v_tmp], 0, v[v_tmp], vcc
    v_or_b32 v[v_current_ho_valid], v[v_current_ho_valid], v[v_tmp]
    s_add_u32 s[s_iy], 1, s[s_iy]
    s_cmp_lt_u32 s[s_iy], s[s_y]
    s_cbranch_scc1 igemm_upsampling_clear_nchw_fp16_y_start

    s_mov_b32 s[s_ix], 0
igemm_upsampling_clear_nchw_fp16_x_start:
    s_mul_i32 s[s_tmp], s[s_dilation_w], s[s_ix]
    v_add_i32 v[v_tmp], s[s_pad_w], v[v_current_wi]
    v_sub_i32 v[v_current_wo], v[v_tmp], s[s_tmp]
    .mdiv_u32_rem_vs v_current_wo_rem,v_current_wo_quo,v_current_wo,s_magic_2,s_shift_2,s_stride_w,v_tmp
    v_mov_b32 v[v_tmp], 1
    v_cmp_le_i32 vcc, 0, v[v_current_wo]
    v_cndmask_b32 v[v_tmp], 0, v[v_tmp], vcc
    v_cmp_eq_u32 vcc, 0, v[v_current_wo_rem]
    v_cndmask_b32 v[v_tmp], 0, v[v_tmp], vcc
    v_cmp_gt_u32 vcc, s[s_wo],  v[v_current_wo_quo]
    v_cndmask_b32 v[v_tmp], 0, v[v_tmp], vcc
    v_or_b32 v[v_current_wo_valid], v[v_current_wo_valid], v[v_tmp]
    s_add_u32 s[s_ix], 1, s[s_ix]
    s_cmp_lt_u32 s[s_ix], s[s_x]
    s_cbranch_scc1 igemm_upsampling_clear_nchw_fp16_x_start

    v_and_b32 v[v_current_input_valid], v[v_current_wo_valid], v[v_current_ho_valid]
    v_cmp_eq_u32 vcc, 0, v[v_current_input_valid]
    s_and_saveexec_b64 s[s_exec_buf+2:s_exec_buf+3], vcc
    v_mul_lo_u32 v[v_tmp+1], s[s_wi], v[v_current_hi]
    v_add_lshl_u32 v[v_tmp], v[v_tmp+1], v[v_current_wi], 1
    buffer_store_short v[v_zero], v[v_tmp], s[s_p_in+0:s_p_in+3], 0  offen offset:0
    s_or_b64 exec, exec, s[s_exec_buf+2:s_exec_buf+3]
igemm_upsampling_clear_nchw_fp16_next:
    s_or_b64 exec, exec, s[s_exec_buf+0:s_exec_buf+1]
    v_add_u32 v[v_tid], s[s_step], v[v_tid]
    v_cmp_gt_u32 vcc, s[s_in_stride_c], v[v_tid]
    s_cbranch_vccnz igemm_upsampling_clear_nchw_fp16_start
igemm_upsampling_clear_nchw_fp16_end:
    s_endpgm
.rodata
.p2align 6
.amdhsa_kernel igemm_upsampling_clear_nchw_fp16
    .amdhsa_group_segment_fixed_size 0
    .amdhsa_user_sgpr_kernarg_segment_ptr 1
    .amdhsa_system_sgpr_workgroup_id_x 1
    .amdhsa_system_vgpr_workitem_id 0
    .amdhsa_next_free_vgpr 20
    .amdhsa_next_free_sgpr 50
    .amdhsa_ieee_mode 0
    .amdhsa_dx10_clamp 0
.end_amdhsa_kernel

