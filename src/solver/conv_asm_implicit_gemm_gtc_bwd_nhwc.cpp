/*******************************************************************************
 *
 * MIT License
 *
 * Copyright (c) 2021 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *******************************************************************************/
#include <miopen/solver.hpp>
#include <miopen/handle.hpp>
#include <miopen/conv/invokers/impl_gemm_dynamic.hpp>
#include <miopen/generic_search.hpp>
#include <miopen/gcn_asm_utils.hpp>
#include <miopen/solver/implicitgemm_util.hpp>
#include <miopen/conv/asm_implicit_gemm.hpp>
#include <miopen/util_sol.hpp>

MIOPEN_DECLARE_ENV_VAR(MIOPEN_DEBUG_CONV_IMPLICIT_GEMM_ASM_BWD_GTC_XDLOPS_NHWC)
MIOPEN_DECLARE_ENV_VAR(MIOPEN_DEBUG_CONV_IMPLICIT_GEMM_ASM_PK_ATOMIC_ADD_FP16)

#define BWD_MAX_GEMM_K_SPLITS 8
// #define DEBUG_IGEMM_ASM_BWD_NHWC_CHECK_VALID_TILE_LIST

namespace miopen {
namespace solver {

static const inline std::vector<PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC>&
GetBwdXdlopsNHWCConfigList()
{
    // clang-format off
    static const  std::vector<PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC> kernel_param_list {
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  64,  16, 32, 32,  2, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 256,  64,  16, 32, 32,  2, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  64,  16, 32, 32,  2, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 256,  64,  16, 32, 32,  2, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  64,   4, 32, 32,  2, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  4,  1, 64}, { 1, 1, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  64,   4, 32, 32,  2, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  4,  1, 64}, { 1, 1, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  32,  16, 32, 32,  2, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 256,  32,  16, 32, 32,  2, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  32,  16, 32, 32,  2, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 256,  32,  16, 32, 32,  2, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  32,   8, 32, 32,  2, 1, 1, 2, 1, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  32,   8, 32, 32,  2, 1, 1, 2, 1, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  32,   4, 64, 32,  1, 1, 1, 2, 1, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1,  4,  1, 32}, { 1, 1, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 256,  32,   4, 64, 32,  1, 1, 1, 2, 1, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1,  4,  1, 32}, { 1, 1, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128, 128,  16, 32, 32,  2, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128, 128,  16, 32, 32,  2, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128, 128,  16, 32, 32,  2, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128, 128,  16, 32, 32,  2, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128, 128,   8, 32, 32,  2, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128, 128,   8, 32, 32,  2, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128, 128,   4, 32, 32,  2, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 2, 1}, {  1,  4,  1, 64}, { 1, 1, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128, 128,   4, 32, 32,  2, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 2, 1}, {  1,  4,  1, 64}, { 1, 1, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,  32, 32, 32,  2, 1, 1, 1, 2, 1, 0, 0, 0, 1, { 1,16, 1, 1}, {  1,  2,  4, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  64,  32, 32, 32,  2, 1, 1, 1, 2, 0, 0, 0, 0, 1, { 1,16, 1, 1}, {  1,  2,  4, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,  32, 32, 32,  2, 1, 1, 1, 2, 1, 0, 1, 0, 1, { 1,16, 1, 1}, {  1,  2,  4, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  64,  32, 32, 32,  2, 1, 1, 1, 2, 0, 0, 1, 0, 1, { 1,16, 1, 1}, {  1,  2,  4, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,  16, 32, 32,  2, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  64,  16, 32, 32,  2, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,  16, 32, 32,  2, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  64,  16, 32, 32,  2, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,  16, 32, 32,  2, 1, 1, 1, 2, 1, 0, 0, 0, 1, { 1, 8, 1, 1}, {  1,  2,  4, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  64,  16, 32, 32,  2, 1, 1, 1, 2, 0, 0, 0, 0, 1, { 1, 8, 1, 1}, {  1,  2,  4, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,  16, 32, 32,  2, 1, 1, 1, 2, 1, 0, 1, 0, 1, { 1, 8, 1, 1}, {  1,  2,  4, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  64,  16, 32, 32,  2, 1, 1, 1, 2, 0, 0, 1, 0, 1, { 1, 8, 1, 1}, {  1,  2,  4, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,   8, 32, 32,  2, 1, 1, 2, 1, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,   8, 32, 32,  2, 1, 1, 2, 1, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,   4, 64, 32,  1, 1, 1, 1, 1, 1, 0, 0, 1, 0, { 1, 1, 2, 1}, {  1,  4,  1, 64}, { 1, 1, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  64,   4, 64, 32,  1, 1, 1, 1, 1, 1, 0, 1, 1, 0, { 1, 1, 2, 1}, {  1,  4,  1, 64}, { 1, 1, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  32,  32, 32, 32,  2, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 4, 8, 1}, {  1,  8,  1, 16}, { 1, 4, 2, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  32,  32, 32, 32,  2, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 4, 8, 1}, {  1,  8,  1, 16}, { 1, 4, 2, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  32,  32, 32, 32,  2, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 4, 8, 1}, {  1,  8,  1, 16}, { 1, 4, 2, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  32,  32, 32, 32,  2, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 4, 8, 1}, {  1,  8,  1, 16}, { 1, 4, 2, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  32,  16, 32, 32,  2, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  32,  16, 32, 32,  2, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  32,  16, 32, 32,  2, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0, 128,  32,  16, 32, 32,  2, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  32,   8, 32, 32,  2, 1, 1, 1, 1, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  32,   8, 32, 32,  2, 1, 1, 1, 1, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  32,   4, 64, 32,  1, 1, 1, 1, 1, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  4,  1, 32}, { 1, 1, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1, 128,  32,   4, 64, 32,  1, 1, 1, 1, 1, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  4,  1, 32}, { 1, 1, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64, 256,  16, 32, 32,  2, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 4, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64, 256,  16, 32, 32,  2, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 4, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64, 256,  16, 32, 32,  2, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 4, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64, 256,  16, 32, 32,  2, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 4, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64, 128,  16, 32, 32,  2, 1, 1, 1, 2, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64, 128,  16, 32, 32,  2, 1, 1, 1, 2, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64, 128,  16, 32, 32,  2, 1, 1, 1, 2, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64, 128,  16, 32, 32,  2, 1, 1, 1, 2, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 2, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  64,  32, 16, 16,  4, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  8,  1, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  64,  32, 16, 16,  4, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  8,  1, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  64,  32, 16, 16,  4, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  8,  1, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  64,  32, 16, 16,  4, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  8,  1, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  64,   8, 16, 16,  1, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 2, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  64,   8, 16, 16,  1, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 2, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  64,   4, 16, 16,  1, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 1, 1}, {  1,  4,  1, 64}, { 1, 1, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  64,   4, 16, 16,  1, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 1, 1}, {  1,  4,  1, 64}, { 1, 1, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  32,  32, 16, 16,  4, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  32,  32, 16, 16,  4, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  32,  32, 16, 16,  4, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  32,  32, 16, 16,  4, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  32,  16, 16, 16,  4, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  32,  16, 16, 16,  4, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  32,  16, 16, 16,  4, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  32,  16, 16, 16,  4, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  16,  32, 16, 16,  4, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  8,  1, 16}, { 1, 4, 1, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  16,  32, 16, 16,  4, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  8,  1, 16}, { 1, 4, 1, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  16,  32, 16, 16,  4, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  8,  1, 16}, { 1, 4, 1, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  16,  32, 16, 16,  4, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  8,  1, 16}, { 1, 4, 1, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  16,  16, 16, 16,  4, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 2, 1, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  16,  16, 16, 16,  4, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 2, 1, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  64,  16,  16, 16, 16,  4, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 2, 1, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  64,  16,  16, 16, 16,  4, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 2, 1, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  32,  64,  32, 16, 16,  4, 1, 1, 1, 2, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  32,  64,  32, 16, 16,  4, 1, 1, 1, 2, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  32,  64,  32, 16, 16,  4, 1, 1, 1, 2, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  32,  64,  32, 16, 16,  4, 1, 1, 1, 2, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  16,  64,  32, 16, 16,  4, 1, 1, 1, 2, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 16}, { 1, 4, 4, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  16,  64,  32, 16, 16,  4, 1, 1, 1, 2, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 16}, { 1, 4, 4, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 1,  16,  64,  32, 16, 16,  4, 1, 1, 1, 2, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 16}, { 1, 4, 4, 1}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenFloat,  0, 0,  16,  64,  32, 16, 16,  4, 1, 1, 1, 2, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 16}, { 1, 4, 4, 1}, {  1,  8,  1, 16}},

        {"bwd", "nhwc", miopenHalf,  0, 1, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 1, 1, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 0, 1, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 1, 1, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 0, 1, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256, 128,   8, 64, 32,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256, 128,   8, 64, 32,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256, 128,   8, 64, 32,  4, 1, 1, 2, 2, 1, 1, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 1, 1, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 0, 1, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 1, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 0, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 1, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 1, 1, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 0, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 0, 1, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  64,   8, 64, 16,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  64,   8, 64, 16,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  64,   8, 64, 16,  4, 1, 1, 2, 2, 1, 1, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 1, 1, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 0, 1, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 1, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 0, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  32,   8, 64, 16,  4, 1, 1, 2, 1, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  32,   8, 64, 16,  4, 1, 1, 2, 1, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 256,  32,   8, 64, 16,  4, 1, 1, 2, 1, 1, 1, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 1, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 0, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 1, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 0, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 128,  16, 32, 32,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 8, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 128,  16, 32, 32,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 8, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 128,  16, 32, 32,  4, 1, 1, 2, 2, 1, 1, 1, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 8, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 128,   8, 32, 32,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 128,   8, 32, 32,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128, 128,   8, 32, 32,  4, 1, 1, 2, 2, 1, 1, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 1, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 0, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  64,  16, 32, 32,  4, 1, 1, 2, 1, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  64,  16, 32, 32,  4, 1, 1, 2, 1, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  64,  16, 32, 32,  4, 1, 1, 2, 1, 1, 1, 1, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  64,   8, 32, 32,  4, 1, 1, 2, 1, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  64,   8, 32, 32,  4, 1, 1, 2, 1, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  64,   8, 32, 32,  4, 1, 1, 2, 1, 1, 1, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 0, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 2, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 2, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 1, 1, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 2, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  32,   8, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  32,   8, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1, 128,  32,   8, 64, 16,  4, 1, 1, 1, 1, 1, 1, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 1, 1, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 0, 1, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 1, 1, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 0, 1, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 1, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 0, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 1, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 0, 1, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 1, 1, 1, 0, { 1, 1, 4, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,   8, 16, 16,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 2, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,   8, 16, 16,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 2, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  64,   8, 16, 16,  4, 1, 1, 2, 2, 1, 1, 1, 1, 0, { 1, 1, 2, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 1, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 1, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 0, 1, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 1, 1, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 0, 1, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 1,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 1, 1, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenHalf,  0, 0,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 0, 1, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},

        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256, 256,  32, 32, 32,  8, 2, 2, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256, 128,  32, 32, 32,  8, 2, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256, 128,   8, 64, 32,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256, 128,   8, 64, 32,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256,  64,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 1, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 0, 0, 0, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 1, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256,  64,  16, 64, 32,  4, 1, 1, 1, 2, 0, 0, 1, 0, 0, { 1, 4, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  64,   8, 64, 16,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  64,   8, 64, 16,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256,  32,  32, 64, 16,  4, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 8, 4, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 256,  32,  16, 64, 16,  4, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  2,  1,128}, { 1, 2, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  32,   8, 64, 16,  4, 1, 1, 2, 1, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 256,  32,   8, 64, 16,  4, 1, 1, 2, 1, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 128, 256,  32, 32, 32,  8, 1, 2, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 128, 128,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128, 128,  16, 32, 32,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 8, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128, 128,  16, 32, 32,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 8, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128, 128,   8, 32, 32,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128, 128,   8, 32, 32,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 4, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 128,  64,  32, 32, 32,  8, 1, 1, 1, 2, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  64,  16, 32, 32,  4, 1, 1, 2, 1, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  64,  16, 32, 32,  4, 1, 1, 2, 1, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  64,   8, 32, 32,  4, 1, 1, 2, 1, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  64,   8, 32, 32,  4, 1, 1, 2, 1, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0, 128,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 64}, { 1, 2, 1, 2}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 2, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 1, 0, { 1, 1, 8, 1}, {  1, 16,  1, 16}, { 1, 1, 2, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  32,   8, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1, 128,  32,   8, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1,  8,  1, 32}, { 1, 1, 1, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64, 256,  32, 32, 32,  8, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 4}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 1, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 0, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 1, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64, 128,  32, 32, 32,  8, 1, 1, 2, 1, 0, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 64}, { 1, 8, 1, 2}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64,  64,  64, 16, 16, 16, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  8,  1, 32}, { 1, 8, 1, 2}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  4,  1, 64}, { 1, 4, 1, 1}, {  1,  4,  1, 64}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 4, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  64,  16, 16, 16,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 4, 1}, {  1, 16,  1, 16}, { 1, 1, 4, 1}, {  1, 16,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  64,   8, 16, 16,  4, 1, 1, 2, 2, 1, 0, 0, 1, 0, { 1, 1, 2, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  64,   8, 16, 16,  4, 1, 1, 2, 2, 1, 0, 1, 1, 0, { 1, 1, 2, 1}, {  1,  8,  1, 32}, { 1, 1, 2, 1}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64,  32,  32, 64, 16,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 8, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 2}, {  1,  8,  1, 16}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  64,  32,  16, 64, 16,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 4, 2, 1}, {  1,  4,  1, 32}, { 1, 4, 1, 1}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  32, 128,  32, 16, 64,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 4, 1, 1}, {  1,  8,  1, 32}, { 1, 4, 1, 4}, {  1,  8,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 1,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 1, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},
        {"bwd", "nhwc", miopenBFloat16,  0, 0,  32,  64,  32, 16, 64,  4, 1, 1, 1, 1, 0, 0, 1, 0, 0, { 1, 8, 1, 1}, {  1,  4,  1, 32}, { 1, 8, 1, 2}, {  1,  4,  1, 32}},
    };
    // clang-format on
    return kernel_param_list;
}

static std::tuple<std::string, // kernel_name
                  size_t,      // block_size
                  size_t,      // grid_size
                  size_t>      // splits_4G
GetImplicitGemmGtcDynamicBwdXdlopsNHWCKernel(
    const ConvolutionContext& ctx,
    const ProblemDescription& problem,
    const PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC& config)
{
    const auto group      = problem.group_counts;
    const auto hi         = problem.out_height;
    const auto wi         = problem.out_width;
    const auto n          = problem.batch_sz;
    const auto k          = problem.n_inputs;
    const auto c          = problem.n_outputs;
    const auto ho         = problem.in_height;
    const auto wo         = problem.in_width;
    const auto stride_h   = problem.out_height > 1 ? problem.kernel_stride_h : 1;
    const auto stride_w   = problem.out_width > 1 ? problem.kernel_stride_w : 1;
    const auto dilation_h = problem.kernel_size_h > 1 ? problem.kernel_dilation_h : 1;
    const auto dilation_w = problem.kernel_size_w > 1 ? problem.kernel_dilation_w : 1;
    const auto pad_h      = problem.pad_h;
    const auto pad_w      = problem.pad_w;
    const auto y          = problem.kernel_size_h;
    const auto x          = problem.kernel_size_w;

    const auto gcd_stride_dilation_h = gcd(stride_h, dilation_h);
    const auto gcd_stride_dilation_w = gcd(stride_w, dilation_w);
    const auto y_tilda               = stride_h / gcd_stride_dilation_h;
    const auto x_tilda               = stride_w / gcd_stride_dilation_w;

    const auto h_tilda = ho + (dilation_h * (y - 1) + stride_h - 1) / stride_h;
    const auto w_tilda = wo + (dilation_w * (x - 1) + stride_w - 1) / stride_w;

    // const auto y_dot = integer_divide_ceil(y, y_tilda);
    // const auto x_dot = integer_divide_ceil(x, x_tilda);

    const auto h_tilda_left = std::max(0, pad_h - dilation_h * (y_tilda - 1)) / stride_h;
    const auto w_tilda_left = std::max(0, pad_w - dilation_w * (x_tilda - 1)) / stride_w;

    const auto h_tilda_right = std::min(h_tilda, (pad_h + hi - 1 + stride_h - 1) / stride_h + 1);
    const auto w_tilda_right = std::min(w_tilda, (pad_w + wi - 1 + stride_w - 1) / stride_w + 1);

    const auto h_tilda_slice = h_tilda_right - h_tilda_left;
    const auto w_tilda_slice = w_tilda_right - w_tilda_left;
    const auto num_of_gemm   = y_tilda * x_tilda;

    auto splits_4G =
        igemm_split_batch_size(hi, wi, ho, wo, n, k, c, miopen::GetTypeSize(problem.in_data_type));

    const auto gemm_m = (n / splits_4G) * h_tilda_slice * w_tilda_slice;
    const auto gemm_n = c / group;

    size_t block_size = config.BlockSize();
    size_t grid_size =
        static_cast<size_t>(group) * integer_divide_ceil(gemm_m, config.gemm_m_per_block) *
        integer_divide_ceil(gemm_n, config.gemm_n_per_block) * (1 << config.gemm_k_global_split);
    if(config.multihead != 0)
        grid_size *= num_of_gemm;
    std::string kernel_name = config.ToKernelName(ctx);
    return std::make_tuple(kernel_name, block_size, grid_size, splits_4G);
}

void PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC::HeuristicInit(
    const ConvolutionContext& ctx, const ProblemDescription& problem)
{
    static const std::vector<std::tuple<int, int, int>> tile_list_fp32 = {
        std::make_tuple(128, 128, 16),
        std::make_tuple(128, 64, 16),
        std::make_tuple(128, 64, 32),
        std::make_tuple(64, 128, 16),
        std::make_tuple(128, 32, 32),
        std::make_tuple(128, 32, 16),
        std::make_tuple(256, 64, 16),
        std::make_tuple(64, 256, 16),
        std::make_tuple(64, 64, 32),
        std::make_tuple(64, 32, 32),
        std::make_tuple(64, 32, 16),
        std::make_tuple(64, 16, 32),
        std::make_tuple(64, 16, 16),
        std::make_tuple(32, 64, 32),
        std::make_tuple(16, 64, 32),
    };

    static const std::vector<std::tuple<int, int, int>> tile_list_fp16 = {
        std::make_tuple(128, 128, 32),
        std::make_tuple(256, 128, 32),
        std::make_tuple(128, 256, 32),
        std::make_tuple(256, 256, 32),
        std::make_tuple(128, 64, 32),
        std::make_tuple(64, 128, 32),
        std::make_tuple(256, 64, 32),
        std::make_tuple(64, 256, 32),
        std::make_tuple(64, 64, 64),
        std::make_tuple(64, 64, 16),
        std::make_tuple(256, 32, 32),
        std::make_tuple(128, 32, 32),
        std::make_tuple(32, 128, 32),
        std::make_tuple(64, 32, 32),
        std::make_tuple(64, 32, 16),
        std::make_tuple(32, 64, 32),
    };

    static const std::vector<std::tuple<int, int, int>> tile_list_bfp16 = {
        std::make_tuple(128, 128, 32),
        std::make_tuple(256, 128, 32),
        std::make_tuple(128, 256, 32),
        std::make_tuple(128, 64, 32),
        std::make_tuple(64, 128, 32),
        std::make_tuple(256, 64, 32),
        std::make_tuple(64, 256, 32),
        std::make_tuple(64, 64, 64),
        std::make_tuple(64, 64, 16),
        std::make_tuple(256, 32, 32),
        std::make_tuple(128, 32, 32),
        std::make_tuple(32, 128, 32),
        std::make_tuple(64, 32, 32),
        std::make_tuple(64, 32, 16),
        std::make_tuple(32, 64, 32),
    };

#ifdef DEBUG_IGEMM_ASM_BWD_NHWC_CHECK_VALID_TILE_LIST
    const auto& c_list = GetBwdXdlopsNHWCConfigList();
    for(const auto& tile : tile_list_fp16)
    {
        int mp, np, kp;
        std::tie(mp, np, kp) = tile;
        bool found           = false;
        for(const auto& config : c_list)
        {
            if(config.precision == "fp32" || config.precision == "bf16")
                continue;
            if(config.gemm_m_per_block == mp && config.gemm_n_per_block == np &&
               config.gemm_k_per_block == kp &&
               !(config.tensor_a_thread_lengths[1] == 1 && config.tensor_b_thread_lengths[1] == 1))
            {
                found = true;
                break;
            }
        }
        if(!found)
        {
            MIOPEN_LOG_E("fp16 list  can't find " << mp << "x" << np << "x" << kp);
            MIOPEN_THROW(miopenStatusInternalError);
        }
    }

    for(const auto& tile : tile_list_fp32)
    {
        int mp, np, kp;
        std::tie(mp, np, kp) = tile;
        bool found           = false;
        for(const auto& config : c_list)
        {
            if(config.precision == "fp16" || config.precision == "bf16")
                continue;
            if(config.gemm_m_per_block == mp && config.gemm_n_per_block == np &&
               config.gemm_k_per_block == kp &&
               !(config.tensor_a_thread_lengths[1] == 1 && config.tensor_b_thread_lengths[1] == 1))
            {
                found = true;
                break;
            }
        }
        if(!found)
        {
            MIOPEN_LOG_E("fp32 list  can't find " << mp << "x" << np << "x" << kp);
            MIOPEN_THROW(miopenStatusInternalError);
        }
    }

    for(const auto& tile : tile_list_bfp16)
    {
        int mp, np, kp;
        std::tie(mp, np, kp) = tile;
        bool found           = false;
        for(const auto& config : c_list)
        {
            if(config.precision == "fp16" || config.precision == "fp32")
                continue;
            if(config.gemm_m_per_block == mp && config.gemm_n_per_block == np &&
               config.gemm_k_per_block == kp &&
               !(config.tensor_a_thread_lengths[1] == 1 && config.tensor_b_thread_lengths[1] == 1))
            {
                found = true;
                break;
            }
        }
        if(!found)
        {
            MIOPEN_LOG_E("fp32 list  can't find " << mp << "x" << np << "x" << kp);
            MIOPEN_THROW(miopenStatusInternalError);
        }
    }
#endif

    const auto group      = problem.group_counts;
    const auto hi         = problem.out_height;
    const auto wi         = problem.out_width;
    const auto n          = problem.batch_sz;
    const auto k          = problem.n_inputs;
    const auto c          = problem.n_outputs;
    const auto ho         = problem.in_height;
    const auto wo         = problem.in_width;
    const auto stride_h   = problem.out_height > 1 ? problem.kernel_stride_h : 1;
    const auto stride_w   = problem.out_width > 1 ? problem.kernel_stride_w : 1;
    const auto dilation_h = problem.kernel_size_h > 1 ? problem.kernel_dilation_h : 1;
    const auto dilation_w = problem.kernel_size_w > 1 ? problem.kernel_dilation_w : 1;
    const auto pad_h      = problem.pad_h;
    const auto pad_w      = problem.pad_w;
    const auto y          = problem.kernel_size_h;
    const auto x          = problem.kernel_size_w;

    const auto gcd_stride_dilation_h = gcd(stride_h, dilation_h);
    const auto gcd_stride_dilation_w = gcd(stride_w, dilation_w);
    const auto y_tilda               = stride_h / gcd_stride_dilation_h;
    const auto x_tilda               = stride_w / gcd_stride_dilation_w;

    const auto h_tilda = ho + (dilation_h * (y - 1) + stride_h - 1) / stride_h;
    const auto w_tilda = wo + (dilation_w * (x - 1) + stride_w - 1) / stride_w;

    const auto h_tilda_left = std::max(0, pad_h - dilation_h * (y_tilda - 1)) / stride_h;
    const auto w_tilda_left = std::max(0, pad_w - dilation_w * (x_tilda - 1)) / stride_w;

    const auto h_tilda_right = std::min(h_tilda, (pad_h + hi - 1 + stride_h - 1) / stride_h + 1);
    const auto w_tilda_right = std::min(w_tilda, (pad_w + wi - 1 + stride_w - 1) / stride_w + 1);

    const auto h_tilda_slice = h_tilda_right - h_tilda_left;
    const auto w_tilda_slice = w_tilda_right - w_tilda_left;
    // const auto num_of_gemm   = y_tilda * x_tilda;
    const auto gemm_m = n * h_tilda_slice * w_tilda_slice;
    const auto gemm_n = c / group;
    const auto gemm_k_even =
        k / group; // this is not the gemm_k, but in most case we prefer k be evenly divided

    bool unit_conv = (x == 1) && (y == 1) && (stride_h == 1) && (stride_w == 1) &&
                     (dilation_h == 1) && (dilation_w == 1) && (pad_h == 0) && (pad_w == 0);
    bool not_support_vector_store =
        (problem.IsFp16() || problem.IsBfp16()) && ((c / group) % 2 != 0);
    int m_per_block, n_per_block, k_per_block;

    std::tie(m_per_block, n_per_block, k_per_block) = HeuristicInitMacroTileNoPadGemmK(
        gemm_m,
        gemm_n,
        gemm_k_even,
        problem.IsFp32() ? tile_list_fp32 : (problem.IsFp16() ? tile_list_fp16 : tile_list_bfp16));

    MIOPEN_LOG_I("m_per_block:" << m_per_block << ", n_per_block:" << n_per_block
                                << ", k_per_block:" << k_per_block);

    auto find_with_gemm_k_pad = [&]() {
        const auto& config_list = GetBwdXdlopsNHWCConfigList();
        size_t min_pad_pixel    = std::numeric_limits<std::size_t>::max();
        size_t selected_index   = 0;
        for(size_t i = 0; i < config_list.size(); i++)
        {
            const auto& config = config_list[i];
            if(!((problem.IsFp16() && config.precision == "fp16") ||
                 (problem.IsBfp16() && config.precision == "bf16") ||
                 (problem.IsFp32() && config.precision == "fp32")))
                continue;
            if(!(config.tensor_a_thread_lengths[1] == 1 && config.tensor_b_thread_lengths[1] == 1))
                continue;
            // If we go here, then this is our last hope.
            // This kind of kernel support any configs
            size_t cur_pad_pixel =
                ComputeMatrixPadSize(
                    gemm_m, config.gemm_m_per_block, gemm_k_even, config.gemm_k_per_block) +
                ComputeMatrixPadSize(
                    gemm_n, config.gemm_n_per_block, gemm_k_even, config.gemm_k_per_block) +
                ComputeMatrixPadSize(
                    gemm_m, config.gemm_m_per_block, gemm_n, config.gemm_n_per_block);
            if(cur_pad_pixel < min_pad_pixel)
            {
                min_pad_pixel  = cur_pad_pixel;
                selected_index = i;
            }
        }
        CopyParameters(config_list[selected_index]);
    };

    if((m_per_block == 0 && n_per_block == 0 && k_per_block == 0) || not_support_vector_store)
    {
        // not found, let's try  gemm_k pad now.
        find_with_gemm_k_pad();
    }
    else
    {
        // found a suitable m/n/k, now let's prepare other parmater and initialize one
        const auto& config_list = GetBwdXdlopsNHWCConfigList();
        for(const auto& config : config_list)
        {
            if(!((problem.IsFp16() && config.precision == "fp16") ||
                 (problem.IsBfp16() && config.precision == "bf16") ||
                 (problem.IsFp32() && config.precision == "fp32")))
                continue;

            if(m_per_block == config.gemm_m_per_block && n_per_block == config.gemm_n_per_block &&
               k_per_block == config.gemm_k_per_block)
            {
                bool need_k_split = false;
                if(problem.IsFp16())
                {
                    // fp16 have extra limitation on c size, which dicide if need use need_k_split
                    // or not
                    if(c % 8 != 0 && c % 2 == 0)
                    {
                        need_k_split = true;
                    }
                }
                size_t current_grid_size;
                std::tie(std::ignore, std::ignore, current_grid_size, std::ignore) =
                    GetImplicitGemmGtcDynamicBwdXdlopsNHWCKernel(ctx, problem, config);
                size_t gks = ComputeLog2GemmKGlobalSplitsWith2DMerge(current_grid_size,
                                                                     1200,
                                                                     k / group,
                                                                     1,
                                                                     config.gemm_k_per_block,
                                                                     BWD_MAX_GEMM_K_SPLITS);
                need_k_split |= gks != 0;
                MIOPEN_LOG_I("into current m_per_block:" << m_per_block
                                                         << ", n_per_block:" << n_per_block
                                                         << ", k_per_block:" << k_per_block);
                if((unit_conv && config.nxe == 0) || (!unit_conv && config.nxe != 0))
                {
                    if(!config.IsValid(problem)) // last check before assigning a heuristic value
                        continue;
                    CopyParameters(config);
                    if(need_k_split)
                    {
                        if(miopen::IsDisabled(
                               MIOPEN_DEBUG_CONV_IMPLICIT_GEMM_ASM_PK_ATOMIC_ADD_FP16{}))
                            if(problem.IsFp16() && gks > 0)
                                vector_store = 1;
                        if(gks > 0)
                            gemm_k_global_split = static_cast<int>(gks);
                    }
                    return;
                }
                else
                    continue;
            }
        }
        // last try
        find_with_gemm_k_pad();
    }
}
bool PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC::IsValidValue() const
{
    if(IsDefaultConstructed())
        return true;
    const auto& config_list = GetBwdXdlopsNHWCConfigList();
    if(index >= config_list.size())
        return false;
    return *this == config_list[index];
}
bool PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC::SetNextValue(
    const ConvolutionContext& /*ctx*/)
{
    if(use_spare_set)
    {
        const auto& config_list = GetBwdXdlopsNHWCConfigList();
        if(IsDefaultConstructed())
        {
            CopyParameters(config_list[index]);
        }
        else
        {
            if(gemm_k_global_split != 0)
            {
                if(NextLinear<1, BWD_MAX_GEMM_K_SPLITS>(gemm_k_global_split))
                    index++;
                else
                    return true;
            }
            else
            {
                index++;
            }
            if(index >= config_list.size())
                return false;
            CopyParameters(config_list[index]);
        }
        return true;
    }
    else
    {
        // always break generic search of main set (no spare), make sure we can use spare set
        return false;
    }
}
bool PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC::IsValid(
    const ProblemDescription& problem) const
{
    if(IsDefaultConstructed())
        return false;

    if(!((problem.IsFp16() && precision == "fp16") || (problem.IsFp32() && precision == "fp32") ||
         (problem.IsBfp16() && precision == "bf16")))
        return false;

    if(miopen::IsDisabled(MIOPEN_DEBUG_CONV_IMPLICIT_GEMM_ASM_PK_ATOMIC_ADD_FP16{}))
        if(problem.IsFp16() && gemm_k_global_split != 0 && vector_store != 1)
            return false;

    const auto group      = problem.group_counts;
    const auto k          = problem.n_inputs;
    const auto c          = problem.n_outputs;
    const auto stride_h   = problem.out_height > 1 ? problem.kernel_stride_h : 1;
    const auto stride_w   = problem.out_width > 1 ? problem.kernel_stride_w : 1;
    const auto dilation_h = problem.kernel_size_h > 1 ? problem.kernel_dilation_h : 1;
    const auto dilation_w = problem.kernel_size_w > 1 ? problem.kernel_dilation_w : 1;
    const auto pad_h      = problem.pad_h;
    const auto pad_w      = problem.pad_w;
    const auto y          = problem.kernel_size_h;
    const auto x          = problem.kernel_size_w;

    const auto hi = problem.out_height;
    const auto wi = problem.out_width;
    const auto n  = problem.batch_sz;
    const auto ho = problem.in_height;
    const auto wo = problem.in_width;

    auto splits_4G =
        igemm_split_batch_size(hi, wi, ho, wo, n, k, c, miopen::GetTypeSize(problem.in_data_type));
    if(problem.IsFp16() && gemm_k_global_split != 0 && vector_store != 1 && splits_4G > 1)
        return false;

    bool unit_conv = (x == 1) && (y == 1) && (stride_h == 1) && (stride_w == 1) &&
                     (dilation_h == 1) && (dilation_w == 1) && (pad_h == 0) && (pad_w == 0);

    if(!(tensor_a_thread_lengths[1] == 1 && merge_e == 1))
    {
        // in case k split too large
        if(gemm_k_global_split != 0 && (gemm_k_per_block << gemm_k_global_split) > (k / group))
            return false;
        // gemm_k need be multiply of gemm_k_per_block
        if(((k >> gemm_k_global_split) / group) % gemm_k_per_block != 0)
            return false;
    }

    if(problem.IsFp16() && !(tensor_a_thread_lengths[1] == 1 && tensor_b_thread_lengths[3] == 1 &&
                             merge_e == 1 && gemm_k_global_split == 0))
    {
        if(gemm_k_global_split != 0)
        {
            if((c / group) % 2 != 0)
                return false;
        }
        else
        {
            if((c / group) % gcd(gemm_n_per_block, vector_store == 0 ? 8 : vector_store) != 0)
                return false;
        }
    }

    if(problem.IsBfp16() && !(tensor_a_thread_lengths[1] == 1 && tensor_b_thread_lengths[3] == 1 &&
                              merge_e == 1 && gemm_k_global_split == 0))
    {
        if(gemm_k_global_split == 0)
        {
            if((c / group) % gcd(gemm_n_per_block, vector_store == 0 ? 8 : vector_store) != 0)
                return false;
        }
    }

    if((nxe == 0) && !unit_conv)
    {
        return false;
    }

    // add more restriction for spare
    if(use_spare_set)
    {
        // non 1x1 kernel(except padding gemm_k) can't run 1x1 case
        if(unit_conv &&
           ((nxe != 0) && !(tensor_a_thread_lengths[1] == 1 && tensor_b_thread_lengths[1] == 1)))
            return false;
    }
    return true;
}

PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC
ConvAsmImplicitGemmGTCDynamicBwdXdlopsNHWC::GetDefaultPerformanceConfig(
    const ConvolutionContext& ctx, const ProblemDescription& problem) const
{
    PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC pp;
    pp.HeuristicInit(ctx, problem);
    MIOPEN_LOG_I(pp.ToString());
    return pp;
}
bool ConvAsmImplicitGemmGTCDynamicBwdXdlopsNHWC::IsValidPerformanceConfig(
    const ProblemDescription& problem,
    const PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC& config) const
{
    return config.IsValidValue() && config.IsValid(problem);
}

PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC
ConvAsmImplicitGemmGTCDynamicBwdXdlopsNHWC::Search(const ConvolutionContext& ctx,
                                                   const ProblemDescription& problem,
                                                   const AnyInvokeParams& invoke_ctx) const
{
    return GenericSearch(*this, ctx, problem, invoke_ctx);
}

bool ConvAsmImplicitGemmGTCDynamicBwdXdlopsNHWC::IsApplicable(
    const ConvolutionContext& ctx, const ProblemDescription& problem) const
{
    if(miopen::IsDisabled(MIOPEN_DEBUG_CONV_IMPLICIT_GEMM_ASM_BWD_GTC_XDLOPS_NHWC{}))
        return false;

    if(problem.conv_problem.GetConv().attribute.deterministic)
        return false;

    const auto device_name = ctx.GetStream().GetDeviceName();
    if((device_name != "gfx908") && (device_name != "gfx90a"))
        return false;

    if(!ctx.use_asm_kernels)
        return false;

    if(!problem.direction.IsBackwardData())
        return false;

    if(!problem.Is2d())
        return false;

    if(!problem.IsFp32() && !problem.IsFp16() && !(problem.IsBfp16() && device_name == "gfx90a"))
        return false;

    if(!ctx.rmv.IsV3())
        return false;

    const auto target = ctx.GetStream().GetTargetProperties();
    if(target.Xnack() && *target.Xnack())
        return false; // NOLINT (readability-simplify-boolean-expr)

    if(0 == igemm_split_batch_size(problem.out_height,
                                   problem.out_width,
                                   problem.in_height,
                                   problem.in_width,
                                   problem.batch_sz,
                                   problem.n_inputs,
                                   problem.n_outputs,
                                   miopen::GetTypeSize(problem.in_data_type)))
        return false;

    return true;
}

size_t ConvAsmImplicitGemmGTCDynamicBwdXdlopsNHWC::GetWorkspaceSize(
    const ConvolutionContext& ctx, const ProblemDescription& problem) const
{
    const auto& hi     = problem.out_height;
    const auto& wi     = problem.out_width;
    const auto& n      = problem.batch_sz;
    const auto& k      = problem.n_inputs;
    const auto& c      = problem.n_outputs;
    const auto& ho     = problem.in_height;
    const auto& wo     = problem.in_width;
    const auto& y      = problem.kernel_size_h;
    const auto& x      = problem.kernel_size_w;
    const auto& group  = problem.group_counts;
    const auto is_nchw = problem.IsLayoutDefault();

    size_t size_trans_input  = 0;
    size_t size_trans_weight = 0;
    size_t size_trans_output = 0;
    size_t size_tensor_cast  = 0;

    constexpr size_t buf_alignment = 256;

    size_t workspace_size = 0;
    if(is_nchw)
    {
        TransposeSolutionNhwc2Default trans_input(ctx, problem.out_data_type, n, c, hi, wi);
        TransposeSolutionDefault2Nhwc trans_weight(ctx,
                                                   problem.weights_data_type,
                                                   k,
                                                   c / group,
                                                   y,
                                                   x); // group * k_per_group as batch for weight
        TransposeSolutionDefault2Nhwc trans_output(ctx, problem.in_data_type, n, k, ho, wo);
        if(!trans_input.IsSkippable())
            size_trans_input = trans_input.GetOutputTensorSize();
        if(!trans_weight.IsSkippable())
            size_trans_weight = trans_weight.GetOutputTensorSize();
        if(!trans_output.IsSkippable())
            size_trans_output = trans_output.GetOutputTensorSize();
    }

    if(!problem.IsFp32())
        size_tensor_cast =
            miopen::GetTypeSize(miopenFloat) // The intermediate output of the 1st
                                             // kernel is FP32, when using FP32 atomic
            * n * c * hi * wi;

    MultiBufferWorkspaceTraits wt(
        {size_trans_input, size_trans_weight, size_trans_output, size_tensor_cast}, buf_alignment);
    workspace_size = wt.GetSize();

    return workspace_size;
}

ConvSolution ConvAsmImplicitGemmGTCDynamicBwdXdlopsNHWC::GetSolution(
    const ConvolutionContext& ctx,
    const ProblemDescription& problem,
    const PerformanceConfigAsmImplicitGemmGTCBwdXdlopsNHWC& config) const
{
    ConvSolution result;
    KernelInfo kernel;

    std::string kernel_name;
    size_t block_size;
    size_t grid_size;

    int splits_4G;

    std::tie(kernel_name, block_size, grid_size, splits_4G) =
        GetImplicitGemmGtcDynamicBwdXdlopsNHWCKernel(ctx, problem, config);

    const auto required_workspace_size = GetWorkspaceSize(ctx, problem);
    result.workspace_sz                = required_workspace_size;

    kernel.kernel_file = kernel_name + ".s";
    kernel.kernel_name = kernel_name;
    kernel.g_wk.clear();
    kernel.g_wk.push_back(grid_size * block_size);
    kernel.g_wk.push_back(splits_4G);
    kernel.g_wk.push_back(1);
    kernel.l_wk.clear();
    kernel.l_wk.push_back(block_size);
    kernel.l_wk.push_back(1);
    kernel.l_wk.push_back(1);

    const auto isGfx90aFp16altSupport =
        (ctx.GetStream().GetDeviceName() == "gfx90a") && problem.conv_problem.IsFp16();

    const auto is_nchw = problem.IsLayoutDefault();

    result.construction_params.push_back(kernel);
    std::ostringstream options;
    GenerateClangDefsym(options, "ROCM_METADATA_VERSION", ctx.rmv.UseV3() ? 5 : 4);

    std::ostringstream opts_0(options.str(), std::ios_base::ate);
    if(isGfx90aFp16altSupport)
        GenerateClangDefsym(opts_0, "igemm_bwd_fp16_alt_impl", 0);
    result.construction_params[0].comp_options = opts_0.str();
    std::ostringstream msg;

    if(isGfx90aFp16altSupport)
    {
        result.construction_params.push_back(kernel);
        std::ostringstream opts_1(options.str(), std::ios_base::ate);
        GenerateClangDefsym(opts_1, "igemm_bwd_fp16_alt_impl", 1);
        result.construction_params[1].comp_options = opts_1.str();
        if(miopen::IsLogging(LoggingLevel::Info2))
            msg << ", fp16_alt:" << problem.conv_problem.GetConv().attribute.gfx90aFp16alt.GetBwd();
    }

    if(is_nchw)
    {
        const auto& hi    = problem.out_height;
        const auto& wi    = problem.out_width;
        const auto& n     = problem.batch_sz;
        const auto& k     = problem.n_inputs;
        const auto& c     = problem.n_outputs;
        const auto& ho    = problem.in_height;
        const auto& wo    = problem.in_width;
        const auto& y     = problem.kernel_size_h;
        const auto& x     = problem.kernel_size_w;
        const auto& group = problem.group_counts;

        TransposeSolutionNhwc2Default trans_input(ctx, problem.out_data_type, n, c, hi, wi);
        TransposeSolutionDefault2Nhwc trans_weight(ctx,
                                                   problem.weights_data_type,
                                                   k,
                                                   c / group,
                                                   y,
                                                   x); // group * k_per_group as batch for weight
        TransposeSolutionDefault2Nhwc trans_output(ctx, problem.in_data_type, n, k, ho, wo);

        if(!trans_input.IsSkippable())
        {
            result.construction_params.push_back(trans_input.GetKernelInfo());
            if(miopen::IsLogging(LoggingLevel::Info2))
                msg << ", inp trans:" << trans_input.GetKernelName();
        }
        if(!trans_weight.IsSkippable())
        {
            result.construction_params.push_back(trans_weight.GetKernelInfo());
            if(miopen::IsLogging(LoggingLevel::Info2))
                msg << ", wei trans:" << trans_weight.GetKernelName();
        }
        if(!trans_output.IsSkippable())
        {
            result.construction_params.push_back(trans_output.GetKernelInfo());
            if(miopen::IsLogging(LoggingLevel::Info2))
                msg << ", out trans:" << trans_output.GetKernelName();
        }
    }

    MIOPEN_LOG_I2(SolverDbId() << ": " << config.ToString() << msg.str());

    result.invoker_factory =
        conv::MakeImplGemmDynamicBackwardDataXdlopsNHWCInvokerFactory(ctx, problem, config);
    return result;
}

} // namespace solver
} // namespace miopen
